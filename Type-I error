# this function generates data from 
#  an arbitrary distribution
set.seed(32)
gen_data <- function(distn, sample_size, ...) {
  return(do.call(distn, list(sample_size,...)))
}

# This function tests a sample for normality
normality_test <- function(sample_data, shapiro.alpha) {
  return(shapiro.test(sample_data)$p.value > shapiro.alpha)
}

#########################################################
# iter_passed_size: no of samples that passed normality #
#########################################################
set.seed(32)
sim <- function(iter_passed_size, distn, mu, sd,shapiro.alpha, t.alpha, 
                sample_size, ...){
  count = 0  #No of times data is generated irrespective of passing normality
  reject_h0 = 0 # No fo times we reject the null hypothesis in the t-test
  total_t.test_passed = iter_passed_size #just a reassignment
  
  while(iter_passed_size > 0) {
    x <- gen_data(distn, sample_size, ...)
    count = count + 1
    if(normality_test(x,shapiro.alpha)) {
      if(t.test(x, mu=mu)$p.value < t.alpha) {
        reject_h0 = reject_h0 + 1
      }
      iter_passed_size = iter_passed_size - 1
    }
  }
 reject_h0 / total_t.test_passed
  #print(c("Power: ",(total_t.test_passed- reject_h0) / total_t.test_passed))
}
sample <- c(10,20)
alpha <- c(0.05, 0.01)
mapply(function(shapiro.alpha, sample_size){
          sim(100,"rexp",1, NA,0.05, shapiro.alpha,sample_size)}, 
       alpha,sample)


shapiro_alpha <- c(0.1,0.05,0.01,0.05)
sample_size<-c(10,20,30,40,50,100)
pval<- numeric(length(shapiro_alpha)*length(sample_size))
pvalue<-pvalue_e<-pvalue_u<-array(pval, dim = c(length(sample_size), length((shapiro_alpha))),
              dimnames = list(sample_size,shapiro_alpha))

for (i in 1:length(sample_size)){
  n <- sample_size[i]
  print(i)
  for (j in 1:length(shapiro_alpha)){
    alpha <- shapiro_alpha[j]
    pvalue[i,j] <- sim(10000,"rnorm",0,1,0.05, alpha,n)
    pvalue_e[i,j] <- sim(10000,"rexp",1, NA,0.05, alpha,n)
  }
}
pvalue
pvalue_e
save(data, file = "Type_I.error_t.Rdata")






