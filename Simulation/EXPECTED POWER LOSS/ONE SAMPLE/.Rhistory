ylim = c(-0.02, 0.02), xlim = range(nvec), xlab = "Sample Size", ylab = "Power Loss")
lines(nvec, data_powerloss$Uniform, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(nvec, data_powerloss$t, type = "o", lty = 3, pch = 8, col = "green", lwd = 3)
lines(nvec, data_powerloss$Laplace, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
#lines(nvec, data_powerloss$Contaminate, lty = 4, lwd = 3, col = "green")
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Power loss")
legend("topright", legend=c("Normal", "Uniform", "t", "Laplace"), lwd = 3,
col=c( "red", "blue", "green", "orange"), lty =c(1, 2, 3, 4), pch = c(1, 2, 8), cex = 1.0, title = "Distribution")
# Expected Powerloss
plot(nvec, Expected_powerloss$Standard.Normal, type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.02, 0.02), xlim = range(nvec), xlab = "Sample Size", ylab = "Expected Power Loss")
lines(nvec, Expected_powerloss$Uniform, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(nvec, Expected_powerloss$t, type = "o", lty = 3, pch = 8, col = "green", lwd = 3)
lines(nvec, Expected_powerloss$Laplace, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Expected Power loss")
legend("topright", legend=c("Laplace", "Normal", "t", "Laplace"), lwd = 3,
col=c( "red", "blue", "green", "orange"), lty =c(1, 2, 3, 4), pch = c(1, 2, 8),cex = 1.0,  title = "Distribution")
knitr::opts_chunk$set(echo = TRUE, fig.height = 5, fig.width = 8)
rm(list = ls())
#load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Expected Power loss and Expected Inflation of Type I error/ONE SAMPLE/ONESAMPLE_POWERLOSS.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/EXPECTED POWER LOSS/ONE SAMPLE/ONESAMPLE_POWERLOSS.RData")
#load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/EXPECTED POWER LOSS/ONE SAMPLE/ONESAMPLE.POWERLOSS20240611.RData")
#Probability of SW test
data_prob_SW <-data.frame(prob.non.sig.SW.test_par)[-1,]
# power loss
data_powerloss <-data.frame(powerloss)[-1,]
#Expected powerloss
Expected_powerloss<-data_powerloss * data_prob_SW
nvec= nvec[-1]
#par(mar = c(9, 4, 4, 1), xpd = TRUE)
par(mfrow = c(1,2))
# Adjust margins to reduce space between plots
par(mai = c(0.95, 0.98, 0.5, 0.5))  # Adjust as needed
par(cex.lab = 1.5, font.lab = 2, cex.axis = 1.5, cex.main = 1.5, cex.sub = 1.2)  # Larger and bold labels, axis text, and title
plot(nvec, data_powerloss$Standard.Normal, type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.02, 0.02), xlim = range(nvec), xlab = "Sample Size", ylab = "Power Loss")
lines(nvec, data_powerloss$Uniform, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(nvec, data_powerloss$t, type = "o", lty = 3, pch = 8, col = "green", lwd = 3)
lines(nvec, data_powerloss$Laplace, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
#lines(nvec, data_powerloss$Contaminate, lty = 4, lwd = 3, col = "green")
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Power loss")
legend("topright", legend=c("Normal", "Uniform", "t", "Laplace"), lwd = 3,
col=c( "red", "blue", "green", "orange"), lty =c(1, 2, 3, 4), pch = c(1, 2, 8), cex = 1.0, title = "Distribution")
# Expected Powerloss
plot(nvec, Expected_powerloss$Standard.Normal, type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.02, 0.02), xlim = range(nvec), xlab = "Sample Size", ylab = "Expected Power Loss")
lines(nvec, Expected_powerloss$Uniform, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(nvec, Expected_powerloss$t, type = "o", lty = 3, pch = 8, col = "green", lwd = 3)
lines(nvec, Expected_powerloss$Laplace, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Expected Power loss")
legend("topright", legend=c("Laplace", "Normal", "t", "Laplace"), lwd = 3,
col=c( "red", "blue", "green", "orange"), lty =c(1, 2, 3, 4), pch = c(1, 2, 8),cex = 1.0,  title = "Distribution")
#par(mar = c(9, 4, 4, 1), xpd = TRUE)
par(mfrow = c(1,2))
# Adjust margins to reduce space between plots
par(mai = c(0.95, 0.98, 0.5, 0.5))  # Adjust as needed
par(cex.lab = 1.5, font.lab = 2, cex.axis = 1.5, cex.main = 1.5, cex.sub = 1.2)  # Larger and bold labels, axis text, and title
plot(nvec, data_powerloss$Standard.Normal, type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.02, 0.02), xlim = range(nvec), xlab = "Sample Size", ylab = "Power Loss")
lines(nvec, data_powerloss$Uniform, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(nvec, data_powerloss$t, type = "o", lty = 3, pch = 8, col = "green", lwd = 3)
lines(nvec, data_powerloss$Laplace, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
#lines(nvec, data_powerloss$Contaminate, lty = 4, lwd = 3, col = "green")
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Power loss")
legend("topright", legend=c("Normal", "Uniform", "t", "Laplace"), lwd = 3,
col=c( "red", "blue", "green", "orange"), lty =c(1, 2, 3, 4), pch = c(1, 2, 8), cex = 1.0, title = "Distribution")
# Expected Powerloss
plot(nvec, Expected_powerloss$Standard.Normal, type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.02, 0.02), xlim = range(nvec), xlab = "Sample Size", ylab = "Expected Power Loss")
lines(nvec, Expected_powerloss$Uniform, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(nvec, Expected_powerloss$t, type = "o", lty = 3, pch = 8, col = "green", lwd = 3)
lines(nvec, Expected_powerloss$Laplace, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Expected Power loss")
legend("topright", legend=c("Laplace", "Normal", "t", "Laplace"), lwd = 3,
col=c( "red", "blue", "green", "orange"), lty =c(1, 2, 3, 4), pch = c(1, 2, 8),cex = 1.0,  title = "Distribution")
#par(mar = c(9, 4, 4, 1), xpd = TRUE)
par(mfrow = c(1,2))
# Adjust margins to reduce space between plots
par(mai = c(0.95, 0.98, 0.5, 0.5))  # Adjust as needed
par(cex.lab = 1.5, font.lab = 2, cex.axis = 1.5, cex.main = 1.5, cex.sub = 1.2)  # Larger and bold labels, axis text, and title
plot(nvec, data_powerloss$Standard.Normal, type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.02, 0.02), xlim = range(nvec), xlab = "Sample Size", ylab = "Power Loss")
lines(nvec, data_powerloss$Uniform, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(nvec, data_powerloss$t, type = "o", lty = 3, pch = 8, col = "green", lwd = 3)
lines(nvec, data_powerloss$Laplace, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
#lines(nvec, data_powerloss$Contaminate, lty = 4, lwd = 3, col = "green")
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Power loss")
legend("topright", legend=c("Normal", "Uniform", "t", "Laplace"), lwd = 3,
col=c( "red", "blue", "green", "orange"), lty =c(1, 2, 3, 4), pch = c(1, 2, 8), cex = 1.0, title = "Distribution")
# Expected Powerloss
plot(nvec, Expected_powerloss$Standard.Normal, type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.02, 0.02), xlim = range(nvec), xlab = "Sample Size", ylab = "Expected Power Loss")
lines(nvec, Expected_powerloss$Uniform, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(nvec, Expected_powerloss$t, type = "o", lty = 3, pch = 8, col = "green", lwd = 3)
lines(nvec, Expected_powerloss$Laplace, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Expected Power loss")
legend("topright", legend=c("Laplace", "Normal", "t", "Laplace"), lwd = 3,
col=c( "red", "blue", "green", "orange"), lty =c(1, 2, 3, 4), pch = c(1, 2, 8),cex = 1.0,  title = "Distribution")
rm(list = ls())
# setwd("/home/kongyir/spring2024/power")
# source("/home/kongyir/spring2024/User_defined_functions.R")
# source("/home/kongyir/spring2024/utility.R")
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/EXPECTED POWER LOSS/ONE SAMPLE")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%% Parallel process setup %%%%%%%%%%%%%%%%%%%----
{
par_set <- function(cores_reserve = 2)
{
cores = parallel::detectCores()
cores_use <- cores - cores_reserve
if(Sys.info()["sysname"] == "Windows"){
cl <- parallel::makeCluster(cores_use) # make a socket cluster
doParallel::registerDoParallel(cl)     # for both Windows & Unix-like
}else{
cl <- snow::makeSOCKcluster(cores_use) # make a socket cluster
doSNOW::registerDoSNOW(cl)           # for
}
foreach::getDoParWorkers()
return(cl)
}
close_cluster <- function(cl) {
parallel::stopCluster(cl) # close the cluster
}
}
# set vectors
N <- 1e3; P <- 1e2; alpha <- 0.05
dist_sum <- c("Standard Normal",  "Uniform", "t", "Laplace", "Contaminated")
nvec <- c(8, 10, 15, 20, 25, 30, 50)
d <- 0.5
# Parallelized simulation setup
{
my_cl <- par_set(cores_reserve = 2)
ntasks <- length(nvec) * length(dist_sum)
pb <- txtProgressBar(max=ntasks, style=3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress=progress)
}
# Function to calculate test statistic
calculate_test_statistic <- function(x) {
return((mean(x)*sqrt(length(x))) / sqrt(var(x)))
}
# %%%%%%%%%%%%%%%%%%%%% SIMULATION SETUP %%%%%%%%%%%%%%%%%%%%%%%%----
system.time({
sim_out <- foreach(n = nvec,
.packages = c("LaplacesDemon", "VGAM"),
.options.snow=opts) %:%
foreach(dist = dist_sum)%dopar%
{
set.seed(1234)
TotalSim.passed.SW.test = 0
TotalSim = 0
pval = pval_perm  = c()
while (TotalSim.passed.SW.test < N) {
x <- generate_data(n, dist)
TotalSim = TotalSim + 1
# t test
if(shapiro.test(x)$p.value > alpha){
TotalSim.passed.SW.test = TotalSim.passed.SW.test + 1
pval[TotalSim.passed.SW.test] <- t.test(x + d)$p.value
# permutation
observed_statistic <- calculate_test_statistic(x + d)
permuted_statistics <- rep(0, P)
for (l in 1:P) {
myIndex <- sample(c(-1, 1), length(x), replace = TRUE)
sample_data <- myIndex * abs(x+ d)
permuted_statistics[l] <- calculate_test_statistic(sample_data)
}
pval_perm[TotalSim.passed.SW.test] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
}
power_t_test      <- mean(pval < alpha)
power_perm.test <- mean(pval_perm < alpha)
Prob.SW_n.s <-   TotalSim.passed.SW.test/TotalSim
Results <- list(
power_t_test = power_t_test,
power_perm.test = power_perm.test,
Prob.SW_n.s = Prob.SW_n.s
)
}
})
close_cluster(my_cl)
# %%%%%%%%%%%%%%%%%%%%%%%%%%%% Output Results %%%%%%%%%%%%%%%%%%%%%%%%%%%%-----
powervec <- numeric(length(nvec) * length(dist_sum))
power_perm.test <- power_t.test <- prob.non.sig.SW.test <- array(powervec,dim = c(length(nvec), length(dist_sum)), dimnames = list(nvec, dist_sum))
for (t in seq_along(nvec)) {
for (j in seq_along(dist_sum)) {
power_t.test[t, j] <- (sim_out[[t]][[j]]$power_t_test)
power_perm.test[t, j] <- (sim_out[[t]][[j]]$power_perm.test)
prob.non.sig.SW.test[t, j] <- (sim_out[[t]][[j]]$Prob.SW_n.s)
}
}
powerloss <- power_perm.test - power_t.test
Expected_powerloss <- powerloss * prob.non.sig.SW.test
power_t.test
power_perm.test
powerloss
prob.non.sig.SW.test
# ## Save results
# save.image(paste0("ONESAMPLE.POWERLOSS20240611",".RData"))
# save(nvec, powerloss, power_t.test,power_perm.test,prob.non.sig.SW.test,  file = "ONESAMPLE.POWERLOSS.RData")
rm(list = ls())
# setwd("/home/kongyir/spring2024/power")
# source("/home/kongyir/spring2024/User_defined_functions.R")
# source("/home/kongyir/spring2024/utility.R")
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/EXPECTED POWER LOSS/ONE SAMPLE")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%% Parallel process setup %%%%%%%%%%%%%%%%%%%----
{
par_set <- function(cores_reserve = 2)
{
cores = parallel::detectCores()
cores_use <- cores - cores_reserve
if(Sys.info()["sysname"] == "Windows"){
cl <- parallel::makeCluster(cores_use) # make a socket cluster
doParallel::registerDoParallel(cl)     # for both Windows & Unix-like
}else{
cl <- snow::makeSOCKcluster(cores_use) # make a socket cluster
doSNOW::registerDoSNOW(cl)           # for
}
foreach::getDoParWorkers()
return(cl)
}
close_cluster <- function(cl) {
parallel::stopCluster(cl) # close the cluster
}
}
# set vectors
N <- 1e3; P <- 1e3; alpha <- 0.05
dist_sum <- c("Standard Normal",  "Uniform") #, "t", "Laplace", "Contaminated")
nvec <- c(8, 10, 15, 20, 25, 30, 50)
d <- 0.5
# Parallelized simulation setup
{
my_cl <- par_set(cores_reserve = 2)
ntasks <- length(nvec) * length(dist_sum)
pb <- txtProgressBar(max=ntasks, style=3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress=progress)
}
# Function to calculate test statistic
calculate_test_statistic <- function(x) {
return((mean(x)*sqrt(length(x))) / sqrt(var(x)))
}
# %%%%%%%%%%%%%%%%%%%%% SIMULATION SETUP %%%%%%%%%%%%%%%%%%%%%%%%----
system.time({
sim_out <- foreach(n = nvec,
.packages = c("LaplacesDemon", "VGAM"),
.options.snow=opts) %:%
foreach(dist = dist_sum)%dopar%
{
set.seed(1234)
TotalSim.passed.SW.test = 0
TotalSim = 0
pval = pval_perm  = c()
while (TotalSim.passed.SW.test < N) {
x <- generate_data(n, dist)
TotalSim = TotalSim + 1
# t test
if(shapiro.test(x)$p.value > alpha){
TotalSim.passed.SW.test = TotalSim.passed.SW.test + 1
pval[TotalSim.passed.SW.test] <- t.test(x + d)$p.value
# permutation
observed_statistic <- calculate_test_statistic(x + d)
permuted_statistics <- rep(0, P)
for (l in 1:P) {
myIndex <- sample(c(-1, 1), length(x), replace = TRUE)
sample_data <- myIndex * abs(x+ d)
permuted_statistics[l] <- calculate_test_statistic(sample_data)
}
pval_perm[TotalSim.passed.SW.test] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
}
power_t_test      <- mean(pval < alpha)
power_perm.test <- mean(pval_perm < alpha)
Prob.SW_n.s <-   TotalSim.passed.SW.test/TotalSim
Results <- list(
power_t_test = power_t_test,
power_perm.test = power_perm.test,
Prob.SW_n.s = Prob.SW_n.s
)
}
})
close_cluster(my_cl)
# %%%%%%%%%%%%%%%%%%%%%%%%%%%% Output Results %%%%%%%%%%%%%%%%%%%%%%%%%%%%-----
powervec <- numeric(length(nvec) * length(dist_sum))
power_perm.test <- power_t.test <- prob.non.sig.SW.test <- array(powervec,dim = c(length(nvec), length(dist_sum)), dimnames = list(nvec, dist_sum))
for (t in seq_along(nvec)) {
for (j in seq_along(dist_sum)) {
power_t.test[t, j] <- (sim_out[[t]][[j]]$power_t_test)
power_perm.test[t, j] <- (sim_out[[t]][[j]]$power_perm.test)
prob.non.sig.SW.test[t, j] <- (sim_out[[t]][[j]]$Prob.SW_n.s)
}
}
powerloss <- power_perm.test - power_t.test
Expected_powerloss <- powerloss * prob.non.sig.SW.test
power_t.test
power_perm.test
powerloss
prob.non.sig.SW.test
# ## Save results
# save.image(paste0("ONESAMPLE.POWERLOSS20240611",".RData"))
# save(nvec, powerloss, power_t.test,power_perm.test,prob.non.sig.SW.test,  file = "ONESAMPLE.POWERLOSS.RData")
rm(list = ls())
# setwd("/home/kongyir/spring2024/power")
# source("/home/kongyir/spring2024/User_defined_functions.R")
# source("/home/kongyir/spring2024/utility.R")
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/EXPECTED POWER LOSS/ONE SAMPLE")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%% Parallel process setup %%%%%%%%%%%%%%%%%%%----
{
par_set <- function(cores_reserve = 2)
{
cores = parallel::detectCores()
cores_use <- cores - cores_reserve
if(Sys.info()["sysname"] == "Windows"){
cl <- parallel::makeCluster(cores_use) # make a socket cluster
doParallel::registerDoParallel(cl)     # for both Windows & Unix-like
}else{
cl <- snow::makeSOCKcluster(cores_use) # make a socket cluster
doSNOW::registerDoSNOW(cl)           # for
}
foreach::getDoParWorkers()
return(cl)
}
close_cluster <- function(cl) {
parallel::stopCluster(cl) # close the cluster
}
}
# set vectors
N <- 1e3; P <- 1e4; alpha <- 0.05
dist_sum <- c("Standard Normal",  "Uniform") #, "t", "Laplace", "Contaminated")
nvec <- c(8, 10, 15, 20, 25, 30, 50)
d <- 0.5
# Parallelized simulation setup
{
my_cl <- par_set(cores_reserve = 2)
ntasks <- length(nvec) * length(dist_sum)
pb <- txtProgressBar(max=ntasks, style=3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress=progress)
}
# Function to calculate test statistic
calculate_test_statistic <- function(x) {
return((mean(x)*sqrt(length(x))) / sqrt(var(x)))
}
# %%%%%%%%%%%%%%%%%%%%% SIMULATION SETUP %%%%%%%%%%%%%%%%%%%%%%%%----
system.time({
sim_out <- foreach(n = nvec,
.packages = c("LaplacesDemon", "VGAM"),
.options.snow=opts) %:%
foreach(dist = dist_sum)%dopar%
{
set.seed(1234)
TotalSim.passed.SW.test = 0
TotalSim = 0
pval = pval_perm  = c()
while (TotalSim.passed.SW.test < N) {
x <- generate_data(n, dist)
TotalSim = TotalSim + 1
# t test
if(shapiro.test(x)$p.value > alpha){
TotalSim.passed.SW.test = TotalSim.passed.SW.test + 1
pval[TotalSim.passed.SW.test] <- t.test(x + d)$p.value
# permutation
observed_statistic <- calculate_test_statistic(x + d)
permuted_statistics <- rep(0, P)
for (l in 1:P) {
myIndex <- sample(c(-1, 1), length(x), replace = TRUE)
sample_data <- myIndex * abs(x+ d)
permuted_statistics[l] <- calculate_test_statistic(sample_data)
}
pval_perm[TotalSim.passed.SW.test] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
}
power_t_test      <- mean(pval < alpha)
power_perm.test <- mean(pval_perm < alpha)
Prob.SW_n.s <-   TotalSim.passed.SW.test/TotalSim
Results <- list(
power_t_test = power_t_test,
power_perm.test = power_perm.test,
Prob.SW_n.s = Prob.SW_n.s
)
}
})
close_cluster(my_cl)
# %%%%%%%%%%%%%%%%%%%%%%%%%%%% Output Results %%%%%%%%%%%%%%%%%%%%%%%%%%%%-----
powervec <- numeric(length(nvec) * length(dist_sum))
power_perm.test <- power_t.test <- prob.non.sig.SW.test <- array(powervec,dim = c(length(nvec), length(dist_sum)), dimnames = list(nvec, dist_sum))
for (t in seq_along(nvec)) {
for (j in seq_along(dist_sum)) {
power_t.test[t, j] <- (sim_out[[t]][[j]]$power_t_test)
power_perm.test[t, j] <- (sim_out[[t]][[j]]$power_perm.test)
prob.non.sig.SW.test[t, j] <- (sim_out[[t]][[j]]$Prob.SW_n.s)
}
}
powerloss <- power_perm.test - power_t.test
Expected_powerloss <- powerloss * prob.non.sig.SW.test
power_t.test
power_perm.test
powerloss
prob.non.sig.SW.test
# ## Save results
# save.image(paste0("ONESAMPLE.POWERLOSS20240611",".RData"))
# save(nvec, powerloss, power_t.test,power_perm.test,prob.non.sig.SW.test,  file = "ONESAMPLE.POWERLOSS.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/EXPECTED POWER LOSS/ONE SAMPLE/ONESAMPLE.POWERLOSS.RData")
power_t.test
power_perm.test
powerloss
#par(mar = c(9, 4, 4, 1), xpd = TRUE)
par(mfrow = c(1,2))
# Adjust margins to reduce space between plots
par(mai = c(0.95, 0.98, 0.5, 0.5))  # Adjust as needed
par(cex.lab = 1.5, font.lab = 2, cex.axis = 1.5, cex.main = 1.5, cex.sub = 1.2)  # Larger and bold labels, axis text, and title
plot(nvec, data_powerloss$Standard.Normal, type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.02, 0.02), xlim = range(nvec), xlab = "Sample Size", ylab = "Power Loss")
rm(list = ls())
#load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Expected Power loss and Expected Inflation of Type I error/ONE SAMPLE/ONESAMPLE_POWERLOSS.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/EXPECTED POWER LOSS/ONE SAMPLE/ONESAMPLE_POWERLOSS.RData")
#load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/EXPECTED POWER LOSS/ONE SAMPLE/ONESAMPLE.POWERLOSS20240611.RData")
#Probability of SW test
data_prob_SW <-data.frame(prob.non.sig.SW.test_par)[-1,]
# power loss
data_powerloss <-data.frame(powerloss)[-1,]
#Expected powerloss
Expected_powerloss<-data_powerloss * data_prob_SW
nvec= nvec[-1]
#par(mar = c(9, 4, 4, 1), xpd = TRUE)
par(mfrow = c(1,2))
# Adjust margins to reduce space between plots
par(mai = c(0.95, 0.98, 0.5, 0.5))  # Adjust as needed
par(cex.lab = 1.5, font.lab = 2, cex.axis = 1.5, cex.main = 1.5, cex.sub = 1.2)  # Larger and bold labels, axis text, and title
plot(nvec, data_powerloss$Standard.Normal, type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.02, 0.02), xlim = range(nvec), xlab = "Sample Size", ylab = "Power Loss")
lines(nvec, data_powerloss$Uniform, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(nvec, data_powerloss$t, type = "o", lty = 3, pch = 8, col = "green", lwd = 3)
lines(nvec, data_powerloss$Laplace, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
#lines(nvec, data_powerloss$Contaminate, lty = 4, lwd = 3, col = "green")
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Power loss")
legend("topright", legend=c("Normal", "Uniform", "t", "Laplace"), lwd = 3,
col=c( "red", "blue", "green", "orange"), lty =c(1, 2, 3, 4), pch = c(1, 2, 8), cex = 1.0, title = "Distribution")
# Expected Powerloss
plot(nvec, Expected_powerloss$Standard.Normal, type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.02, 0.02), xlim = range(nvec), xlab = "Sample Size", ylab = "Expected Power Loss")
lines(nvec, Expected_powerloss$Uniform, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(nvec, Expected_powerloss$t, type = "o", lty = 3, pch = 8, col = "green", lwd = 3)
lines(nvec, Expected_powerloss$Laplace, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Expected Power loss")
legend("topright", legend=c("Normal", "Uniform", "t", "Laplace"), lwd = 3,
col=c( "red", "blue", "green", "orange"), lty =c(1, 2, 3, 4), pch = c(1, 2, 8),cex = 1.0,  title = "Distribution")
perform_analysis <- function(Generate_data, Downstream_problem, Criterion) {
# 1. Generate sample data using the provided Generate_data function
data <- Generate_data()
# 2. Apply the downstream test methods using the provided Downstream_problem function
results <- Downstream_problem(data)
# 3. Calculate the performance criteria (power, AUC, Type I error rate, etc.)
evaluation <- Criterion(results)
# Return the evaluated criteria
return(evaluation)
}
# Example Generate_data function to simulate data from different distributions
Generate_data <- function(distribution = "normal", n = 100) {
if (distribution == "normal") {
return(rnorm(n))
} else if (distribution == "uniform") {
return(runif(n))
} else if (distribution == "t") {
return(rt(n, df = 10))
} else {
stop("Unknown distribution")
}
}
# Example Downstream_problem function to apply a t-test
Downstream_problem <- function(data) {
# Let's assume we are testing whether the mean is different from 0
test_result <- t.test(data, mu = 0)
# Return the p-value and test statistic
return(list(p_value = test_result$p.value, statistic = test_result$statistic))
}
# Example Criterion function to evaluate Type I error rate
Criterion <- function(results) {
# For example, let's say Type I error is significant if p-value < 0.05
type_1_error <- ifelse(results$p_value < 0.05, 1, 0)
# You could add more criteria like power, AUC, etc.
return(list(type_1_error = type_1_error))
}
# Example usage:
set.seed(123)  # For reproducibility
# Run the analysis with data generated from a normal distribution
result <- perform_analysis(
Generate_data = function() Generate_data(distribution = "normal", n = 20),
Downstream_problem = Downstream_problem,
Criterion = Criterion
)
# View the result
print(result)
power_t.test
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/EXPECTED POWER LOSS/ONE SAMPLE/ONESAMPLE.POWERLOSS.RData")
power_t.test
power_perm.test
