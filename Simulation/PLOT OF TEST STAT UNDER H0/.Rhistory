alpha = 0.05
pval = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
pval[i] = t.test(x)$p.value
}
error = mean(pval < alpha)
error
# Two-stage procedure
pval1 = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
if(shapiro.test(x)$p.value < alpha){
pval1[i] = t.test(x)$p.value
}else{
pval1[i] = wilcox.test(x)$p.value
}
}
error1 = mean(pval1 < alpha)
error1
# Conditional Type I error rate
nsim = 0
samplepast = 0
pval2 = NULL
while(samplepast < N){
x = rexp(n, rate = 3) - 1/3
nsim = nsim + 1
if(shapiro.test(x)$p.value > alpha){
pval2[samplepast] = t.test(x)$p.value
samplepast = samplepast + 1
}
}
error2 = mean(pval2 < alpha)
error2
N = 1e3
n = 10
alpha = 0.05
pval = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
pval[i] = t.test(x)$p.value
}
error = mean(pval < alpha)
error
# Two-stage procedure
pval1 = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
if(shapiro.test(x)$p.value < alpha){
pval1[i] = t.test(x)$p.value
}else{
pval1[i] = wilcox.test(x)$p.value
}
}
error1 = mean(pval1 < alpha)
error1
# Conditional Type I error rate
nsim = 0
samplepast = 0
pval2 = NULL
while(samplepast < N){
x = rexp(n, rate = 3) - 1/3
nsim = nsim + 1
if(shapiro.test(x)$p.value > alpha){
pval2[samplepast] = t.test(x)$p.value
samplepast = samplepast + 1
}
}
error2 = mean(pval2 < alpha)
error2
N = 1e3
n = 10
alpha = 0.05
pval = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
pval[i] = t.test(x)$p.value
}
error = mean(pval < alpha)
error
# Two-stage procedure
pval1 = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
if(shapiro.test(x)$p.value < alpha){
pval1[i] = t.test(x)$p.value
}else{
pval1[i] = wilcox.test(x)$p.value
}
}
error1 = mean(pval1 < alpha)
error1
# Conditional Type I error rate
nsim = 0
samplepast = 0
pval2 = NULL
while(samplepast < N){
x = rexp(n, rate = 3) - 1/3
nsim = nsim + 1
if(shapiro.test(x)$p.value > alpha){
pval2[samplepast] = t.test(x)$p.value
samplepast = samplepast + 1
}
}
error2 = mean(pval2 < alpha)
error2
N = 1e3
n = 10
alpha = 0.05
pval = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
pval[i] = t.test(x)$p.value
}
error = mean(pval < alpha)
error
# Two-stage procedure
pval1 = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
if(shapiro.test(x)$p.value < alpha){
pval1[i] = t.test(x)$p.value
}else{
pval1[i] = wilcox.test(x)$p.value
}
}
error1 = mean(pval1 < alpha)
error1
# Conditional Type I error rate
nsim = 0
samplepast = 0
pval2 = NULL
while(samplepast < N){
x = rexp(n, rate = 3) - 1/3
nsim = nsim + 1
if(shapiro.test(x)$p.value > alpha){
pval2[samplepast] = t.test(x)$p.value
samplepast = samplepast + 1
}
}
error2 = mean(pval2 < alpha)
error2
N = 1e3
n = 10
alpha = 0.05
pval = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
pval[i] = t.test(x)$p.value
}
error = mean(pval < alpha)
error
# Two-stage procedure
pval1 = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
if(shapiro.test(x)$p.value < alpha){
pval1[i] = t.test(x)$p.value
}else{
pval1[i] = wilcox.test(x)$p.value
}
}
error1 = mean(pval1 < alpha)
error1
# Conditional Type I error rate
nsim = 0
samplepast = 0
pval2 = NULL
while(samplepast < N){
x = rexp(n, rate = 3) - 1/3
nsim = nsim + 1
if(shapiro.test(x)$p.value > alpha){
pval2[samplepast] = t.test(x)$p.value
samplepast = samplepast + 1
}
}
error2 = mean(pval2 < alpha)
error2
N = 1e3
n = 10
alpha = 0.05
pval = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
pval[i] = t.test(x)$p.value
}
error = mean(pval < alpha)
error
# Two-stage procedure
pval1 = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
if(shapiro.test(x)$p.value < alpha){
pval1[i] = t.test(x)$p.value
}else{
pval1[i] = wilcox.test(x)$p.value
}
}
error1 = mean(pval1 < alpha)
error1
# Conditional Type I error rate
nsim = 0
samplepast = 0
pval2 = NULL
while(samplepast < N){
x = rexp(n, rate = 3) - 1/3
nsim = nsim + 1
if(shapiro.test(x)$p.value > alpha){
pval2[samplepast] = t.test(x)$p.value
samplepast = samplepast + 1
}
}
error2 = mean(pval2 < alpha)
error2
N = 1e3
n = 10
alpha = 0.05
pval = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
pval[i] = t.test(x)$p.value
}
error = mean(pval < alpha)
error
# Two-stage procedure
pval1 = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
if(shapiro.test(x)$p.value < alpha){
pval1[i] = t.test(x)$p.value
}else{
pval1[i] = wilcox.test(x)$p.value
}
}
error1 = mean(pval1 < alpha)
error1
# Conditional Type I error rate
nsim = 0
samplepast = 0
pval2 = NULL
while(samplepast < N){
x = rexp(n, rate = 3) - 1/3
nsim = nsim + 1
if(shapiro.test(x)$p.value > alpha){
pval2[samplepast] = t.test(x)$p.value
samplepast = samplepast + 1
}
}
error2 = mean(pval2 < alpha)
error2
N = 1e3
n = 10
alpha = 0.05
pval = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
pval[i] = t.test(x)$p.value
}
error = mean(pval < alpha)
error
# Two-stage procedure
pval1 = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
if(shapiro.test(x)$p.value < alpha){
pval1[i] = t.test(x)$p.value
}else{
pval1[i] = wilcox.test(x)$p.value
}
}
error1 = mean(pval1 < alpha)
error1
# Conditional Type I error rate
nsim = 0
samplepast = 0
pval2 = NULL
while(samplepast < N){
x = rexp(n, rate = 3) - 1/3
nsim = nsim + 1
if(shapiro.test(x)$p.value > alpha){
pval2[samplepast] = t.test(x)$p.value
samplepast = samplepast + 1
}
}
error2 = mean(pval2 < alpha)
error2
N = 1e3
n = 10
alpha = 0.05
pval = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
pval[i] = t.test(x)$p.value
}
error = mean(pval < alpha)
error
# Two-stage procedure
pval1 = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
if(shapiro.test(x)$p.value < alpha){
pval1[i] = t.test(x)$p.value
}else{
pval1[i] = wilcox.test(x)$p.value
}
}
error1 = mean(pval1 < alpha)
error1
# Conditional Type I error rate
nsim = 0
samplepast = 0
pval2 = NULL
while(samplepast < N){
x = rexp(n, rate = 3) - 1/3
nsim = nsim + 1
if(shapiro.test(x)$p.value > alpha){
pval2[samplepast] = t.test(x)$p.value
samplepast = samplepast + 1
}
}
error2 = mean(pval2 < alpha)
error2
samplepast
nsim
N = 1e4
n = 100
alpha = 0.05
# t test
pval = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
pval[i] = t.test(x)$p.value
}
error = mean(pval < alpha)
error
# Two-stage procedure
pval1 = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
if(shapiro.test(x)$p.value < alpha){
pval1[i] = t.test(x)$p.value
}else{
pval1[i] = wilcox.test(x)$p.value
}
}
error1 = mean(pval1 < alpha)
error1
# Conditional Type I error rate
nsim = 0
samplepast = 0
pval2 = NULL
while(samplepast < N){
x = rexp(n, rate = 3) - 1/3
nsim = nsim + 1
if(shapiro.test(x)$p.value > alpha){
pval2[samplepast] = t.test(x)$p.value
samplepast = samplepast + 1
}
}
N = 1e4
n = 10
alpha = 0.05
# t test
pval = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
pval[i] = t.test(x)$p.value
}
error = mean(pval < alpha)
error
# Two-stage procedure
pval1 = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
if(shapiro.test(x)$p.value < alpha){
pval1[i] = t.test(x)$p.value
}else{
pval1[i] = wilcox.test(x)$p.value
}
}
error1 = mean(pval1 < alpha)
error1
# Conditional Type I error rate
nsim = 0
samplepast = 0
pval2 = NULL
while(samplepast < N){
x = rexp(n, rate = 3) - 1/3
nsim = nsim + 1
if(shapiro.test(x)$p.value > alpha){
pval2[samplepast] = t.test(x)$p.value
samplepast = samplepast + 1
}
}
error2 = mean(pval2 < alpha)
error2
samplepast
nsim
pval1
pval2
pval
N = 1e4
n = 10
alpha = 0.05
# t test
pval = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
pval[i] = t.test(x)$p.value
}
error = mean(pval < alpha)
error
# Two-stage procedure
pval1 = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
if(shapiro.test(x)$p.value < alpha){
pval1[i] = t.test(x)$p.value
}else{
pval1[i] = wilcox.test(x)$p.value
}
}
error1 = mean(pval1 < alpha)
error1
# Conditional Type I error rate
nsim = 0
samplepast = 0
pval2 = NULL
while(samplepast < N){
x = rexp(n, rate = 3) - 1/3
nsim = nsim + 1
if(shapiro.test(x)$p.value > alpha){
pval2[samplepast] = t.test(x)$p.value
samplepast = samplepast + 1
}
}
error2 = mean(pval2 < alpha)
error2
N = 1e4
n = 10
alpha = 0.05
# t test
pval = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
pval[i] = t.test(x)$p.value
}
error = mean(pval < alpha)
error
# Two-stage procedure
pval1 = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
if(shapiro.test(x)$p.value < alpha){
pval1[i] = t.test(x)$p.value
}else{
pval1[i] = wilcox.test(x)$p.value
}
}
error1 = mean(pval1 < alpha)
error1
# Conditional Type I error rate
nsim = 0
samplepast = 0
pval2 = NULL
while(samplepast < N){
x = rexp(n, rate = 3) - 1/3
nsim = nsim + 1
if(shapiro.test(x)$p.value > alpha){
pval2[samplepast] = t.test(x)$p.value
samplepast = samplepast + 1
}
}
error2 = mean(pval2 < alpha)
error2
N = 1e4
n = 10
alpha = 0.05
# t test
pval = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
pval[i] = t.test(x)$p.value
}
error = mean(pval < alpha)
error
# Two-stage procedure
pval1 = numeric(N)
for(i in 1 : N){
x = rexp(n, rate = 3) - 1/3
if(shapiro.test(x)$p.value < alpha){
pval1[i] = t.test(x)$p.value
}else{
pval1[i] = wilcox.test(x)$p.value
}
}
error1 = mean(pval1 < alpha)
error1
# Conditional Type I error rate
nsim = 0
samplepast = 0
pval2 = NULL
while(samplepast < N){
x = rexp(n, rate = 3) - 1/3
nsim = nsim + 1
if(shapiro.test(x)$p.value > alpha){
pval2[samplepast] = t.test(x)$p.value
samplepast = samplepast + 1
}
}
error2 = mean(pval2 < alpha)
error2
