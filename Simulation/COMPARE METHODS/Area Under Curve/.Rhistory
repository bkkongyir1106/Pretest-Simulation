progress <- 0
for (dist in distributions) {
error_t_list <- error_wilcox_list <- error_t_wilcox_list <- error_perm_list <- power_shapiro_list<-  numeric(length(sample_sizes))
avg_time_t_list <-avg_time_wilcox_list <- avg_time_t_wilcox_list <-avg_time_perm_list <-numeric(length(sample_sizes))
for (s in 1:length(sample_sizes)) {
n <- sample_sizes[s]
# Initialize empty vectors to store values
pval_t <- pval_wilcox <- pvals <- pval_perm<- Shapiro_pval <- numeric(N)
time_t <- time_wilcox <- time_t_wilcox <- time_perm <- numeric(N)
for (i in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
# perform t test
time_t[i] <- system.time(
{
pval_t[i] <- t.test(x, y)$p.value
})["elapsed"]
# Wilcoxon test
time_wilcox[i] <- system.time(
{
pval_wilcox[i] <- wilcox.test(x, y)$p.value
})["elapsed"]
# MPerform t-test/Wilcoxon
time_t_wilcox[i] <- system.time({
if (shapiro.test(x)$p.value > alpha & shapiro.test(y)$p.value > alpha) {
pvals[i] <- t.test(x, y )$p.value
Shapiro_pval[i] <- 1
} else {
pvals[i] <- wilcox.test(x, y)$p.value
}
})["elapsed"]
data <- c(x, y)
observe_stat <- calculate_test_statistic(x, y)
# Perform permutation test
time_perm[i] <- system.time({
permuted_stat <- numeric(B)
for (j in 1:B) {
sample_data <- sample(data)
sample_x <- sample_data[1:length(x)]
sample_y <- sample_data[(length(x) + 1):(length(x) + length(y))]
permuted_stat[j] <- calculate_test_statistic(sample_x, sample_y)
}
pval_perm[i] <- mean(abs(permuted_stat) >= abs(observe_stat))
})["elapsed"]
}
# Update progress bar
progress <- progress + 1
setTxtProgressBar(pb, progress)
# Calculate Type I error rates
error_t_list[s] <- mean(pval_t < alpha)
error_wilcox_list[s] <- mean(pval_wilcox < alpha)
error_t_wilcox_list[s] <- mean(pvals < alpha)
error_perm_list[s] <- mean(pval_perm < alpha)
# Calculate average computation times
avg_time_t_list[s] <- mean(time_t)
avg_time_wilcox_list[s] <- mean(time_wilcox)
avg_time_t_wilcox_list[s] <- mean(time_t_wilcox)
avg_time_perm_list[s] <- mean(time_perm)
}
# Store results in tables
error_t_table[, dist] <- error_t_list
error_wilcox_table[, dist] <- error_wilcox_list
error_t_wilcox_table[, dist] <- error_t_wilcox_list
error_perm_table[, dist] <- error_perm_list
time_t_table[, dist] <- avg_time_t_list
time_wilcox_table[, dist] <- avg_time_wilcox_list
time_t_wilcox_table[, dist] <- avg_time_t_wilcox_list
time_perm_table[, dist] <- avg_time_perm_list
}
error_t_list
error_wilcox_list
error_t_table
time_perm_table
error_wilcox_table
error_t_wilcox_table
error_perm_table
time_t_table
error_t_table
error_wilcox_table
error_t_wilcox_table
error_perm_table
error_t_list
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/COMBINE RESULTS_20240719/COMPARE METHODS/Area Under Curve")
#  set directories in local computer
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# # To run on cluster
# setwd("/home/kongyir/spring2024/error")
# source("/home/kongyir/spring2024/User_defined_functions.R")
# source("/home/kongyir/spring2024/utility.R")
# Simulation settings
set.seed(12345)
N <- 1e3
sample_sizes <- c(5, 10, 15, 20, 25, 30, 50)
B <- 1e4  # Number of permutations
alpha <- 0.05  # Significance level
distributions <- c("Standard Normal", "Exponential", "Chi-Square", "LogNormal")
# Function to calculate the test statistic (difference of means)
calculate_test_statistic <- function(x, y) {
return((mean(x) - mean(y))/sqrt(var(x)/length(x) + var(y)/length(y)))
}
# Function to compute the area under the curve using the trapezoidal rule
compute_area <- function(x, y) {
(sum(diff(x) * (head(y, -1) + tail(y, -1)) / 2))/(max(sample_sizes) - min(sample_sizes))
}
# Define table to store results
errorvec <- numeric(length(sample_sizes) * length(distributions))
error_t_table <- error_wilcox_table <- error_t_wilcox_table <- error_perm_table <-time_t_table <- time_wilcox_table <- time_t_wilcox_table <-
time_perm_table <- array(errorvec, dim = c(length(sample_sizes), length(distributions)), dimnames = list(sample_sizes, distributions))
# set up progress bar
total_steps <- length(distributions) * length(sample_sizes) * N
pb <- txtProgressBar(min = 0, max = total_steps, style = 3)
progress <- 0
for (dist in distributions) {
error_t_list <- error_wilcox_list <- error_t_wilcox_list <- error_perm_list <- power_shapiro_list<-  numeric(length(sample_sizes))
avg_time_t_list <-avg_time_wilcox_list <- avg_time_t_wilcox_list <-avg_time_perm_list <-numeric(length(sample_sizes))
for (s in 1:length(sample_sizes)) {
n <- sample_sizes[s]
# Initialize empty vectors to store values
pval_t <- pval_wilcox <- pvals <- pval_perm<- Shapiro_pval <- numeric(N)
time_t <- time_wilcox <- time_t_wilcox <- time_perm <- numeric(N)
for (i in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
# perform t test
time_t[i] <- system.time(
{
pval_t[i] <- t.test(x, y)$p.value
})["elapsed"]
# Wilcoxon test
time_wilcox[i] <- system.time(
{
pval_wilcox[i] <- wilcox.test(x, y)$p.value
})["elapsed"]
# MPerform t-test/Wilcoxon
time_t_wilcox[i] <- system.time({
if (shapiro.test(x)$p.value > alpha & shapiro.test(y)$p.value > alpha) {
pvals[i] <- t.test(x, y )$p.value
Shapiro_pval[i] <- 1
} else {
pvals[i] <- wilcox.test(x, y)$p.value
}
})["elapsed"]
data <- c(x, y)
observe_stat <- calculate_test_statistic(x, y)
# Perform permutation test
time_perm[i] <- system.time({
permuted_stat <- numeric(B)
for (j in 1:B) {
sample_data <- sample(data)
sample_x <- sample_data[1:length(x)]
sample_y <- sample_data[(length(x) + 1):(length(x) + length(y))]
permuted_stat[j] <- calculate_test_statistic(sample_x, sample_y)
}
pval_perm[i] <- mean(abs(permuted_stat) >= abs(observe_stat))
})["elapsed"]
}
# Update progress bar
progress <- progress + 1
setTxtProgressBar(pb, progress)
# Calculate Type I error rates
error_t_list[s] <- mean(pval_t < alpha)
error_wilcox_list[s] <- mean(pval_wilcox < alpha)
error_t_wilcox_list[s] <- mean(pvals < alpha)
error_perm_list[s] <- mean(pval_perm < alpha)
# Calculate average computation times
avg_time_t_list[s] <- mean(time_t)
avg_time_wilcox_list[s] <- mean(time_wilcox)
avg_time_t_wilcox_list[s] <- mean(time_t_wilcox)
avg_time_perm_list[s] <- mean(time_perm)
}
# Store results in tables
error_t_table[, dist] <- error_t_list
error_wilcox_table[, dist] <- error_wilcox_list
error_t_wilcox_table[, dist] <- error_t_wilcox_list
error_perm_table[, dist] <- error_perm_list
time_t_table[, dist] <- avg_time_t_list
time_wilcox_table[, dist] <- avg_time_wilcox_list
time_t_wilcox_table[, dist] <- avg_time_t_wilcox_list
time_perm_table[, dist] <- avg_time_perm_list
}
# Close the progress bar
close(pb)
# # Function to compute the area under the curve using the trapezoidal rule, considering y = 0.05
# compute_area <- function(x, y) {
#   adjusted_y <- y - 0.05
#   sum(diff(x) * (head(adjusted_y, -1) + tail(adjusted_y, -1)) / 2) / max(sample_sizes)
# }
# Calculate areas under the Type I error rate curves
area_t <- apply(error_t_table, 2, compute_area, x = sample_sizes)
area_wilcox <- apply(error_wilcox_table, 2, compute_area, x = sample_sizes)
area_t_wilcox <- apply(error_t_wilcox_table, 2, compute_area, x = sample_sizes)
area_perm <- apply(error_perm_table, 2, compute_area, x = sample_sizes)
# Save results
save.image(paste0(file = "TwoSampleAreaUnderCurve_error_image", ".RData"))
save(sample_sizes, error_t_wilcox_table, error_perm_table, error_t_table, error_wilcox_table,
time_t_table, time_wilcox_table, time_t_wilcox_table, time_perm_table, area_t, area_wilcox, area_t_wilcox,area_perm,
file = "TwoSampleAreaUnderCurve_error.RData")
# Print results
cat("Power for t test:\n")
print(error_t_table)
cat("\nPower for Wilcoxon test:\n")
print(error_wilcox_table)
cat("Power for t-test/Wilcoxon test:\n")
print(error_t_wilcox_table)
cat("\nPower for permutation test:\n")
print(error_perm_table)
# Print the computataion time
cat("\nComputation time for t test:\n")
print(time_t_table)
cat("\nComputation time for Wilcoxon test:\n")
print(time_wilcox_table)
cat("\nComputation time for t-test/Wilcoxon test:\n")
print(time_t_wilcox_table)
cat("\nComputation time for permutation test:\n")
print(time_perm_table)
# Print areas under the Type I error rate curves
cat("\nArea under the power curve for t-test:\n")
print(area_t)
cat("\nArea under the power curve for Wilcoxon test:\n")
print(area_wilcox)
cat("\nArea under the power curve for t-test/Wilcoxon test:\n")
print(area_t_wilcox)
cat("\nArea under the power curve for permutation test:\n")
print(area_perm)
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/COMBINE RESULTS_20240719/COMPARE METHODS/Area Under Curve")
# set directories in local computer
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# To run on cluster
# setwd("/home/kongyir/spring2024/error")
# source("/home/kongyir/spring2024/User_defined_functions.R")
# source("/home/kongyir/spring2024/utility.R")
# Simulation settings
set.seed(12345)
N <- 1e3
sample_sizes <- c(5, 10, 15, 20, 25, 30, 50)
B <- 1e4  # Number of permutations
alpha <- 0.05  # Significance level
distributions <- c("Standard Normal", "Exponential", "Chi-Square", "LogNormal")
# Function to calculate test statistic
calculate_test_statistic <- function(x) {
return((mean(x) * sqrt(length(x))) / sqrt(var(x)))
}
# Function to compute the area under the curve using the trapezoidal rule
compute_area <- function(x, y) {
(sum(diff(x) * (head(y, -1) + tail(y, -1)) / 2))/(max(sample_sizes) - min(sample_sizes))
}
# Define table to store results
errorvec <- numeric(length(sample_sizes) * length(distributions))
error_t_table <- error_wilcox_table <- error_t_wilcox_table <- error_perm_table <-time_t_table <- time_wilcox_table <- time_t_wilcox_table <-
time_perm_table <- array(errorvec, dim = c(length(sample_sizes), length(distributions)), dimnames = list(sample_sizes, distributions))
# set up progress bar
total_steps <- length(distributions) * length(sample_sizes) * N
pb <- txtProgressBar(min = 0, max = total_steps, style = 3)
progress <- 0
# Simulation loop
for (dist in distributions) {
error_t_list <- error_wilcox_list <- error_t_wilcox_list <- error_perm_list <- numeric(length(sample_sizes))
avg_time_t_list <- avg_time_wilcox_list <- avg_time_t_wilcox_list <- avg_time_perm_list <- numeric(length(sample_sizes))
for (s in 1:length(sample_sizes)) {
n <- sample_sizes[s]
# Initialize empty vectors to store p-values and computation times
pval_t <- pval_wilcox <- pvals <- pval_perm <- numeric(N)
time_t <- time_wilcox <- time_t_wilcox <- time_perm <- numeric(N)
for (i in 1:N) {
x <- generate_data(n, dist)
# Perform t-test
time_t[i] <- system.time({
pval_t[i] <- t.test(x)$p.value
})["elapsed"]
# Perform Wilcoxon test
time_wilcox[i] <- system.time({
pval_wilcox[i] <- wilcox.test(x)$p.value
})["elapsed"]
# Perform t-test/Wilcoxon test based on Shapiro-Wilk normality test
time_t_wilcox[i] <- system.time({
if (shapiro.test(x)$p.value > alpha) {
pvals[i] <- t.test(x)$p.value
} else {
pvals[i] <- wilcox.test(x)$p.value
}
})["elapsed"]
# Perform permutation test
observe_stat <- calculate_test_statistic(x)
time_perm[i] <- system.time({
permuted_stat <- numeric(B)
for (j in 1:B) {
index <- sample(c(-1, 1), length(x), replace = TRUE)
sample_data <- index * abs(x)
permuted_stat[j] <- calculate_test_statistic(sample_data)
}
pval_perm[i] <- mean(abs(permuted_stat) >= abs(observe_stat))
})["elapsed"]
}
# Update progress bar
progress <- progress + 1
setTxtProgressBar(pb, progress)
# Calculate Type I error rates
error_t_list[s] <- mean(pval_t < alpha)
error_wilcox_list[s] <- mean(pval_wilcox < alpha)
error_t_wilcox_list[s] <- mean(pvals < alpha)
error_perm_list[s] <- mean(pval_perm < alpha)
# Calculate average computation times
avg_time_t_list[s] <- mean(time_t)
avg_time_wilcox_list[s] <- mean(time_wilcox)
avg_time_t_wilcox_list[s] <- mean(time_t_wilcox)
avg_time_perm_list[s] <- mean(time_perm)
}
# Store results in tables
error_t_table[, dist] <- error_t_list
error_wilcox_table[, dist] <- error_wilcox_list
error_t_wilcox_table[, dist] <- error_t_wilcox_list
error_perm_table[, dist] <- error_perm_list
time_t_table[, dist] <- avg_time_t_list
time_wilcox_table[, dist] <- avg_time_wilcox_list
time_t_wilcox_table[, dist] <- avg_time_t_wilcox_list
time_perm_table[, dist] <- avg_time_perm_list
}
# Close the progress bar
close(pb)
# # Function to compute the area under the curve using the trapezoidal rule, considering y = 0.05
# compute_area <- function(x, y) {
#   adjusted_y <- y - 0.05
#   sum(diff(x) * (head(adjusted_y, -1) + tail(adjusted_y, -1)) / 2) / max(sample_sizes)
# }
# Calculate areas under the Type I error rate curves
area_t <- apply(error_t_table, 2, compute_area, x = sample_sizes)
area_wilcox <- apply(error_wilcox_table, 2, compute_area, x = sample_sizes)
area_t_wilcox <- apply(error_t_wilcox_table, 2, compute_area, x = sample_sizes)
area_perm <- apply(error_perm_table, 2, compute_area, x = sample_sizes)
# Save results
save.image(paste0(file = "OneSampleAreaUnderCurve_error_image", ".RData"))
save(sample_sizes, error_t_wilcox_table, error_perm_table, error_t_table, error_wilcox_table,
time_t_table, time_wilcox_table, time_t_wilcox_table, time_perm_table, area_t, area_wilcox, area_t_wilcox,area_perm,
file = "OneSampleAreaUnderCurve_error.RData")
# Print results
cat("Power for t test:\n")
print(error_t_table)
cat("\nPower for Wilcoxon test:\n")
print(error_wilcox_table)
cat("Power for t-test/Wilcoxon test:\n")
print(error_t_wilcox_table)
cat("\nPower for permutation test:\n")
print(error_perm_table)
# Print the computataion time
cat("\nComputation time for t test:\n")
print(time_t_table)
cat("\nComputation time for Wilcoxon test:\n")
print(time_wilcox_table)
cat("\nComputation time for t-test/Wilcoxon test:\n")
print(time_t_wilcox_table)
cat("\nComputation time for permutation test:\n")
print(time_perm_table)
# Print areas under the Type I error rate curves
cat("\nArea under the power curve for t-test:\n")
print(area_t)
cat("\nArea under the power curve for Wilcoxon test:\n")
print(area_wilcox)
cat("\nArea under the power curve for t-test/Wilcoxon test:\n")
print(area_t_wilcox)
cat("\nArea under the power curve for permutation test:\n")
print(area_perm)
x = rexp(1000)
x = rexp(1000)
wilcox.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
x = rexp(10)
wilcox.test(x)$p.value
t.test(x)$p.value
print(error_t_table)
cat("\nerror for Wilcoxon test:\n")
print(error_wilcox_table)
cat("error for t-test/Wilcoxon test:\n")
print(error_t_wilcox_table)
cat("\nerror for permutation test:\n")
print(error_perm_table)
