# Function to close the cluster
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
# Parameters
N <- 1e2          # Number of simulations
alpha <- 0.05     # Significance level
distribution <- c("Normal", "Exponential")
sample_sizes <- c(10, 15, 20, 25, 30, 50)
# Setup parallel backend and progress bar
my_cl <- par_set(cores_reserve = 2)
params <- expand.grid(n = sample_sizes, dist = distribution)
ntasks <- nrow(params)
pb <- txtProgressBar(max = ntasks, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
# Run simulation
system.time({
sim_out <- foreach(i = 1:nrow(params), .packages = c("LaplacesDemon", "VGAM"), .options.snow = opts) %dopar% {
n <- params$n[i]
dist <- params$dist[i]
set.seed(12345 + i)  # Ensure different seeds per job
Nsim <- 0
sw_not_rejected <- 0
while ( sw_not_rejected < N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
Nsim <- Nsim + 1
# Conditional adaptive test
if (shapiro.test(x)$p.value > alpha && shapiro.test(y)$p.value > alpha) {
sw_not_rejected <- sw_not_rejected + 1
pval[sw_not_rejected] <- t.test(x, y)$p.value
}
}
error = mean(pval < alpha)
}
close_cluster(my_cl)
})
# Clear environment
rm(list = ls())
# Set working directory and source custom functions
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/TYPE I ERROR")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# Set up parallel processing
par_set <- function(cores_reserve = 2) {
cores <- parallel::detectCores()
cores_use <- max(1, cores - cores_reserve)
if (Sys.info()["sysname"] == "Windows") {
cl <- parallel::makeCluster(cores_use)
doParallel::registerDoParallel(cl)
} else {
cl <- snow::makeSOCKcluster(cores_use)
doSNOW::registerDoSNOW(cl)
}
foreach::getDoParWorkers()
return(cl)
}
# Function to close the cluster
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
# Parameters
N <- 1e1          # Number of simulations
alpha <- 0.05     # Significance level
distribution <- c("Normal", "Exponential")
sample_sizes <- c(10, 15, 20, 25, 30, 50)
# Setup parallel backend and progress bar
my_cl <- par_set(cores_reserve = 2)
params <- expand.grid(n = sample_sizes, dist = distribution)
ntasks <- nrow(params)
pb <- txtProgressBar(max = ntasks, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
# Run simulation
system.time({
sim_out <- foreach(i = 1:nrow(params), .packages = c("LaplacesDemon", "VGAM"), .options.snow = opts) %dopar% {
n <- params$n[i]
dist <- params$dist[i]
set.seed(12345 + i)  # Ensure different seeds per job
Nsim <- 0
sw_not_rejected <- 0
pval <- c()
while ( sw_not_rejected < N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
Nsim <- Nsim + 1
# Conditional adaptive test
if (shapiro.test(x)$p.value > alpha && shapiro.test(y)$p.value > alpha) {
sw_not_rejected <- sw_not_rejected + 1
pval[sw_not_rejected] <- t.test(x, y)$p.value
}
}
error = mean(pval < alpha)
}
close_cluster(my_cl)
})
# Clear environment
rm(list = ls())
# Set working directory and source custom functions
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/TYPE I ERROR")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# Set up parallel processing
par_set <- function(cores_reserve = 2) {
cores <- parallel::detectCores()
cores_use <- max(1, cores - cores_reserve)
if (Sys.info()["sysname"] == "Windows") {
cl <- parallel::makeCluster(cores_use)
doParallel::registerDoParallel(cl)
} else {
cl <- snow::makeSOCKcluster(cores_use)
doSNOW::registerDoSNOW(cl)
}
foreach::getDoParWorkers()
return(cl)
}
# Function to close the cluster
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
# Parameters
N <- 1e1          # Number of simulations
alpha <- 0.05     # Significance level
distribution <- c("Normal", "Exponential")
sample_sizes <- c(10, 15, 20, 25, 30, 50)
# Setup parallel backend and progress bar
my_cl <- par_set(cores_reserve = 2)
params <- expand.grid(n = sample_sizes, dist = distribution)
ntasks <- nrow(params)
pb <- txtProgressBar(max = ntasks, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
# Run simulation
system.time({
sim_out <- foreach(i = 1:nrow(params), .packages = c("LaplacesDemon", "VGAM"), .options.snow = opts) %dopar% {
n <- params$n[i]
dist <- params$dist[i]
set.seed(12345 + i)  # Ensure different seeds per job
Nsim <- 0
sw_not_rejected <- 0
pval <- numeric(N)
while ( sw_not_rejected < N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
Nsim <- Nsim + 1
# Conditional adaptive test
if (shapiro.test(x)$p.value > alpha && shapiro.test(y)$p.value > alpha) {
sw_not_rejected <- sw_not_rejected + 1
pval[sw_not_rejected] <- t.test(x, y)$p.value
}
}
list(error = mean(pval < alpha))
}
close_cluster(my_cl)
})
# Clear environment
rm(list = ls())
# Set working directory and source custom functions
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/TYPE I ERROR")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# Set up parallel processing
par_set <- function(cores_reserve = 2) {
cores <- parallel::detectCores()
cores_use <- max(1, cores - cores_reserve)
if (Sys.info()["sysname"] == "Windows") {
cl <- parallel::makeCluster(cores_use)
doParallel::registerDoParallel(cl)
} else {
cl <- snow::makeSOCKcluster(cores_use)
doSNOW::registerDoSNOW(cl)
}
foreach::getDoParWorkers()
return(cl)
}
# Function to close the cluster
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
# Parameters
N <- 1e1          # Number of simulations
alpha <- 0.05     # Significance level
distribution <- c("Normal", "Exponential")
sample_sizes <- c(10, 15, 20, 25, 30, 50)
# Setup parallel backend and progress bar
my_cl <- par_set(cores_reserve = 2)
params <- expand.grid(n = sample_sizes, dist = distribution)
ntasks <- nrow(params)
pb <- txtProgressBar(max = ntasks, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
# Run simulation
system.time({
sim_out <- foreach(i = 1:nrow(params), .packages = c("LaplacesDemon", "VGAM"), .options.snow = opts) %dopar% {
n <- params$n[i]
dist <- params$dist[i]
set.seed(12345 + i)  # Ensure different seeds per job
Nsim <- 0
sw_not_rejected <- 0
pval <- numeric(N)
while ( sw_not_rejected < N) {
x <- generate_data(n, dist)
Nsim <- Nsim + 1
# Conditional adaptive test
if (shapiro.test(x)$p.value > alpha) {
sw_not_rejected <- sw_not_rejected + 1
pval[sw_not_rejected] <- t.test(x)$p.value
}
}
list(error = mean(pval < alpha))
}
close_cluster(my_cl)
})
# Initialize storage arrays
TypeI.errorRate_t <- array(NA, dim = c(length(sample_sizes), length(distribution)), dimnames = list(sample_sizes, distribution))
# Populate results from simulation output
for (i in 1:nrow(params)) {
n <- as.character(params$n[i])
dist <- as.character(params$dist[i])
TypeI.errorRate_t[n, dist] <- sim_out[[i]]$error
}
# print
print(TypeI.errorRate_t)
# Save data
save.image(paste0("OneSampleconditionalTypeI_errorRate_04132025",".RData"))
# Clear environment
rm(list = ls())
# Set working directory and source custom functions
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/TYPE I ERROR")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# Set up parallel processing
par_set <- function(cores_reserve = 2) {
cores <- parallel::detectCores()
cores_use <- max(1, cores - cores_reserve)
if (Sys.info()["sysname"] == "Windows") {
cl <- parallel::makeCluster(cores_use)
doParallel::registerDoParallel(cl)
} else {
cl <- snow::makeSOCKcluster(cores_use)
doSNOW::registerDoSNOW(cl)
}
foreach::getDoParWorkers()
return(cl)
}
# Function to close the cluster
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
# Parameters
N <- 1e2          # Number of simulations
alpha <- 0.05     # Significance level
distribution <- c("Normal", "Exponential")
sample_sizes <- c(10, 15, 20, 25, 30, 50)
# Setup parallel backend and progress bar
my_cl <- par_set(cores_reserve = 2)
params <- expand.grid(n = sample_sizes, dist = distribution)
ntasks <- nrow(params)
pb <- txtProgressBar(max = ntasks, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
# Run simulation
system.time({
sim_out <- foreach(i = 1:nrow(params), .packages = c("LaplacesDemon", "VGAM"), .options.snow = opts) %dopar% {
n <- params$n[i]
dist <- params$dist[i]
set.seed(12345 + i)  # Ensure different seeds per job
Nsim <- 0
sw_not_rejected <- 0
pval <- numeric(N)
while ( sw_not_rejected < N) {
x <- generate_data(n, dist)
Nsim <- Nsim + 1
# Conditional adaptive test
if (shapiro.test(x)$p.value > alpha) {
sw_not_rejected <- sw_not_rejected + 1
pval[sw_not_rejected] <- t.test(x)$p.value
}
}
list(error = mean(pval < alpha))
}
close_cluster(my_cl)
})
# Initialize storage arrays
TypeI.errorRate_t <- array(NA, dim = c(length(sample_sizes), length(distribution)), dimnames = list(sample_sizes, distribution))
# Populate results from simulation output
for (i in 1:nrow(params)) {
n <- as.character(params$n[i])
dist <- as.character(params$dist[i])
TypeI.errorRate_t[n, dist] <- sim_out[[i]]$error
}
# print
print(TypeI.errorRate_t)
# Save data
save.image(paste0("OneSampleconditionalTypeI_errorRate_04132025",".RData"))
# Clear environment
rm(list = ls())
# Set working directory and source custom functions
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/TYPE I ERROR")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# Set up parallel processing
par_set <- function(cores_reserve = 2) {
cores <- parallel::detectCores()
cores_use <- max(1, cores - cores_reserve)
if (Sys.info()["sysname"] == "Windows") {
cl <- parallel::makeCluster(cores_use)
doParallel::registerDoParallel(cl)
} else {
cl <- snow::makeSOCKcluster(cores_use)
doSNOW::registerDoSNOW(cl)
}
foreach::getDoParWorkers()
return(cl)
}
# Function to close the cluster
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
# Parameters
N <- 1e3          # Number of simulations
alpha <- 0.05     # Significance level
distribution <- c("Normal", "Exponential")
sample_sizes <- c(10, 15, 20, 25, 30, 50)
# Setup parallel backend and progress bar
my_cl <- par_set(cores_reserve = 2)
params <- expand.grid(n = sample_sizes, dist = distribution)
ntasks <- nrow(params)
pb <- txtProgressBar(max = ntasks, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
# Run simulation
system.time({
sim_out <- foreach(i = 1:nrow(params), .packages = c("LaplacesDemon", "VGAM"), .options.snow = opts) %dopar% {
n <- params$n[i]
dist <- params$dist[i]
set.seed(12345 + i)  # Ensure different seeds per job
Nsim <- 0
sw_not_rejected <- 0
pval <- numeric(N)
while ( sw_not_rejected < N) {
x <- generate_data(n, dist)
Nsim <- Nsim + 1
# Conditional adaptive test
if (shapiro.test(x)$p.value > alpha) {
sw_not_rejected <- sw_not_rejected + 1
pval[sw_not_rejected] <- t.test(x)$p.value
}
}
list(error = mean(pval < alpha))
}
close_cluster(my_cl)
})
# Initialize storage arrays
TypeI.errorRate_t <- array(NA, dim = c(length(sample_sizes), length(distribution)), dimnames = list(sample_sizes, distribution))
# Populate results from simulation output
for (i in 1:nrow(params)) {
n <- as.character(params$n[i])
dist <- as.character(params$dist[i])
TypeI.errorRate_t[n, dist] <- sim_out[[i]]$error
}
# print
print(TypeI.errorRate_t)
# Save data
save.image(paste0("OneSampleconditionalTypeI_errorRate_04132025",".RData"))
# Clear environment
rm(list = ls())
# Set working directory and source custom functions
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/TYPE I ERROR")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# Set up parallel processing
par_set <- function(cores_reserve = 2) {
cores <- parallel::detectCores()
cores_use <- max(1, cores - cores_reserve)
if (Sys.info()["sysname"] == "Windows") {
cl <- parallel::makeCluster(cores_use)
doParallel::registerDoParallel(cl)
} else {
cl <- snow::makeSOCKcluster(cores_use)
doSNOW::registerDoSNOW(cl)
}
foreach::getDoParWorkers()
return(cl)
}
# Function to close the cluster
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
# Parameters
N <- 1e4          # Number of simulations
alpha <- 0.05     # Significance level
distribution <- c("Normal", "Exponential")
sample_sizes <- c(8, 10, 15, 20, 25, 30, 50)
# Setup parallel backend and progress bar
my_cl <- par_set(cores_reserve = 2)
params <- expand.grid(n = sample_sizes, dist = distribution)
ntasks <- nrow(params)
pb <- txtProgressBar(max = ntasks, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
# Run simulation
system.time({
sim_out <- foreach(i = 1:nrow(params), .packages = c("LaplacesDemon", "VGAM"), .options.snow = opts) %dopar% {
n <- params$n[i]
dist <- params$dist[i]
set.seed(12345 + i)  # Ensure different seeds per job
Nsim <- 0
sw_not_rejected <- 0
pval <- numeric(N)
while ( sw_not_rejected < N) {
x <- generate_data(n, dist)
Nsim <- Nsim + 1
# Conditional adaptive test
if (shapiro.test(x)$p.value > alpha) {
sw_not_rejected <- sw_not_rejected + 1
pval[sw_not_rejected] <- t.test(x)$p.value
}
}
list(error = mean(pval < alpha))
}
close_cluster(my_cl)
})
# Initialize storage arrays
TypeI.errorRate_t <- array(NA, dim = c(length(sample_sizes), length(distribution)), dimnames = list(sample_sizes, distribution))
# Populate results from simulation output
for (i in 1:nrow(params)) {
n <- as.character(params$n[i])
dist <- as.character(params$dist[i])
TypeI.errorRate_t[n, dist] <- sim_out[[i]]$error
}
# print
print(TypeI.errorRate_t)
# Save data
save.image(paste0("OneSampleconditionalTypeI_errorRate_04132025",".RData"))
# Initialize storage arrays
conditionalTypeI.errorRate <- array(NA, dim = c(length(sample_sizes), length(distribution)), dimnames = list(sample_sizes, distribution))
# Populate results from simulation output
for (i in 1:nrow(params)) {
n <- as.character(params$n[i])
dist <- as.character(params$dist[i])
conditionalTypeI.errorRate[n, dist] <- sim_out[[i]]$error
}
# print
print(conditionalTypeI.errorRate)
# Save data
save.image(paste0("OneSampleconditionalTypeI_errorRate_04132025",".RData"))
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/TYPE I ERROR")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/TYPE I ERROR/OneSampleconditionalTypeI_errorRate_04132025.RData")
conditional_error <- data.frame(conditionalTypeI.errorRate)
data.frame(conditionalTypeI.errorRate)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/TYPE I ERROR/OneSampleconditionalTypeI_errorRate_04132025.RData")
conditional_error <- data.frame(conditionalTypeI.errorRate)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/TYPE I ERROR/TwoSampleAUCTypeI_errorRate_04132025.RData")
error_ttest <-data.frame(TypeI.errorRate_t[-1, ])
# Power of Wilcoxon test:
error_wilcoxtest <-data.frame(TypeI.errorRate_wilcox[-1, ])
# Power of t_test/wilcoxon test:
error_t_wilcoxtest <-data.frame(TypeI.errorRate_t_wilcox[-1, ])
error_t_permtest <-data.frame(TypeI.errorRate_t_perm[-1, ])
# Power of the permutation test:
error_Permtest <-data.frame(TypeI.errorRate_perm[-1, ])
error_ttest$Exponential
conditional_error$Exponential
par(mfrow = c(1,2))
sample_sizes <- sample_sizes[-1]
plot(sample_sizes, conditional_error$Exponential, type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(0.02, 0.06), xlim = range(sample_sizes), xlab = "Sample Size", ylab = "Type I error")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/TYPE I ERROR/OneSampleconditionalTypeI_errorRate_04132025.RData")
conditional_error <- data.frame(conditionalTypeI.errorRate)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/TYPE I ERROR/TwoSampleAUCTypeI_errorRate_04132025.RData")
error_ttest <-data.frame(TypeI.errorRate_t[-1, ])
# Power of Wilcoxon test:
error_wilcoxtest <-data.frame(TypeI.errorRate_wilcox[-1, ])
# Power of t_test/wilcoxon test:
error_t_wilcoxtest <-data.frame(TypeI.errorRate_t_wilcox[-1, ])
error_t_permtest <-data.frame(TypeI.errorRate_t_perm[-1, ])
# Power of the permutation test:
error_Permtest <-data.frame(TypeI.errorRate_perm[-1, ])
par(mfrow = c(1,2))
plot(sample_sizes, conditional_error$Exponential, type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(0.02, 0.06), xlim = range(sample_sizes), xlab = "Sample Size", ylab = "Type I error")
lines(sample_sizes, error_ttest$Exponential, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
error_ttest$Exponential
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/TYPE I ERROR/OneSampleconditionalTypeI_errorRate_04132025.RData")
conditional_error <- data.frame(conditionalTypeI.errorRate)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/TYPE I ERROR/TwoSampleAUCTypeI_errorRate_04132025.RData")
error_ttest <-data.frame(TypeI.errorRate_t)
# Power of Wilcoxon test:
error_wilcoxtest <-data.frame(TypeI.errorRate_wilcox[-1, ])
# Power of t_test/wilcoxon test:
error_t_wilcoxtest <-data.frame(TypeI.errorRate_t_wilcox[-1, ])
error_t_permtest <-data.frame(TypeI.errorRate_t_perm[-1, ])
# Power of the permutation test:
error_Permtest <-data.frame(TypeI.errorRate_perm[-1, ])
par(mfrow = c(1,2))
plot(sample_sizes, conditional_error$Exponential, type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(0.02, 0.06), xlim = range(sample_sizes), xlab = "Sample Size", ylab = "Type I error")
lines(sample_sizes, error_ttest$Exponential, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
abline(h = 0.05)
title(main = "Conditional vs Unconditional Type I error")
legend("topright", legend=c("conditional","unconditional"), lwd = 3,
col=c("red", "blue"), lty = 1:2, pch =1:2, cex = 0.8, title = "Test Method")
par(mfrow = c(1,2))
plot(sample_sizes, conditional_error$Exponential, type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(0.02, 0.5), xlim = range(sample_sizes), xlab = "Sample Size", ylab = "Type I error")
lines(sample_sizes, error_ttest$Exponential, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
abline(h = 0.05)
title(main = "Conditional vs Unconditional Type I error")
legend("topright", legend=c("conditional","unconditional"), lwd = 3,
col=c("red", "blue"), lty = 1:2, pch =1:2, cex = 0.8, title = "Test Method")
