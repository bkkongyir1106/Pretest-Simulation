n <- 30
Nsim <- 1e2
distributions <- c("Normal", "LogNormal")
effect_size <- 0.5
results_all <- list()
for(dist in distributions){
cat("\nRunning for distribution:", dist, "\n")
results <- generate_pval(n = n, N = Nsim, dist = dist, effect_size = effect_size)
power_t <- mean(results$pval_t.test < 0.05)
power_u <- mean(results$pval_u.test < 0.05)
power_adaptive <- numeric(length(alpha_pretest))
for (j in seq_along(alpha_pretest)) {
alpha <- alpha_pretest[j]
pval_adaptive <- ifelse(
results$p_sw_x > alpha & results$p_sw_y > alpha,
results$pval_t.test,
results$pval_u.test
)
power_adaptive[j] <- mean(pval_adaptive < 0.05)
}
results_all[[dist]] <- list(
power_t_test = power_t,
power_u_test = power_u,
power_adaptive = power_adaptive
)
}
# Print summary results
print(results_all)
results
pval_adaptive
results$pval_t.test
pval_t.test
results$pval_t.test
results$pval_u.test
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
generate_pval <- function(n, N, dist, effect_size, alpha){
pval_t.test <- pval_u.test <- pval_perm.test <- numeric(N)
p_sw_x <- p_sw_y <- numeric(N)
#p_sw <- vector("list", N)
for(i in 1:N){
x <- generate_data(n, dist)
y <- generate_data(n, dist)
p_sw_x[i] = shapiro.test(x)$p.value
p_sw_y[i] = shapiro.test(y)$p.value
pval_t.test[i] <- t.test(x, y + effect_size)$p.value
pval_u.test[i] <- wilcox.test(x, y + effect_size)$p.value
}
# p_sw_x_vals <- sapply(p_sw, function(x) x$p_sw_x)
# p_sw_y_vals <- sapply(p_sw, function(x) x$p_sw_y)
#
pval_results <- list(
p_sw_x = p_sw_x,
p_sw_y = p_sw_y,
pval_t.test = pval_t.test,
pval_u.test = pval_u.test
)
return(pval_results)
}
alpha_pretest <- seq(from = 0.01, to = 0.1, by = 0.01)
n <- 30
Nsim <- 1e2
distributions <- c("Normal", "LogNormal")
effect_size <- 0.5
results_all <- list()
for(dist in distributions){
cat("\nRunning for distribution:", dist, "\n")
results <- generate_pval(n = n, N = Nsim, dist = dist, effect_size = effect_size)
power_t <- mean(results$pval_t.test < 0.05)
power_u <- mean(results$pval_u.test < 0.05)
power_adaptive <- numeric(length(alpha_pretest))
for (j in seq_along(alpha_pretest)) {
alpha <- alpha_pretest[j]
pval_adaptive <- ifelse(
results$p_sw_x > alpha & results$p_sw_y > alpha,
results$pval_t.test,
results$pval_u.test
)
power_adaptive[j] <- mean(pval_adaptive < 0.05)
}
results_all[[dist]] <- list(
power_t_test = power_t,
power_u_test = power_u,
power_adaptive = power_adaptive
)
}
# Print summary results
print(results_all)
results$pval_u.test
mean(results$pval_u.test < 0.05)
round(results$pval_u.test, 5)
power_adaptive
pval_adaptive
round(pval_adaptive, 4)
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
generate_pval <- function(n, N, dist, effect_size, alpha){
pval_t.test <- pval_u.test <- pval_perm.test <- numeric(N)
p_sw_x <- p_sw_y <- numeric(N)
#p_sw <- vector("list", N)
for(i in 1:N){
x <- generate_data(n, dist)
y <- generate_data(n, dist)
p_sw_x[i] = shapiro.test(x)$p.value
p_sw_y[i] = shapiro.test(y)$p.value
pval_t.test[i] <- t.test(x, y + effect_size)$p.value
pval_u.test[i] <- wilcox.test(x, y + effect_size)$p.value
}
# p_sw_x_vals <- sapply(p_sw, function(x) x$p_sw_x)
# p_sw_y_vals <- sapply(p_sw, function(x) x$p_sw_y)
#
pval_results <- list(
p_sw_x = p_sw_x,
p_sw_y = p_sw_y,
pval_t.test = pval_t.test,
pval_u.test = pval_u.test
)
return(pval_results)
}
alpha_pretest <- seq(from = 0.01, to = 0.1, by = 0.01)
n <- 30
Nsim <- 1e2
distributions <- c("Normal", "LogNormal")
effect_size <- 0.5
results_all <- list()
for(dist in distributions){
cat("\nRunning for distribution:", dist, "\n")
results <- generate_pval(n = n, N = Nsim, dist = dist, effect_size = effect_size)
power_t <- mean(results$pval_t.test < 0.05)
power_u <- mean(results$pval_u.test < 0.05)
power_adaptive <- numeric(length(alpha_pretest))
for (j in seq_along(alpha_pretest)) {
alpha <- alpha_pretest[j]
pval_adaptive <- ifelse(
results$p_sw_x > alpha & results$p_sw_y > alpha,
results$pval_t.test,
results$pval_u.test
)
power_adaptive[j] <- mean(pval_adaptive < 0.05)
}
results_all[[dist]] <- list(
power_t_test = power_t,
power_u_test = power_u,
power_adaptive = power_adaptive
)
}
# Print summary results
print(results_all)
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
generate_pval <- function(n, N, dist, effect_size, alpha){
pval_t.test <- pval_u.test <- pval_perm.test <- numeric(N)
p_sw_x <- p_sw_y <- numeric(N)
#p_sw <- vector("list", N)
for(i in 1:N){
x <- generate_data(n, dist)
y <- generate_data(n, dist)
p_sw_x[i] = shapiro.test(x)$p.value
p_sw_y[i] = shapiro.test(y)$p.value
pval_t.test[i] <- t.test(x, y + effect_size)$p.value
pval_u.test[i] <- wilcox.test(x, y + effect_size)$p.value
}
# p_sw_x_vals <- sapply(p_sw, function(x) x$p_sw_x)
# p_sw_y_vals <- sapply(p_sw, function(x) x$p_sw_y)
#
pval_results <- list(
p_sw_x = p_sw_x,
p_sw_y = p_sw_y,
pval_t.test = pval_t.test,
pval_u.test = pval_u.test
)
return(pval_results)
}
alpha_pretest <- seq(from = 0.01, to = 0.1, by = 0.01)
n <- 30
Nsim <- 1e4
distributions <- c("Normal", "LogNormal")
effect_size <- 0.5
results_all <- list()
for(dist in distributions){
cat("\nRunning for distribution:", dist, "\n")
results <- generate_pval(n = n, N = Nsim, dist = dist, effect_size = effect_size)
power_t <- mean(results$pval_t.test < 0.05)
power_u <- mean(results$pval_u.test < 0.05)
power_adaptive <- numeric(length(alpha_pretest))
for (j in seq_along(alpha_pretest)) {
alpha <- alpha_pretest[j]
pval_adaptive <- ifelse(
results$p_sw_x > alpha & results$p_sw_y > alpha,
results$pval_t.test,
results$pval_u.test
)
power_adaptive[j] <- mean(pval_adaptive < 0.05)
}
results_all[[dist]] <- list(
power_t_test = power_t,
power_u_test = power_u,
power_adaptive = power_adaptive
)
}
# Print summary results
print(results_all)
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
generate_pval <- function(n, N, dist, effect_size, alpha){
pval_t.test <- pval_u.test <- numeric(N)
p_sw_x <- p_sw_y <- numeric(N)
for(i in 1:N){
x <- generate_data(n, dist)
y <- generate_data(n, dist)
p_sw_x[i] <- shapiro.test(x)$p.value
p_sw_y[i] <- shapiro.test(y)$p.value
pval_t.test[i] <- t.test(x, y + effect_size)$p.value
pval_u.test[i] <- wilcox.test(x, y + effect_size)$p.value
}
list(
p_sw_x = p_sw_x,
p_sw_y = p_sw_y,
pval_t.test = pval_t.test,
pval_u.test = pval_u.test
)
}
# Parameters
alpha_pretest <- seq(0.01, 0.1, by = 0.01)
sample_sizes <- c(10, 20, 30, 40, 50)
Nsim <- 1e3
distributions <- c("Normal", "LogNormal")
effect_size <- 0.5
# Store results by distribution and sample size
results_all <- list()
for (dist in distributions) {
cat("\n==== Distribution:", dist, "====\n")
results_all[[dist]] <- list()
for (n in sample_sizes) {
cat("Sample size:", n, "\n")
results <- generate_pval(n = n, N = Nsim, dist = dist, effect_size = effect_size)
power_t <- mean(results$pval_t.test < 0.05)
power_u <- mean(results$pval_u.test < 0.05)
power_adaptive_vec <- numeric(length(alpha_pretest))
for (j in seq_along(alpha_pretest)) {
alpha <- alpha_pretest[j]
pval_adaptive <- ifelse(
results$p_sw_x > alpha & results$p_sw_y > alpha,
results$pval_t.test,
results$pval_u.test
)
power_adaptive_vec[j] <- mean(pval_adaptive < 0.05)
}
# Store average power over all alpha levels
results_all[[dist]][[as.character(n)]] <- list(
power_t_test = power_t,
power_u_test = power_u,
mean_power_adaptive = mean(power_adaptive_vec)
)
}
}
# Print summarized results
print(results_all)
# Create empty matrix to store mean adaptive power
power_matrix <- matrix(NA, nrow = length(sample_sizes), ncol = length(distributions),
dimnames = list(sample_sizes, distributions))
# Fill matrix from results_all
for (dist in distributions) {
for (n in sample_sizes) {
power_matrix[as.character(n), dist] <- results_all[[dist]][[as.character(n)]]$mean_power_adaptive
}
}
# Convert to dataframe
adaptive_power_df <- as.data.frame(power_matrix)
adaptive_power_df$SampleSize <- as.integer(rownames(adaptive_power_df))
rownames(adaptive_power_df) <- NULL
# Reorder columns to put SampleSize first
adaptive_power_df <- adaptive_power_df[, c("SampleSize", distributions)]
# View the result
print(adaptive_power_df)
# Initialize a list to hold one dataframe per distribution
test_power_dfs <- list()
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
generate_pval <- function(n, N, dist, effect_size, alpha){
pval_t.test <- pval_u.test <- numeric(N)
p_sw_x <- p_sw_y <- numeric(N)
for(i in 1:N){
x <- generate_data(n, dist)
y <- generate_data(n, dist)
p_sw_x[i] <- shapiro.test(x)$p.value
p_sw_y[i] <- shapiro.test(y)$p.value
pval_t.test[i] <- t.test(x, y + effect_size)$p.value
pval_u.test[i] <- wilcox.test(x, y + effect_size)$p.value
}
list(
p_sw_x = p_sw_x,
p_sw_y = p_sw_y,
pval_t.test = pval_t.test,
pval_u.test = pval_u.test
)
}
# Parameters
alpha_pretest <- seq(0.01, 0.1, by = 0.01)
sample_sizes <- c(10, 20, 30, 40, 50)
Nsim <- 1e3
distributions <- c("Normal", "LogNormal")
effect_size <- 0.5
# Store results by distribution and sample size
results_all <- list()
for (dist in distributions) {
cat("\n==== Distribution:", dist, "====\n")
results_all[[dist]] <- list()
for (n in sample_sizes) {
cat("Sample size:", n, "\n")
results <- generate_pval(n = n, N = Nsim, dist = dist, effect_size = effect_size)
power_t <- mean(results$pval_t.test < 0.05)
power_u <- mean(results$pval_u.test < 0.05)
power_adaptive_vec <- numeric(length(alpha_pretest))
for (j in seq_along(alpha_pretest)) {
alpha <- alpha_pretest[j]
pval_adaptive <- ifelse(
results$p_sw_x > alpha & results$p_sw_y > alpha,
results$pval_t.test,
results$pval_u.test
)
power_adaptive_vec[j] <- mean(pval_adaptive < 0.05)
}
# Store average power over all alpha levels
results_all[[dist]][[as.character(n)]] <- list(
power_t_test = power_t,
power_u_test = power_u,
mean_power_adaptive = mean(power_adaptive_vec)
)
}
}
# Initialize a list to hold one dataframe per distribution
test_power_dfs <- list()
for (dist in distributions) {
# Extract results for current distribution
dist_results <- results_all[[dist]]
# Initialize vectors to store power values by sample size
t_powers <- numeric(length(sample_sizes))
u_powers <- numeric(length(sample_sizes))
adaptive_powers <- numeric(length(sample_sizes))
for (i in seq_along(sample_sizes)) {
n <- as.character(sample_sizes[i])
t_powers[i] <- dist_results[[n]]$power_t_test
u_powers[i] <- dist_results[[n]]$power_u_test
adaptive_powers[i] <- dist_results[[n]]$mean_power_adaptive
}
# Create dataframe
df <- data.frame(
SampleSize = sample_sizes,
t_test = t_powers,
wilcox_test = u_powers,
adaptive_test = adaptive_powers
)
test_power_dfs[[dist]] <- df
}
# View result for Normal distribution
print(test_power_dfs$Normal)
# View result for LogNormal distribution
print(test_power_dfs$LogNormal)
library(ggplot2)
library(tidyr)
library(dplyr)
library(patchwork)  # for side-by-side plots
# Combine both distribution dataframes into long format
long_data <- bind_rows(
test_power_dfs$Normal %>%
pivot_longer(cols = -SampleSize, names_to = "TestType", values_to = "Power") %>%
mutate(Distribution = "Normal"),
test_power_dfs$LogNormal %>%
pivot_longer(cols = -SampleSize, names_to = "TestType", values_to = "Power") %>%
mutate(Distribution = "LogNormal")
)
# Plot for Normal distribution
plot_normal <- ggplot(filter(long_data, Distribution == "Normal"),
aes(x = SampleSize, y = Power, color = TestType)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
labs(title = "Normal Distribution", y = "Power", x = "Sample Size") +
theme_minimal() +
ylim(0, 1)
# Plot for LogNormal distribution
plot_lognormal <- ggplot(filter(long_data, Distribution == "LogNormal"),
aes(x = SampleSize, y = Power, color = TestType)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
labs(title = "LogNormal Distribution", y = "Power", x = "Sample Size") +
theme_minimal() +
ylim(0, 1)
# Combine side-by-side using patchwork
plot_normal + plot_lognormal
df_normal <- test_power_dfs$Normal      # Data frame with SampleSize, t_test, wilcox_test, adaptive_test
df_lognormal <- test_power_dfs$LogNormal
# Set up side-by-side plots
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))  # 1 row, 2 columns
# Colors and symbols for consistency
cols <- c("blue", "red", "darkgreen")
pchs <- c(16, 17, 15)
legend_labels <- c("t-test", "Wilcoxon", "Adaptive")
# --------- Plot 1: Normal Distribution ----------
plot(df_normal$SampleSize, df_normal$t_test, type = "b", pch = pchs[1], col = cols[1],
ylim = c(0, 1), xlab = "Sample Size", ylab = "Power", main = "Normal Distribution")
lines(df_normal$SampleSize, df_normal$wilcox_test, type = "b", pch = pchs[2], col = cols[2])
lines(df_normal$SampleSize, df_normal$adaptive_test, type = "b", pch = pchs[3], col = cols[3])
legend("bottomright", legend = legend_labels, col = cols, pch = pchs, bty = "n")
# --------- Plot 2: LogNormal Distribution ----------
plot(df_lognormal$SampleSize, df_lognormal$t_test, type = "b", pch = pchs[1], col = cols[1],
ylim = c(0, 1), xlab = "Sample Size", ylab = "Power", main = "LogNormal Distribution")
lines(df_lognormal$SampleSize, df_lognormal$wilcox_test, type = "b", pch = pchs[2], col = cols[2])
lines(df_lognormal$SampleSize, df_lognormal$adaptive_test, type = "b", pch = pchs[3], col = cols[3])
legend("bottomright", legend = legend_labels, col = cols, pch = pchs, bty = "n")
# ROC plot
plot(df_lognormal$adaptive_test, df_normal$adaptive_test, type = "l", col = "red")
# ROC plot
plot(df_normal$adaptive_test, df_lognormal$adaptive_test, type = "l", col = "red")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
generate_pval <- function(n, N, dist, effect_size, alpha){
pval_t.test <- pval_u.test <- numeric(N)
p_sw_x <- p_sw_y <- numeric(N)
for(i in 1:N){
x <- generate_data(n, dist)
y <- generate_data(n, dist)
p_sw_x[i] <- shapiro.test(x)$p.value
p_sw_y[i] <- shapiro.test(y)$p.value
pval_t.test[i] <- t.test(x, y + effect_size)$p.value
pval_u.test[i] <- wilcox.test(x, y + effect_size)$p.value
}
list(
p_sw_x = p_sw_x,
p_sw_y = p_sw_y,
pval_t.test = pval_t.test,
pval_u.test = pval_u.test
)
}
# Parameters
alpha_pretest <- seq(0.01, 0.1, by = 0.01)
sample_sizes <- c(5, 10, 15, 20, 25, 30, 35, 40,45, 50)
Nsim <- 1e4
distributions <- c("Normal", "LogNormal")
effect_size <- 0.5
# Store results by distribution and sample size
results_all <- list()
for (dist in distributions) {
cat("\n==== Distribution:", dist, "====\n")
results_all[[dist]] <- list()
for (n in sample_sizes) {
cat("Sample size:", n, "\n")
results <- generate_pval(n = n, N = Nsim, dist = dist, effect_size = effect_size)
power_t <- mean(results$pval_t.test < 0.05)
power_u <- mean(results$pval_u.test < 0.05)
power_adaptive_vec <- numeric(length(alpha_pretest))
for (j in seq_along(alpha_pretest)) {
alpha <- alpha_pretest[j]
pval_adaptive <- ifelse(
results$p_sw_x > alpha & results$p_sw_y > alpha,
results$pval_t.test,
results$pval_u.test
)
power_adaptive_vec[j] <- mean(pval_adaptive < 0.05)
}
# Store average power over all alpha levels
results_all[[dist]][[as.character(n)]] <- list(
power_t_test = power_t,
power_u_test = power_u,
mean_power_adaptive = mean(power_adaptive_vec)
)
}
}
# Initialize a list to hold one dataframe per distribution
test_power_dfs <- list()
for (dist in distributions) {
# Extract results for current distribution
dist_results <- results_all[[dist]]
# Initialize vectors to store power values by sample size
t_powers <- numeric(length(sample_sizes))
u_powers <- numeric(length(sample_sizes))
adaptive_powers <- numeric(length(sample_sizes))
for (i in seq_along(sample_sizes)) {
n <- as.character(sample_sizes[i])
t_powers[i] <- dist_results[[n]]$power_t_test
u_powers[i] <- dist_results[[n]]$power_u_test
adaptive_powers[i] <- dist_results[[n]]$mean_power_adaptive
}
# Create dataframe
df <- data.frame(
SampleSize = sample_sizes,
t_test = t_powers,
wilcox_test = u_powers,
adaptive_test = adaptive_powers
)
test_power_dfs[[dist]] <- df
}
# View result for Normal distribution
print(test_power_dfs$Normal)
# View result for LogNormal distribution
print(test_power_dfs$LogNormal)
df_normal <- test_power_dfs$Normal      # Data frame with SampleSize, t_test, wilcox_test, adaptive_test
df_lognormal <- test_power_dfs$LogNormal
# Set up side-by-side plots
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))  # 1 row, 2 columns
# Colors and symbols for consistency
cols <- c("blue", "red", "darkgreen")
pchs <- c(16, 17, 15)
legend_labels <- c("t-test", "Wilcoxon", "Adaptive")
# --------- Plot 1: Normal Distribution ----------
plot(df_normal$SampleSize, df_normal$t_test, type = "b", pch = pchs[1], col = cols[1],
ylim = c(0, 1), xlab = "Sample Size", ylab = "Power", main = "Normal Distribution")
lines(df_normal$SampleSize, df_normal$wilcox_test, type = "b", pch = pchs[2], col = cols[2])
lines(df_normal$SampleSize, df_normal$adaptive_test, type = "b", pch = pchs[3], col = cols[3])
legend("bottomright", legend = legend_labels, col = cols, pch = pchs, bty = "n")
# --------- Plot 2: LogNormal Distribution ----------
plot(df_lognormal$SampleSize, df_lognormal$t_test, type = "b", pch = pchs[1], col = cols[1],
ylim = c(0, 1), xlab = "Sample Size", ylab = "Power", main = "LogNormal Distribution")
lines(df_lognormal$SampleSize, df_lognormal$wilcox_test, type = "b", pch = pchs[2], col = cols[2])
lines(df_lognormal$SampleSize, df_lognormal$adaptive_test, type = "b", pch = pchs[3], col = cols[3])
legend("bottomright", legend = legend_labels, col = cols, pch = pchs, bty = "n")
# ROC plot
plot(df_normal$adaptive_test, df_lognormal$adaptive_test, type = "l", col = "red")
