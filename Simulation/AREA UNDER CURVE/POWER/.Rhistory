plot(nvec, power_t_test$Chi.Square,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3, ylim = c(0, 1),  xlab = "sample size", ylab = "Power of SW test")
lines(nvec, power_wilcox_test$Chi.Square, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(nvec, power_t_wilcox_test$Chi.Square, type = "o", lty = 3, pch = 3, col = "green", lwd = 3)
lines(nvec, power_perm_test$Chi.Square, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
title(main = "Chi-Squared Samples")
legend("bottomright", legend=c("t","Wilcoxon", "Wilcoxon/ttest", "Permutation"), lwd = 3,
col=c("red", "blue", "green",  "orange"), lty = 1:4, pch =1:4, cex = 0.8, title = "Test Method")
plot(nvec, power_t_test$LogNormal,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,ylim = c(0, 1),  xlab = "sample size", ylab = "Power of SW test")
lines(nvec, power_wilcox_test$LogNormal, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(nvec, power_t_wilcox_test$LogNormal, type = "o", lty = 3, pch = 3, col = "green", lwd = 3)
lines(nvec, power_perm_test$LogNormal, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
title(main = "LogNormal Samples")
legend("bottomright", legend=c("t","Wilcoxon", "Wilcoxon/ttest", "Permutation"), lwd = 3,
col=c("red", "blue", "green",  "orange"), lty = 1:4, pch =1:4, cex = 0.8, title = "Test Method")
plot(nvec, power_t_test$Standard.Normal,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,ylim = c(0, 1),  xlab = "sample size", ylab = "Power of SW test")
lines(nvec, power_wilcox_test$Standard.Normal, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(nvec, power_t_wilcox_test$Standard.Normal, type = "o", lty = 3, pch = 3, col = "green", lwd = 3)
lines(nvec, power_perm_test$Standard.Normal, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
title(main = "Standard.Normal Samples")
legend("bottomright", legend=c("t","Wilcoxon", "Wilcoxon/ttest", "Permutation"), lwd = 3,
col=c("red", "blue", "green",  "orange"), lty = 1:4, pch =1:4, cex = 0.8, title = "Test Method")
#par(mar = c(9, 4, 4, 1), xpd = TRUE)
par(mfrow = c(2,2))
# Adjust margins to reduce space between plots
par(mai = c(0.75, 0.75, 0.2, 0.2))  # Adjust as needed
plot(nvec, error_t_test$Exponential,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,  xlab = "Type I error", ylab = "Type I error Rate", ylim = c(0, 0.1))
lines(nvec, error_wilcox_test$Exponential, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(nvec, error_t_wilcox_test$Exponential, type = "o", lty = 3, pch = 3, col = "green", lwd = 3)
lines(nvec, error_perm_test$Exponential, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
title(main = "Exponential Samples")
legend("bottomright", legend=c("t","Wilcoxon", "Wilcoxon/ttest", "Permutation"), lwd = 3,
col=c("red", "blue", "green",  "orange"), lty = 1:4, pch =1:4, cex = 0.8, title = "Test Method")
plot(nvec, error_t_test$Chi.Square,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,  xlab = "Type I error", ylab = "Type I error Rate", ylim = c(0, 0.1))
lines(nvec, error_wilcox_test$Chi.Square, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(nvec, error_t_wilcox_test$Chi.Square, type = "o", lty = 3, pch = 3, col = "green", lwd = 3)
lines(nvec, error_perm_test$Chi.Square, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
title(main = "Chi-Squared Samples")
legend("bottomright", legend=c("t","Wilcoxon", "Wilcoxon/ttest", "Permutation"), lwd = 3,
col=c("red", "blue", "green",  "orange"), lty = 1:4, pch =1:4, cex = 0.8, title = "Test Method")
plot(nvec, error_t_test$LogNormal,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,  xlab = "Type I error", ylab = "Type I error Rate", ylim = c(0, 0.1))
lines(nvec, error_wilcox_test$LogNormal, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(nvec, error_t_wilcox_test$LogNormal, type = "o", lty = 3, pch = 3, col = "green", lwd = 3)
lines(nvec, error_perm_test$LogNormal, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
title(main = "LogNormal Samples")
legend("bottomright", legend=c("t","Wilcoxon", "Wilcoxon/ttest", "Permutation"), lwd = 3,
col=c("red", "blue", "green",  "orange"), lty = 1:4, pch =1:4, cex = 0.8, title = "Test Method")
plot(nvec, error_t_test$Standard.Normal,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,  xlab = "Type I error", ylab = "Type I error Rate", ylim = c(0, 0.1))
lines(nvec, error_wilcox_test$Standard.Normal, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(nvec, error_t_wilcox_test$Standard.Normal, type = "o", lty = 3, pch = 3, col = "green", lwd = 3)
lines(nvec, error_perm_test$Standard.Normal, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
title(main = "Standard.Normal Samples")
legend("bottomright", legend=c("t","Wilcoxon", "Wilcoxon/ttest", "Permutation"), lwd = 3,
col=c("red", "blue", "green",  "orange"), lty = 1:4, pch =1:4, cex = 0.8, title = "Test Method")
x = rnorm(100)
x
x = generate_data(10, "t")
x
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% UTILS %%%%%%%%%%%%%%%%%%%%%%%%%-----
# # Un-comment this before submitting code to cluster
# setwd("/home/kongyir")
# source("/home/kongyir/User_defined_functions.R")
# source("/home/kongyir/utility.R")
# clear working environment
rm(list = ls())
## Set directories in local computer
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# Set up cores for parallel processing
par_set <- function(cores_reserve = 2) {
cores = parallel::detectCores()
cores_use <- cores - cores_reserve
if (Sys.info()["sysname"] == "Windows") {
# Make a socket for both Windows & Unix-like
cl <- parallel::makeCluster(cores_use)
doParallel::registerDoParallel(cl)
} else {
# Make a socket cluster for Unix-like
cl <- snow::makeSOCKcluster(cores_use)
doSNOW::registerDoSNOW(cl)
}
foreach::getDoParWorkers()
return(cl)
}
# Function to close the cluster
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PERFORM SIMULATIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%----
## Set up the simulation parameters
{
N <- 1e4
B <- 1e4
alpha <- 0.05
dist_sum <- c("Standard Normal", "Exponential", "Chi-Square", "LogNormal")
nvec <- c(8, 10, 15, 20, 25, 30, 50)
d <- 0.75
}
# Function to calculate the test statistic (difference of means)
calculate_test_statistic <- function(x, y) {
return((mean(x) - mean(y))/sqrt(var(x)/length(x) + var(y)/length(y)))
}
# Function to compute the area under the curve using the trapezoidal rule
compute_area <- function(x, y) {
(sum(diff(x) * (head(y, -1) + tail(y, -1)) / 2))/(max(nvec) - min(nvec))
}
# Progress taskbar setup
{
my_cl <- par_set(cores_reserve = 2)
ntasks <- length(nvec) * length(dist_sum)
pb <- txtProgressBar(max=ntasks, style=3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress=progress)
}
## Perform simulation
system.time({
sim_out <- foreach(n = nvec,
.packages = c("LaplacesDemon", "VGAM"),
.options.snow = opts) %:%
foreach(dist = dist_sum) %dopar% {
set.seed(12345)  # Set seed for reproducibility
# Initialize vectors to store results
pval_t_power <- pval_wilcox_power <- pvals_power <- pval_perm_power <- numeric(N)
pval_t_error <- pval_wilcox_error <- pvals_error <- pval_perm_error <- numeric(N)
pval_sw <- time_t <- time_wilcox <- time_t_wilcox <- time_perm <- numeric(N)
for (i in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
# Perform SW test
pval_sw[i] <- shapiro.test(x)$p.value
# Perform t-test
time_t[i] <- system.time({
pval_t_error[i] <- t.test(x, y)$p.value
pval_t_power[i] <- t.test(x, y + d)$p.value
})["elapsed"]
# Perform Wilcoxon test
time_wilcox[i] <- system.time({
pval_wilcox_error[i] <- wilcox.test(x, y, mu = 0, alternative = "two.sided", paired = F)$p.value
pval_wilcox_power[i] <- wilcox.test(x, y + d, mu = 0, alternative = "two.sided", paired = F)$p.value
})["elapsed"]
# Perform t-test/Wilcoxon test based on Shapiro-Wilk normality test
time_t_wilcox[i] <- system.time({
if (shapiro.test(x)$p.value > alpha & shapiro.test(y)$p.value > alpha) {
pvals_error[i] <- t.test(x, y)$p.value
pvals_power[i] <- t.test(x,  y + d)$p.value
} else {
pvals_error[i] <- wilcox.test(x, y ,mu = 0, alternative = "two.sided", paired = F)$p.value
pvals_power[i] <- wilcox.test(x, y + d, mu = 0, alternative = "two.sided", paired = F)$p.value
}
})["elapsed"]
# Perform permutation test
time_perm[i] <- system.time({
observe_stat_error <- calculate_test_statistic(x, y)
observe_stat_power <- calculate_test_statistic(x, y + d)
permuted_stat_error <- permuted_stat_power <- numeric(B)
data_error <- c(x, y)
data_power <- c(x, y + d)
for (j in 1:B) {
sample_data_error <- sample(data_error)
sample_data_power <- sample(data_power)
# Calculate test statistics for permutation samples
permuted_stat_error[j] <- calculate_test_statistic(sample_data_error[1:length(x)],
sample_data_error[(length(x) + 1):length(data_error)])
permuted_stat_power[j] <- calculate_test_statistic(sample_data_power[1:length(x)],
sample_data_power[(length(x) + 1):length(data_power)])
}
# Calculate p-values
pval_perm_error[i] <- mean(abs(permuted_stat_error) >= abs(observe_stat_error))
pval_perm_power[i] <- mean(abs(permuted_stat_power) >= abs(observe_stat_power))
})["elapsed"]
}
# Compute metrics and average times
list(
powr_sw = mean(pval_sw < alpha),
t_error = mean(pval_t_error < alpha),
wilcox_error = mean(pval_wilcox_error < alpha),
t_wilcox_error = mean(pvals_error < alpha),
perm_error = mean(pval_perm_error < alpha),
powr_t = mean(pval_t_power < alpha),
powr_wilcox = mean(pval_wilcox_power < alpha),
powr_t_wilcox = mean(pvals_power < alpha),
powr_perm = mean(pval_perm_power < alpha),
time_t = mean(time_t),
time_wilcox = mean(time_wilcox),
time_t_wilcox = mean(time_t_wilcox),
time_perm = mean(time_perm)
)
}
})
# Number of bootstrap samples for the bootstrap test
B_boot <- 1000
# Function for calculating bootstrap confidence intervals
bootstrap_test <- function(x, y, alpha = 0.05, B_boot = 1000) {
observed_diff <- mean(x) - mean(y)
n <- length(x)
# Generate bootstrap samples
boot_diffs <- numeric(B_boot)
for (b in 1:B_boot) {
x_boot <- sample(x, n, replace = TRUE)
y_boot <- sample(y, n, replace = TRUE)
boot_diffs[b] <- mean(x_boot) - mean(y_boot)
}
# Calculate confidence interval
ci <- quantile(boot_diffs, probs = c(alpha / 2, 1 - alpha / 2))
# Determine if the true effect size is outside the CI
significant_under_null <- (0 < ci[1] || 0 > ci[2])
significant_under_alt <- (observed_diff < ci[1] || observed_diff > ci[2])
list(ci = ci, significant_null = significant_under_null, significant_alt = significant_under_alt)
}
# Add the Bootstrap Test to the System.time Loop
system.time({
sim_out <- foreach(n = nvec,
.packages = c("LaplacesDemon", "VGAM"),
.options.snow = opts) %:%
foreach(dist = dist_sum) %dopar% {
set.seed(12345)  # Set seed for reproducibility
# Initialize vectors to store results for the bootstrap method
ci_boot_error <- ci_boot_power <- numeric(N)
boot_error <- boot_power <- numeric(N)
time_boot <- numeric(N)
for (i in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
# Bootstrap Test
time_boot[i] <- system.time({
boot_result_null <- bootstrap_test(x, y, alpha, B_boot)
boot_result_alt <- bootstrap_test(x, y + d, alpha, B_boot)
ci_boot_error[i] <- boot_result_null$significant_null
ci_boot_power[i] <- boot_result_alt$significant_alt
})["elapsed"]
}
# Summarize and store results for Bootstrap test
list(
boot_error = mean(ci_boot_error),
boot_power = mean(ci_boot_power),
time_boot = mean(time_boot)
)
}
})
{
N <- 1e2
B <- 1e2
alpha <- 0.05
dist_sum <- c("Standard Normal", "Exponential", "Chi-Square", "LogNormal")
nvec <- c(8, 10, 15, 20, 25, 30, 50)
d <- 0.75
}
# Number of bootstrap samples for the bootstrap test
B_boot <- 100
# Function for calculating bootstrap confidence intervals
bootstrap_test <- function(x, y, alpha = 0.05, B_boot = 1000) {
observed_diff <- mean(x) - mean(y)
n <- length(x)
# Generate bootstrap samples
boot_diffs <- numeric(B_boot)
for (b in 1:B_boot) {
x_boot <- sample(x, n, replace = TRUE)
y_boot <- sample(y, n, replace = TRUE)
boot_diffs[b] <- mean(x_boot) - mean(y_boot)
}
# Calculate confidence interval
ci <- quantile(boot_diffs, probs = c(alpha / 2, 1 - alpha / 2))
# Determine if the true effect size is outside the CI
significant_under_null <- (0 < ci[1] || 0 > ci[2])
significant_under_alt <- (observed_diff < ci[1] || observed_diff > ci[2])
list(ci = ci, significant_null = significant_under_null, significant_alt = significant_under_alt)
}
# Add the Bootstrap Test to the System.time Loop
system.time({
sim_out <- foreach(n = nvec,
.packages = c("LaplacesDemon", "VGAM"),
.options.snow = opts) %:%
foreach(dist = dist_sum) %dopar% {
set.seed(12345)  # Set seed for reproducibility
# Initialize vectors to store results for the bootstrap method
ci_boot_error <- ci_boot_power <- numeric(N)
boot_error <- boot_power <- numeric(N)
time_boot <- numeric(N)
for (i in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
# Bootstrap Test
time_boot[i] <- system.time({
boot_result_null <- bootstrap_test(x, y, alpha, B_boot)
boot_result_alt <- bootstrap_test(x, y + d, alpha, B_boot)
ci_boot_error[i] <- boot_result_null$significant_null
ci_boot_power[i] <- boot_result_alt$significant_alt
})["elapsed"]
}
# Summarize and store results for Bootstrap test
list(
boot_error = mean(ci_boot_error),
boot_power = mean(ci_boot_power),
time_boot = mean(time_boot)
)
}
})
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% UTILS %%%%%%%%%%%%%%%%%%%%%%%%%-----
# # Un-comment this before submitting code to cluster
# setwd("/home/kongyir")
# source("/home/kongyir/User_defined_functions.R")
# source("/home/kongyir/utility.R")
# # clear working environment
rm(list = ls())
# Set directories in local computer
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/POWER")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
#source("~/Desktop/OSU/Research/Pretest-Simulation/geerate_data_fun.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# Set up cores for parallel processing
par_set <- function(cores_reserve = 2) {
cores = parallel::detectCores()
cores_use <- cores - cores_reserve
if (Sys.info()["sysname"] == "Windows") {
# Make a socket for both Windows & Unix-like
cl <- parallel::makeCluster(cores_use)
doParallel::registerDoParallel(cl)
} else {
# Make a socket cluster for Unix-like
cl <- snow::makeSOCKcluster(cores_use)
doSNOW::registerDoSNOW(cl)
}
foreach::getDoParWorkers()
return(cl)
}
# Function to close the cluster
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PERFORM SIMULATIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%----
## Set up the simulation parameters
{
N <- 1e4
B <- 1e4
alpha <- 0.05
dist_sum <- c("Standard Normal", "Exponential", "Chi-Square", "LogNormal")
nvec <- c(8, 10, 15, 20, 25, 30, 50)
d <- 0.75
}
# Function to calculate test statistic for one-sample
calculate_test_statistic <- function(x) {
return((mean(x) * sqrt(length(x))) / sd(x))
}
# Function to compute the area under the curve using the trapezoidal rule
compute_area <- function(x, y) {
(sum(diff(x) * (head(y, -1) + tail(y, -1)) / 2)) / (max(nvec) - min(nvec))
}
# Progress taskbar setup
{
my_cl <- par_set(cores_reserve = 2)
ntasks <- length(nvec) * length(dist_sum)
pb <- txtProgressBar(max=ntasks, style=3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress=progress)
}
## Perform simulation
system.time({
sim_out <- foreach(n = nvec, .packages = c("LaplacesDemon", "VGAM"), .options.snow = opts) %:%
foreach(dist = dist_sum) %dopar% {
set.seed(12345) # Set seed for reproducibility
pval_t_power <- pval_wilcox_power <- pvals_power <- pval_perm_power <- numeric(N)
pval_t_error <- pval_wilcox_error <- pvals_error <- pval_perm_error <- numeric(N)
pval_sw <- time_t <- time_wilcox <- time_t_wilcox <- time_perm <- numeric(N)
for (i in 1:N) {
x <- generate_data(n, dist)
# perform SW test
pval_sw[i] <- shapiro.test(x)$p.value
# Perform t-test
time_t[i] <- system.time({
pval_t_error[i] <- t.test(x)$p.value
pval_t_power[i] <- t.test(x + d)$p.value
})["elapsed"]
# Perform Wilcoxon test
time_wilcox[i] <- system.time({
pval_wilcox_error[i] <- wilcox.test(x, mu = 0, alternative = "two.sided")$p.value
pval_wilcox_power[i] <- wilcox.test(x + d, mu = 0, alternative = "two.sided")$p.value
})["elapsed"]
# Perform t-test/Wilcoxon test based on Shapiro-Wilk normality test
time_t_wilcox[i] <- system.time({
if (pval_sw[i] > alpha) {
pvals_error[i] <- t.test(x)$p.value
pvals_power[i] <- t.test(x + d)$p.value
} else {
pvals_error[i] <- wilcox.test(x,mu = 0, alternative = "two.sided")$p.value
pvals_power[i] <- wilcox.test(x + d, mu = 0, alternative = "two.sided")$p.value
}
})["elapsed"]
# Perform permutation test
observe_stat_error <- calculate_test_statistic(x)
observe_stat_power <- calculate_test_statistic(x + d)
time_perm[i] <- system.time({
permuted_stat_error <- permuted_stat_power <- numeric(B)
for (j in 1:B) {
index <- sample(c(-1, 1), length(x), replace = TRUE)
sample_data_error <- index * abs(x)
permuted_stat_error[j] <- calculate_test_statistic(sample_data_error)
sample_data_power <- index * abs(x + d)
permuted_stat_power[j] <- calculate_test_statistic(sample_data_power)
}
pval_perm_error[i] <- mean(abs(permuted_stat_error) >= abs(observe_stat_error))
pval_perm_power[i] <- mean(abs(permuted_stat_power) >= abs(observe_stat_power))
})["elapsed"]
}
# power of SW test
powr_sw <- mean(pval_sw < alpha)
# Calculate Type I error rates
t_error <- mean(pval_t_error < alpha)
wilcox_error <- mean(pval_wilcox_error < alpha)
t_wilcox_error <- mean(pvals_error < alpha)
perm_error <- mean(pval_perm_error < alpha)
# Calculate Type I error rates
powr_t <- mean(pval_t_power < alpha)
powr_wilcox <- mean(pval_wilcox_power < alpha)
powr_t_wilcox <- mean(pvals_power < alpha)
powr_perm <- mean(pval_perm_power < alpha)
# Calculate average computation times
avg_time_t <- mean(time_t)
avg_time_wilcox <- mean(time_wilcox)
avg_time_t_wilcox <- mean(time_t_wilcox)
avg_time_perm <- mean(time_perm)
list(
# power of sw test
powr_sw = powr_sw,
# Type I error
t_error = t_error,
wilcox_error = wilcox_error,
t_wilcox_error = t_wilcox_error,
perm_error = perm_error,
# power
powr_t = powr_t,
powr_wilcox = powr_wilcox,
powr_t_wilcox = powr_t_wilcox,
powr_perm = powr_perm,
# Computation Time
time_t = avg_time_t,
time_wilcox = avg_time_wilcox,
time_t_wilcox = avg_time_t_wilcox,
time_perm = avg_time_perm
)
}
close_cluster(my_cl)
})
## Output
powrvec <- numeric(length(nvec) * length(dist_sum))
power_sw <- array(powrvec, dim = c(length(nvec), length(dist_sum)), dimnames = list(nvec, dist_sum))
error_t <- error_wilcox <- error_t_wilcox <- error_perm <- array(powrvec, dim = c(length(nvec), length(dist_sum)), dimnames = list(nvec, dist_sum))
power_t <- power_wilcox <- power_t_wilcox <- power_perm <- array(powrvec, dim = c(length(nvec), length(dist_sum)), dimnames = list(nvec, dist_sum))
avg_time_t <- avg_time_wilcox <- avg_time_t_wilcox <- avg_time_perm <- array(powrvec, dim = c(length(nvec), length(dist_sum)), dimnames = list(nvec, dist_sum))
for (t in seq_along(nvec)) {
for (j in seq_along(dist_sum)) {
#power of sw test
power_sw[t, j] <- (sim_out[[t]][[j]]$powr_sw)
# Probability of Type I error rates
error_t[t, j] <- (sim_out[[t]][[j]]$t_error)
error_wilcox[t, j] <- (sim_out[[t]][[j]]$wilcox_error)
error_t_wilcox[t, j] <- (sim_out[[t]][[j]]$t_wilcox_error)
error_perm[t, j] <- (sim_out[[t]][[j]]$perm_error)
# Power
power_t[t, j] <- (sim_out[[t]][[j]]$powr_t)
power_wilcox[t, j] <- (sim_out[[t]][[j]]$powr_wilcox)
power_t_wilcox[t, j] <- (sim_out[[t]][[j]]$powr_t_wilcox)
power_perm[t, j] <- (sim_out[[t]][[j]]$powr_perm)
# Computation Time
avg_time_t[t, j] <- (sim_out[[t]][[j]]$time_t)
avg_time_wilcox[t, j] <- (sim_out[[t]][[j]]$time_wilcox)
avg_time_t_wilcox[t, j] <- (sim_out[[t]][[j]]$time_t_wilcox)
avg_time_perm[t, j] <- (sim_out[[t]][[j]]$time_perm)
}
}
# Calculate areas under the Type I error rate curves
auc_error_t <- apply(error_t, 2, compute_area, x = nvec)
auc_error_wilcox <- apply(error_wilcox, 2, compute_area, x = nvec)
auc_error_t_wilcox <- apply(error_t_wilcox, 2, compute_area, x = nvec)
auc_error_perm <- apply(error_perm, 2, compute_area, x = nvec)
# Calculate areas under the Type I error rate curves
auc_power_t <- apply(power_t, 2, compute_area, x = nvec)
auc_power_wilcox <- apply(power_wilcox, 2, compute_area, x = nvec)
auc_power_t_wilcox <- apply(power_t_wilcox, 2, compute_area, x = nvec)
auc_power_perm <- apply(power_perm, 2, compute_area, x = nvec)
#power of sw test
power_sw
# Print Probability of Type I error rates
error_t
error_wilcox
error_t_wilcox
error_perm
# Print Power results
power_t
power_wilcox
power_t_wilcox
power_perm
# Computation time
avg_time_t
avg_time_wilcox
avg_time_t_wilcox
avg_time_perm
# Area under Type I error curve
auc_error_t
auc_error_wilcox
auc_error_t_wilcox
auc_error_perm
# Area under power curve
auc_power_t
auc_power_wilcox
auc_power_t_wilcox
auc_power_perm
# Save Data
save.image(paste0("OneSampleTest",".RData"))
# # Write data to excel
# library(writexl)
# error_dataframe <- data.frame(power_t, power_wilcox, power_t_wilcox, power_perm)
# write_xlsx(error_dataframe, path = "OneSampleTypeI_error_rates.xlsx")
