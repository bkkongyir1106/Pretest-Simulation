calculate_test_statistic <- function(x, y) {
(mean(x) - mean(y)) / sqrt(var(x)/length(x) + var(y)/length(y))
}
permutation_test <- function(x, y, B = 1000) {
observed <- calculate_test_statistic(x, y)
combined <- c(x, y)
perm_stats <- replicate(B, {
permuted <- sample(combined)
x_star <- permuted[1:length(x)]
y_star <- permuted[(length(x)+1):(2*length(x))]
calculate_test_statistic(x_star, y_star)
})
mean(abs(perm_stats) >= abs(observed))
}
run_simulation <- function(dist, n, Nsim, effect_size, alpha, B) {
reject_perm_null <- reject_perm_alt <- numeric(Nsim)
reject_adapt_null <- reject_adapt_alt <- numeric(Nsim)
reject_t_null <- reject_t_alt <- numeric(Nsim)
N_t = 0
N_sw = 0
for (i in 1:Nsim) {
# Under null
x0 <- generate_data(n, dist)
y0 <- generate_data(n, dist)
N_t = N_t + 1
pval_t_null <- t.test(x0, y0)$p.value
reject_t_null[i] <- (pval_t_null < alpha)
p_null <- permutation_test(x0, y0, B)
reject_perm_null[i] <- (p_null < alpha)
if (shapiro.test(x0)$p.value > alpha && shapiro.test(y0)$p.value > alpha) {
N_sw = N_sw + 1
reject_adapt_null[i] <- (t.test(x0, y0)$p.value < alpha)
} else {
reject_adapt_null[i] <- (permutation_test(x0, y0, B) < alpha)
}
# Under alternative
x1 <- x0
y1 <- y0 + effect_size
pval_t_alt <- t.test(x0, y0 + effect_size)$p.value
reject_t_alt[i] <- (pval_t_alt < alpha)
p_alt <- permutation_test(x1, y1, B)
reject_perm_alt[i] <- (p_alt < alpha)
if (shapiro.test(x1)$p.value > alpha && shapiro.test(y1)$p.value > alpha) {
reject_adapt_alt[i] <- (t.test(x0, y0 + effect_size)$p.value < alpha)
} else {
reject_adapt_alt[i] <- (permutation_test(x1, y1, B) < alpha)
}
}
list(
type1_perm = mean(reject_perm_null),
type1_t = mean(reject_t_null),
type1_adapt = mean(reject_adapt_null),
power_t = mean(reject_t_alt),
power_perm = mean(reject_perm_alt),
power_adapt = mean(reject_adapt_alt),
p_sw = N_sw/N_t
)
}
# ------------ Initialize Results -----------#
dims <- c(length(sample_sizes), length(distributions))
dimnames_list <- list(as.character(sample_sizes), distributions)
power_t_mat <- power_perm_mat <- power_adapt_mat <- array(NA, dim = dims, dimnames = dimnames_list)
type1_t_mat <- type1_perm_mat <- type1_adapt_mat <- prob_sw <- array(NA, dim = dims, dimnames = dimnames_list)
# ---------- Parallel Setup ---------------- #
cores <- detectCores() - 2
cl <- makeCluster(cores)
registerDoSNOW(cl)
pb <- txtProgressBar(max = length(sample_sizes) * length(distributions), style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
params <- expand.grid(n = sample_sizes, dist = distributions)
results <- foreach(i = 1:nrow(params), .options.snow = opts, .packages = c()) %dopar% {
n <- params$n[i]
dist <- params$dist[i]
run_simulation(dist, n, Nsim, effect_size, alpha, B)
}
close(pb)
stopCluster(cl)
# ----------- Store Results -------- #
for (i in 1:nrow(params)) {
n <- as.character(params$n[i])
dist <- as.character(params$dist[i])
res <- results[[i]]
power_t_mat[n, dist] <- res$power_t
power_perm_mat[n, dist] <- res$power_perm
power_adapt_mat[n, dist] <- res$power_adapt
type1_t_mat[n, dist] <- res$type1_t
type1_perm_mat[n, dist] <- res$type1_perm
type1_adapt_mat[n, dist] <- res$type1_adapt
prob_sw[n, dist] <- res$p_sw
}
power_diff <- power_perm_mat - power_t_mat
powerloss <- power_adapt_mat - power_t_mat
inflation_error <- type1_t_mat - alpha
Expected_powerloss <- power_adapt_mat - power_t_mat
Expectedinflation_error <- type1_t_mat - type1_adapt_mat
# ----------- Print Results ----------- #
cat("\nPower (t-test):\n"); print(power_t_mat)
cat("\nPower (Permutation):\n"); print(power_perm_mat)
cat("\nPower (Adaptive):\n"); print(power_adapt_mat)
cat("\nPower (power_diff):\n"); print(power_diff)
cat("\nType I Error (Permutation):\n"); print(type1_perm_mat)
cat("\nType I Error (t-test):\n"); print(type1_t_mat)
cat("\nType I Error (Adaptive):\n"); print(type1_adapt_mat)
cat("\nType I Error (inflation_error):\n"); print(inflation_error)
cat("\nType I Error (Expected_inflation):\n"); print(Expectedinflation_error)
cat("\nprob_sw:\n"); print(prob_sw)
# ------- Save for Later Use ----------- #
#save.image("t_test_vs_Adaptive_Simulation.RData")
#save.image("t_test_vs_Adaptive_Simulation_pA.RData")
power_diff
Expected_powerloss
power_diff
Expected_powerloss
# Set directories in local computer
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/POWER")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
{
Nsim <- 1e4
B <- 1e3
alpha <- 0.05
distributions <- c("Normal", "Uniform","Exponential",  "LogNormal")
#distributions <- c("Normal", "LogNormal")
sample_sizes <- c(8, 10, 15, 20, 25, 30, 50)
effect_size <- 0.5
}
calculate_test_statistic <- function(x, y) {
(mean(x) - mean(y)) / sqrt(var(x)/length(x) + var(y)/length(y))
}
permutation_test <- function(x, y, B = 1000) {
observed <- calculate_test_statistic(x, y)
combined <- c(x, y)
perm_stats <- replicate(B, {
permuted <- sample(combined)
x_star <- permuted[1:length(x)]
y_star <- permuted[(length(x)+1):(2*length(x))]
calculate_test_statistic(x_star, y_star)
})
mean(abs(perm_stats) >= abs(observed))
}
run_simulation <- function(dist, n, Nsim, effect_size, alpha, B) {
reject_perm_null <- reject_perm_alt <- numeric(Nsim)
reject_adapt_null <- reject_adapt_alt <- numeric(Nsim)
reject_t_null <- reject_t_alt <- numeric(Nsim)
N_t = 0
N_sw = 0
for (i in 1:Nsim) {
# Under null
x0 <- generate_data(n, dist)
y0 <- generate_data(n, dist)
N_t = N_t + 1
pval_t_null <- t.test(x0, y0)$p.value
reject_t_null[i] <- (pval_t_null < alpha)
p_null <- permutation_test(x0, y0, B)
reject_perm_null[i] <- (p_null < alpha)
if (shapiro.test(x0)$p.value > alpha && shapiro.test(y0)$p.value > alpha) {
N_sw = N_sw + 1
reject_adapt_null[i] <- (t.test(x0, y0)$p.value < alpha)
} else {
reject_adapt_null[i] <- (permutation_test(x0, y0, B) < alpha)
}
# Under alternative
x1 <- x0
y1 <- y0 + effect_size
pval_t_alt <- t.test(x0, y0 + effect_size)$p.value
reject_t_alt[i] <- (pval_t_alt < alpha)
p_alt <- permutation_test(x1, y1, B)
reject_perm_alt[i] <- (p_alt < alpha)
if (shapiro.test(x1)$p.value > alpha && shapiro.test(y1)$p.value > alpha) {
reject_adapt_alt[i] <- (t.test(x0, y0 + effect_size)$p.value < alpha)
} else {
reject_adapt_alt[i] <- (permutation_test(x1, y1, B) < alpha)
}
}
list(
type1_perm = mean(reject_perm_null),
type1_t = mean(reject_t_null),
type1_adapt = mean(reject_adapt_null),
power_t = mean(reject_t_alt),
power_perm = mean(reject_perm_alt),
power_adapt = mean(reject_adapt_alt),
p_sw = N_sw/N_t
)
}
# ------------ Initialize Results -----------#
dims <- c(length(sample_sizes), length(distributions))
dimnames_list <- list(as.character(sample_sizes), distributions)
power_t_mat <- power_perm_mat <- power_adapt_mat <- array(NA, dim = dims, dimnames = dimnames_list)
type1_t_mat <- type1_perm_mat <- type1_adapt_mat <- prob_sw <- array(NA, dim = dims, dimnames = dimnames_list)
# ---------- Parallel Setup ---------------- #
cores <- detectCores() - 2
cl <- makeCluster(cores)
registerDoSNOW(cl)
pb <- txtProgressBar(max = length(sample_sizes) * length(distributions), style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
params <- expand.grid(n = sample_sizes, dist = distributions)
results <- foreach(i = 1:nrow(params), .options.snow = opts, .packages = c()) %dopar% {
n <- params$n[i]
dist <- params$dist[i]
run_simulation(dist, n, Nsim, effect_size, alpha, B)
}
close(pb)
stopCluster(cl)
# ----------- Store Results -------- #
for (i in 1:nrow(params)) {
n <- as.character(params$n[i])
dist <- as.character(params$dist[i])
res <- results[[i]]
power_t_mat[n, dist] <- res$power_t
power_perm_mat[n, dist] <- res$power_perm
power_adapt_mat[n, dist] <- res$power_adapt
type1_t_mat[n, dist] <- res$type1_t
type1_perm_mat[n, dist] <- res$type1_perm
type1_adapt_mat[n, dist] <- res$type1_adapt
prob_sw[n, dist] <- res$p_sw
}
power_diff <- power_perm_mat - power_t_mat
powerloss <- power_adapt_mat - power_t_mat
inflation_error <- type1_t_mat - alpha
Expected_powerloss <- power_adapt_mat - power_t_mat
Expectedinflation_error <- type1_t_mat - type1_adapt_mat
# ----------- Print Results ----------- #
cat("\nPower (t-test):\n"); print(power_t_mat)
cat("\nPower (Permutation):\n"); print(power_perm_mat)
cat("\nPower (Adaptive):\n"); print(power_adapt_mat)
cat("\nPower (power_diff):\n"); print(power_diff)
cat("\nType I Error (Permutation):\n"); print(type1_perm_mat)
cat("\nType I Error (t-test):\n"); print(type1_t_mat)
cat("\nType I Error (Adaptive):\n"); print(type1_adapt_mat)
cat("\nType I Error (inflation_error):\n"); print(inflation_error)
cat("\nType I Error (Expected_inflation):\n"); print(Expectedinflation_error)
cat("\nprob_sw:\n"); print(prob_sw)
# ------- Save for Later Use ----------- #
#save.image("t_test_vs_Adaptive_Simulation.RData")
#save.image("t_test_vs_Adaptive_Simulation_pA.RData")
power_diff
Expected_powerloss
knitr::opts_chunk$set(echo = TRUE)
#load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/POWER/t_test_vs_Adaptive_Simulation.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/POWER/t_test_vs_Adaptive_Simulation_pA.RData")
powerloss <-data.frame(power_diff)
Expected_powerloss <-data.frame(power_diff*prob_sw)
inflation_error <-data.frame(inflation_error)
Expectedinflation_error <-data.frame(inflation_error * prob_sw)
pdf("/Users/benedictkongyir/Desktop/OSU/Research/Literature/images/powerloss_error_v2.pdf", width = 8, height = 6)
par(mfrow = c(2, 2), mar = c(4, 4, 2, 1))  # controls layout and margins
plot(sample_sizes, powerloss$Exponential,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.01, 0.1), xlim = range(sample_sizes), xlab = "Sample Size", ylab = expression(Power[test2] - Power[test1]))
lines(sample_sizes, powerloss$LogNormal, type = "o", lty = 2, pch = 2, col = "green", lwd = 3)
lines(sample_sizes, powerloss$Uniform, type = "o", lty = 3, pch = 8, col = "blue", lwd = 3)
lines(sample_sizes, powerloss$Normal, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Difference in power between test1 and test2")
legend("topright", legend=c("Exponential","Lognormal",  "Normal", "Uniform"), lwd = 3,
col=c( "red", "green", "blue", "orange"), lty = 1:4,cex = 0.8, pch = c(1,2,8, 6, 4), title = "Distribution")
# expected power loss
plot(sample_sizes, Expected_powerloss$Exponential,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.01, 0.1), xlim = range(sample_sizes), xlab = "Sample Size", ylab = "Expected Power Loss")
lines(sample_sizes, Expected_powerloss$LogNormal, type = "o", lty = 2, pch = 2, col = "green", lwd = 3)
lines(sample_sizes, Expected_powerloss$Uniform, type = "o", lty = 3, pch = 8, col = "blue", lwd = 3)
lines(sample_sizes, Expected_powerloss$Normal, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Expected Power loss")
legend("topright", legend=c("Exponential","Lognormal",  "Normal", "Uniform"), lwd = 3,
col=c( "red", "green", "blue", "orange"), lty = 1:4,cex = 0.8, pch = c(1,2,8, 6, 4), title = "Distribution")
#
# # inflation of Type I error
plot(sample_sizes, inflation_error$Exponential,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.05, 0.05), xlim = range(sample_sizes), xlab = "Sample Size", ylab = "Inflation of Type I error Rates")
lines(sample_sizes, inflation_error$LogNormal, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(sample_sizes, inflation_error$Uniform, type = "o", lty = 3, pch = 8, col = "green", lwd = 3)
lines(sample_sizes, inflation_error$Normal, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Inflation of Type I error Rates ")
legend("topright", legend=c("Exponential","Lognormal",  "Normal", "Uniform"), lwd = 3,
col=c( "red", "blue", "green", "orange"), lty = 1:4,cex = 0.8, pch = c(1,2,8, 6, 4), title = "Distribution")
# expected inflation of Type I error
plot(sample_sizes, Expectedinflation_error$Exponential,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.05, 0.05), xlim = range(sample_sizes), xlab = "Sample Size", ylab = "Expected inflation of Type I error")
lines(sample_sizes, Expectedinflation_error$LogNormal, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(sample_sizes, Expectedinflation_error$Uniform, type = "o", lty = 3, pch = 8, col = "green", lwd = 3)
lines(sample_sizes, Expectedinflation_error$Normal, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Expected inflation of Type I error")
legend("topright", legend=c("Exponential","Lognormal",  "Normal", "Uniform"), lwd = 3,
col=c( "red", "blue", "green", "orange"), lty = 1:4,cex = 0.8, pch = c(1,2,8, 6, 4), title = "Distribution")
dev.off()
#pdf("/Users/benedictkongyir/Desktop/OSU/Research/Literature/images/powerloss_error_v2.pdf", width = 8, height = 6)
par(mfrow = c(2, 2), mar = c(4, 4, 2, 1))  # controls layout and margins
plot(sample_sizes, powerloss$Exponential,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.01, 0.1), xlim = range(sample_sizes), xlab = "Sample Size", ylab = expression(Power[test2] - Power[test1]))
lines(sample_sizes, powerloss$LogNormal, type = "o", lty = 2, pch = 2, col = "green", lwd = 3)
lines(sample_sizes, powerloss$Uniform, type = "o", lty = 3, pch = 8, col = "blue", lwd = 3)
lines(sample_sizes, powerloss$Normal, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Difference in power between test1 and test2")
legend("topright", legend=c("Exponential","Lognormal",  "Normal", "Uniform"), lwd = 3,
col=c( "red", "green", "blue", "orange"), lty = 1:4,cex = 0.8, pch = c(1,2,8, 6, 4), title = "Distribution")
# expected power loss
plot(sample_sizes, Expected_powerloss$Exponential,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.01, 0.1), xlim = range(sample_sizes), xlab = "Sample Size", ylab = "Expected Power Loss")
lines(sample_sizes, Expected_powerloss$LogNormal, type = "o", lty = 2, pch = 2, col = "green", lwd = 3)
lines(sample_sizes, Expected_powerloss$Uniform, type = "o", lty = 3, pch = 8, col = "blue", lwd = 3)
lines(sample_sizes, Expected_powerloss$Normal, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Expected Power loss")
legend("topright", legend=c("Exponential","Lognormal",  "Normal", "Uniform"), lwd = 3,
col=c( "red", "green", "blue", "orange"), lty = 1:4,cex = 0.8, pch = c(1,2,8, 6, 4), title = "Distribution")
#
# # inflation of Type I error
plot(sample_sizes, inflation_error$Exponential,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.05, 0.05), xlim = range(sample_sizes), xlab = "Sample Size", ylab = "Inflation of Type I error Rates")
lines(sample_sizes, inflation_error$LogNormal, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(sample_sizes, inflation_error$Uniform, type = "o", lty = 3, pch = 8, col = "green", lwd = 3)
lines(sample_sizes, inflation_error$Normal, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Inflation of Type I error Rates ")
legend("topright", legend=c("Exponential","Lognormal",  "Normal", "Uniform"), lwd = 3,
col=c( "red", "blue", "green", "orange"), lty = 1:4,cex = 0.8, pch = c(1,2,8, 6, 4), title = "Distribution")
# expected inflation of Type I error
plot(sample_sizes, Expectedinflation_error$Exponential,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.05, 0.05), xlim = range(sample_sizes), xlab = "Sample Size", ylab = "Expected inflation of Type I error")
lines(sample_sizes, Expectedinflation_error$LogNormal, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(sample_sizes, Expectedinflation_error$Uniform, type = "o", lty = 3, pch = 8, col = "green", lwd = 3)
lines(sample_sizes, Expectedinflation_error$Normal, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Expected inflation of Type I error")
legend("topright", legend=c("Exponential","Lognormal",  "Normal", "Uniform"), lwd = 3,
col=c( "red", "blue", "green", "orange"), lty = 1:4,cex = 0.8, pch = c(1,2,8, 6, 4), title = "Distribution")
#dev.off()
sample_sizes <- nvec
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/POWER/TwoSamplepowerAUC.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/TYPE I ERROR/TwoSampleAUCTypeI_errorRate_04132025.RData")
sample_sizes <- nvec
# Power
# Power of sw-test
power_sw_test <-data.frame(power_sw)
# Power of t test:
power_t_test <-data.frame(power_t)
# Power of wilcon-test
power_wilcox_test <-data.frame(power_wilcox)
# Power of t/wilcoxon test:
power_t_wilcox_test <-data.frame(power_t_wilcox)
# Power of perm test:
power_perm_test <-data.frame(power_perm)
# Type I error
# Power of t test:
error_t_test <-data.frame(TypeI.errorRate_t)
# Power of wilcon-test
error_wilcox_test <-data.frame(TypeI.errorRate_wilcox)
# Power of t/wilcoxon test:
error_t_wilcox_test <-data.frame(TypeI.errorRate_perm)
# Power of perm test:
error_perm_test <-data.frame(TypeI.errorRate_perm)
#pdf("/Users/benedictkongyir/Desktop/OSU/Research/Literature/images/auc.pdf", width = 16, height = 8)
par(mfrow = c(1,2))
plot(sample_sizes, power_t_test$LogNormal,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,ylim = c(0, 1),  xlab = "sample size", ylab = "Power")
lines(sample_sizes, power_wilcox_test$LogNormal, type = "o", lty = 2, pch = 2, col = "orange", lwd = 3)
lines(sample_sizes, power_perm_test$LogNormal, type = "o", lty = 3, pch = 3, col = "blue", lwd = 3)
lines(sample_sizes, power_t_wilcox_test$LogNormal, type = "o", lty = 4, pch = 4, col = "green", lwd = 3)
abline(v = c(8, 50), col = "grey")
title(main = "Power of different two-sample location tests")
legend("bottomright", legend=c("t","Wilcoxon", "Permutation", "Adaptive"), lwd = 3,
col=c("red", "orange",  "blue", "green"), lty = 1:4, pch =1:4, cex = 0.8, title = "Test Method")
# Type I error
plot(sample_sizes, error_t_test$LogNormal,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,ylim = c(0, 0.1),  xlab = "sample size", ylab = "Type I error")
lines(sample_sizes, error_wilcox_test$LogNormal, type = "o", lty = 2, pch = 2, col = "orange", lwd = 3)
lines(sample_sizes, error_perm_test$LogNormal, type = "o", lty = 3, pch = 3, col = "blue", lwd = 3)
lines(sample_sizes, error_t_wilcox_test$LogNormal, type = "o", lty = 4, pch = 4, col = "green", lwd = 3)
abline(v = c(8, 50), col = "grey")
abline(h = 0.05, col = "pink")
title(main = "Type I error of different two-sample location tests")
legend("bottomright", legend=c("t","Wilcoxon", "Permutation", "Adaptive"), lwd = 3,
col=c("red", "orange",  "blue", "green"), lty = 1:4, pch =1:4, cex = 0.8, title = "Test Method")
#dev.off()
#pdf("/Users/benedictkongyir/Desktop/OSU/Research/Literature/images/auc.pdf", width = 16, height = 8)
par(mfrow = c(1,2))
plot(sample_sizes, power_t_test$LogNormal,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,ylim = c(0, 1),  xlab = "sample size", ylab = "Power")
lines(sample_sizes, power_wilcox_test$LogNormal, type = "o", lty = 2, pch = 2, col = "orange", lwd = 3)
lines(sample_sizes, power_perm_test$LogNormal, type = "o", lty = 3, pch = 3, col = "green", lwd = 3)
lines(sample_sizes, power_t_wilcox_test$LogNormal, type = "o", lty = 4, pch = 4, col = "blue", lwd = 3)
abline(v = c(8, 50), col = "grey")
title(main = "Power of different two-sample location tests")
legend("bottomright", legend=c("t","Wilcoxon", "Permutation", "Adaptive"), lwd = 3,
col=c("red", "orange",  "green", "blue"), lty = 1:4, pch =1:4, cex = 0.8, title = "Test Method")
# Type I error
plot(sample_sizes, error_t_test$LogNormal,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,ylim = c(0, 0.1),  xlab = "sample size", ylab = "Type I error")
lines(sample_sizes, error_wilcox_test$LogNormal, type = "o", lty = 2, pch = 2, col = "orange", lwd = 3)
lines(sample_sizes, error_perm_test$LogNormal, type = "o", lty = 3, pch = 3, col = "green", lwd = 3)
lines(sample_sizes, error_t_wilcox_test$LogNormal, type = "o", lty = 4, pch = 4, col = "blue", lwd = 3)
abline(v = c(8, 50), col = "grey")
abline(h = 0.05, col = "pink")
title(main = "Type I error of different two-sample location tests")
legend("bottomright", legend=c("t","Wilcoxon", "Permutation", "Adaptive"), lwd = 3,
col=c("red", "orange",  "green", "blue"), lty = 1:4, pch =1:4, cex = 0.8, title = "Test Method")
#dev.off()
pdf("/Users/benedictkongyir/Desktop/OSU/Research/Literature/images/auc.pdf", width = 16, height = 8)
par(mfrow = c(1,2))
plot(sample_sizes, power_t_test$LogNormal,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,ylim = c(0, 1),  xlab = "sample size", ylab = "Power")
lines(sample_sizes, power_wilcox_test$LogNormal, type = "o", lty = 2, pch = 2, col = "orange", lwd = 3)
lines(sample_sizes, power_perm_test$LogNormal, type = "o", lty = 3, pch = 3, col = "green", lwd = 3)
lines(sample_sizes, power_t_wilcox_test$LogNormal, type = "o", lty = 4, pch = 4, col = "blue", lwd = 3)
abline(v = c(8, 50), col = "grey")
title(main = "Power of different two-sample location tests")
legend("bottomright", legend=c("t","Wilcoxon", "Permutation", "Adaptive"), lwd = 3,
col=c("red", "orange",  "green", "blue"), lty = 1:4, pch =1:4, cex = 0.8, title = "Test Method")
# Type I error
plot(sample_sizes, error_t_test$LogNormal,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,ylim = c(0, 0.1),  xlab = "sample size", ylab = "Type I error")
lines(sample_sizes, error_wilcox_test$LogNormal, type = "o", lty = 2, pch = 2, col = "orange", lwd = 3)
lines(sample_sizes, error_perm_test$LogNormal, type = "o", lty = 3, pch = 3, col = "green", lwd = 3)
lines(sample_sizes, error_t_wilcox_test$LogNormal, type = "o", lty = 4, pch = 4, col = "blue", lwd = 3)
abline(v = c(8, 50), col = "grey")
abline(h = 0.05, col = "pink")
title(main = "Type I error of different two-sample location tests")
legend("bottomright", legend=c("t","Wilcoxon", "Permutation", "Adaptive"), lwd = 3,
col=c("red", "orange",  "green", "blue"), lty = 1:4, pch =1:4, cex = 0.8, title = "Test Method")
dev.off()
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/POWER/TwoSamplepowerAUC.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/TYPE I ERROR/TwoSampleAUCTypeI_errorRate_04132025.RData")
sample_sizes <- nvec
# Power
# Power of sw-test
power_sw_test <-data.frame(power_sw)
# Power of t test:
power_t_test <-data.frame(power_t)
# Power of wilcon-test
power_wilcox_test <-data.frame(power_wilcox)
# Power of t/wilcoxon test:
power_t_wilcox_test <-data.frame(power_t_wilcox)
# Power of perm test:
power_perm_test <-data.frame(power_perm)
# Type I error
# Power of t test:
error_t_test <-data.frame(TypeI.errorRate_t)
# Power of wilcon-test
error_wilcox_test <-data.frame(TypeI.errorRate_wilcox)
# Power of t/wilcoxon test:
error_t_wilcox_test <-data.frame(TypeI.errorRate_perm)
# Power of perm test:
error_perm_test <-data.frame(TypeI.errorRate_perm)
pdf("/Users/benedictkongyir/Desktop/OSU/Research/Literature/images/auc.pdf", width = 16, height = 8)
par(mfrow = c(1,2))
plot(sample_sizes, power_t_test$LogNormal,  type = "o", lty = 1, pch = 1, col = "red", lwd = 4,ylim = c(0, 1),  xlab = "sample size", ylab = "Power")
lines(sample_sizes, power_wilcox_test$LogNormal, type = "o", lty = 2, pch = 2, col = "orange", lwd = 4)
lines(sample_sizes, power_perm_test$LogNormal, type = "o", lty = 3, pch = 3, col = "green", lwd = 4)
lines(sample_sizes, power_t_wilcox_test$LogNormal, type = "o", lty = 4, pch = 4, col = "blue", lwd = 4)
abline(v = c(8, 50), col = "grey")
title(main = "Power of different two-sample location tests")
legend("bottomright", legend=c("t","Wilcoxon", "Permutation", "Adaptive"), lwd = 4,
col=c("red", "orange",  "green", "blue"), lty = 1:4, pch =1:4, cex = 0.8, title = "Test Method")
# Type I error
plot(sample_sizes, error_t_test$LogNormal,  type = "o", lty = 1, pch = 1, col = "red", lwd = 4,ylim = c(0, 0.1),  xlab = "sample size", ylab = "Type I error")
lines(sample_sizes, error_wilcox_test$LogNormal, type = "o", lty = 2, pch = 2, col = "orange", lwd = 4)
lines(sample_sizes, error_perm_test$LogNormal, type = "o", lty = 3, pch = 3, col = "green", lwd = 4)
lines(sample_sizes, error_t_wilcox_test$LogNormal, type = "o", lty = 4, pch = 4, col = "blue", lwd = 4)
abline(v = c(8, 50), col = "grey")
abline(h = 0.05, col = "pink")
title(main = "Type I error of different two-sample location tests")
legend("bottomright", legend=c("t","Wilcoxon", "Permutation", "Adaptive"), lwd = 4,
col=c("red", "orange",  "green", "blue"), lty = 1:4, pch =1:4, cex = 0.8, title = "Test Method")
dev.off()
#load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/POWER/t_test_vs_Adaptive_Simulation.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/AREA UNDER CURVE/POWER/t_test_vs_Adaptive_Simulation_pA.RData")
powerloss <-data.frame(power_diff)
Expected_powerloss <-data.frame(power_diff*prob_sw)
inflation_error <-data.frame(inflation_error)
Expectedinflation_error <-data.frame(inflation_error * prob_sw)
pdf("/Users/benedictkongyir/Desktop/OSU/Research/Literature/images/powerloss_error_v2.pdf", width = 8, height = 6)
par(mfrow = c(2, 2), mar = c(4, 4, 2, 1))  # controls layout and margins
plot(sample_sizes, powerloss$Exponential,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.01, 0.1), xlim = range(sample_sizes), xlab = "Sample Size", ylab = expression(Power[test2] - Power[test1]))
lines(sample_sizes, powerloss$LogNormal, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(sample_sizes, powerloss$Uniform, type = "o", lty = 3, pch = 8, col = "green", lwd = 3)
lines(sample_sizes, powerloss$Normal, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Difference in power between test1 and test2")
legend("topright", legend=c("Exponential","Lognormal",  "Normal", "Uniform"), lwd = 3,
col=c( "red", "blue", "green", "orange"), lty = 1:4,cex = 0.8, pch = c(1,2,8, 6, 4), title = "Distribution")
# expected power loss
plot(sample_sizes, Expected_powerloss$Exponential,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.01, 0.1), xlim = range(sample_sizes), xlab = "Sample Size", ylab = "Expected Power Loss")
lines(sample_sizes, Expected_powerloss$LogNormal, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(sample_sizes, Expected_powerloss$Uniform, type = "o", lty = 3, pch = 8, col = "green", lwd = 3)
lines(sample_sizes, Expected_powerloss$Normal, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Expected Power loss")
legend("topright", legend=c("Exponential","Lognormal",  "Normal", "Uniform"), lwd = 3,
col=c( "red", "blue", "green", "orange"), lty = 1:4,cex = 0.8, pch = c(1,2,8, 6, 4), title = "Distribution")
#
# # inflation of Type I error
plot(sample_sizes, inflation_error$Exponential,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.05, 0.05), xlim = range(sample_sizes), xlab = "Sample Size", ylab = "Inflation of Type I error Rates")
lines(sample_sizes, inflation_error$LogNormal, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(sample_sizes, inflation_error$Uniform, type = "o", lty = 3, pch = 8, col = "green", lwd = 3)
lines(sample_sizes, inflation_error$Normal, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Inflation of Type I error Rates ")
legend("topright", legend=c("Exponential","Lognormal",  "Normal", "Uniform"), lwd = 3,
col=c( "red", "blue", "green", "orange"), lty = 1:4,cex = 0.8, pch = c(1,2,8, 6, 4), title = "Distribution")
# expected inflation of Type I error
plot(sample_sizes, Expectedinflation_error$Exponential,  type = "o", lty = 1, pch = 1, col = "red", lwd = 3,
ylim = c(-0.05, 0.05), xlim = range(sample_sizes), xlab = "Sample Size", ylab = "Expected inflation of Type I error")
lines(sample_sizes, Expectedinflation_error$LogNormal, type = "o", lty = 2, pch = 2, col = "blue", lwd = 3)
lines(sample_sizes, Expectedinflation_error$Uniform, type = "o", lty = 3, pch = 8, col = "green", lwd = 3)
lines(sample_sizes, Expectedinflation_error$Normal, type = "o", lty = 4, pch = 4, col = "orange", lwd = 3)
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Expected inflation of Type I error")
legend("topright", legend=c("Exponential","Lognormal",  "Normal", "Uniform"), lwd = 3,
col=c( "red", "blue", "green", "orange"), lty = 1:4,cex = 0.8, pch = c(1,2,8, 6, 4), title = "Distribution")
dev.off()
