# Plot the ROC curves
plot(FPR_exp, TPR_exp, type = "l", col = "blue", lwd = 2,
xlab = "False Positive Rate (FPR)", ylab = "True Positive Rate (TPR)",
main = "ROC Curve for Shapiro-Wilk Test")
abline(a = 0, b = 1, lty = 2, col = "red")  # Diagonal reference line
# Add a legend
legend("bottomright", legend = c("Exponential"), col = "blue", lwd = 2)
# Parameters
N = as.integer(1e3)       # Number of repetitions for each alpha level to average TPR and FPR
n = 10                    # Sample size for each test
d = 0.5
alpha.level = seq(from = 0.0, to = 0.05, by = 0.001)  # Range of significance levels
# Define Laplace function (if not available)
rlaplace <- function(n, location = 0, scale = 1) {
u <- runif(n) - 0.5
location - scale * sign(u) * log(1 - 2 * abs(u))
}
# Initialize vectors to store False Positive Rates (FPR) and True Positive Rates (TPR)
# FPR and TPR for each distribution
FPR_exp = TPR_exp = numeric(length(alpha.level))
# Loop over each significance level
for(i in seq_along(alpha.level)) {
alpha = alpha.level[i]
# Vectors to store p-values for each repetition for each distribution
pval_exp_error = pval_exp_powr = numeric(N)
# Repeat the test N times for each alpha level
norm_sample = 0
iter = 0
while(norm_sample < N && iter < N * 100) {  # Add a limit on iterations
x_exp = rexp(n = n, rate = 1)
iter = iter + 1
if(shapiro.test(x_exp)$p.value > alpha) {
norm_sample = norm_sample + 1
pval_exp_error[norm_sample] = t.test(x_exp - 1)$p.value
pval_exp_powr[norm_sample] = t.test(x_exp - 1 + d)$p.value
}
}
# Warn if the loop exited due to the iteration limit
if (norm_sample < N) {
warning(paste("Reached iteration limit for alpha level", alpha))
}
# Calculate FPR and TPRs for each distribution
FPR_exp[i] = mean(pval_exp_error < alpha)
TPR_exp[i] = mean(pval_exp_powr < alpha)
}
# Save the results to file
save(FPR_exp, TPR_exp, file = "ROC_downstream.test.RData")
# Plot the ROC curves
plot(FPR_exp, TPR_exp, type = "l", col = "blue", lwd = 2,
xlab = "False Positive Rate (FPR)", ylab = "True Positive Rate (TPR)",
main = "ROC Curve for Shapiro-Wilk Test")
abline(a = 0, b = 1, lty = 2, col = "red")  # Diagonal reference line
# Add a legend
legend("bottomright", legend = c("Exponential"), col = "blue", lwd = 2)
FPR_exp
TPR_exp
alpha.level
# Parameters
N = as.integer(1e3)       # Number of repetitions for each alpha level to average TPR and FPR
n = 10                    # Sample size for each test
d = 0.5
alpha.level = seq(from = 0.0, to = 1, by = 0.01)  # Range of significance levels
# Define Laplace function (if not available)
rlaplace <- function(n, location = 0, scale = 1) {
u <- runif(n) - 0.5
location - scale * sign(u) * log(1 - 2 * abs(u))
}
# Initialize vectors to store False Positive Rates (FPR) and True Positive Rates (TPR)
# FPR and TPR for each distribution
FPR_exp = TPR_exp = numeric(length(alpha.level))
# Loop over each significance level
for(i in seq_along(alpha.level)) {
alpha = alpha.level[i]
# Vectors to store p-values for each repetition for each distribution
pval_exp_error = pval_exp_powr = numeric(N)
# Repeat the test N times for each alpha level
norm_sample = 0
iter = 0
while(norm_sample < N && iter < N * 100) {  # Add a limit on iterations
x_exp = rexp(n = n, rate = 1)
iter = iter + 1
if(shapiro.test(x_exp)$p.value > alpha) {
norm_sample = norm_sample + 1
pval_exp_error[norm_sample] = t.test(x_exp - 1)$p.value
pval_exp_powr[norm_sample] = t.test(x_exp - 1 + d)$p.value
}
}
# Warn if the loop exited due to the iteration limit
if (norm_sample < N) {
warning(paste("Reached iteration limit for alpha level", alpha))
}
# Calculate FPR and TPRs for each distribution
FPR_exp[i] = mean(pval_exp_error < alpha)
TPR_exp[i] = mean(pval_exp_powr < alpha)
}
# Save the results to file
save(FPR_exp, TPR_exp, file = "ROC_downstream.test.RData")
# Plot the ROC curves
plot(FPR_exp, TPR_exp, type = "l", col = "blue", lwd = 2,
xlab = "False Positive Rate (FPR)", ylab = "True Positive Rate (TPR)",
main = "ROC Curve for Shapiro-Wilk Test")
abline(a = 0, b = 1, lty = 2, col = "red")  # Diagonal reference line
# Add a legend
legend("bottomright", legend = c("Exponential"), col = "blue", lwd = 2)
# Parameters
N = as.integer(1e3)       # Number of repetitions for each alpha level to average TPR and FPR
n = 10                    # Sample size for each test
d = 0.5
alpha.level = seq(from = 0.0, to = 0.8, by = 0.01)  # Range of significance levels
# Define Laplace function (if not available)
rlaplace <- function(n, location = 0, scale = 1) {
u <- runif(n) - 0.5
location - scale * sign(u) * log(1 - 2 * abs(u))
}
# Initialize vectors to store False Positive Rates (FPR) and True Positive Rates (TPR)
# FPR and TPR for each distribution
FPR_exp = TPR_exp = numeric(length(alpha.level))
# Loop over each significance level
for(i in seq_along(alpha.level)) {
alpha = alpha.level[i]
# Vectors to store p-values for each repetition for each distribution
pval_exp_error = pval_exp_powr = numeric(N)
# Repeat the test N times for each alpha level
norm_sample = 0
iter = 0
while(norm_sample < N && iter < N * 100) {  # Add a limit on iterations
x_exp = rexp(n = n, rate = 1)
iter = iter + 1
if(shapiro.test(x_exp)$p.value > alpha) {
norm_sample = norm_sample + 1
pval_exp_error[norm_sample] = t.test(x_exp - 1)$p.value
pval_exp_powr[norm_sample] = t.test(x_exp - 1 + d)$p.value
}
}
# Warn if the loop exited due to the iteration limit
if (norm_sample < N) {
warning(paste("Reached iteration limit for alpha level", alpha))
}
# Calculate FPR and TPRs for each distribution
FPR_exp[i] = mean(pval_exp_error < alpha)
TPR_exp[i] = mean(pval_exp_powr < alpha)
}
# Save the results to file
save(FPR_exp, TPR_exp, file = "ROC_downstream.test.RData")
# Plot the ROC curves
plot(FPR_exp, TPR_exp, type = "l", col = "blue", lwd = 2,
xlab = "False Positive Rate (FPR)", ylab = "True Positive Rate (TPR)",
main = "ROC Curve for Shapiro-Wilk Test")
abline(a = 0, b = 1, lty = 2, col = "red")  # Diagonal reference line
# Add a legend
legend("bottomright", legend = c("Exponential"), col = "blue", lwd = 2)
# Parameters
N = as.integer(1e3)       # Number of repetitions for each alpha level to average TPR and FPR
n = 10                    # Sample size for each test
d = 0.5
alpha.level = seq(from = 0.0, to = 0.8, by = 0.001)  # Range of significance levels
# Define Laplace function (if not available)
rlaplace <- function(n, location = 0, scale = 1) {
u <- runif(n) - 0.5
location - scale * sign(u) * log(1 - 2 * abs(u))
}
# Initialize vectors to store False Positive Rates (FPR) and True Positive Rates (TPR)
# FPR and TPR for each distribution
FPR_exp = TPR_exp = numeric(length(alpha.level))
# Loop over each significance level
for(i in seq_along(alpha.level)) {
alpha = alpha.level[i]
# Vectors to store p-values for each repetition for each distribution
pval_exp_error = pval_exp_powr = numeric(N)
# Repeat the test N times for each alpha level
norm_sample = 0
iter = 0
while(norm_sample < N && iter < N * 100) {  # Add a limit on iterations
x_exp = rexp(n = n, rate = 1)
iter = iter + 1
if(shapiro.test(x_exp)$p.value > alpha) {
norm_sample = norm_sample + 1
pval_exp_error[norm_sample] = t.test(x_exp - 1)$p.value
pval_exp_powr[norm_sample] = t.test(x_exp - 1 + d)$p.value
}
}
# Warn if the loop exited due to the iteration limit
if (norm_sample < N) {
warning(paste("Reached iteration limit for alpha level", alpha))
}
# Calculate FPR and TPRs for each distribution
FPR_exp[i] = mean(pval_exp_error < alpha)
TPR_exp[i] = mean(pval_exp_powr < alpha)
}
# Save the results to file
save(FPR_exp, TPR_exp, file = "ROC_downstream.test.RData")
# Plot the ROC curves
plot(FPR_exp, TPR_exp, type = "l", col = "blue", lwd = 2,
xlab = "False Positive Rate (FPR)", ylab = "True Positive Rate (TPR)",
main = "ROC Curve for Shapiro-Wilk Test")
abline(a = 0, b = 1, lty = 2, col = "red")  # Diagonal reference line
# Add a legend
legend("bottomright", legend = c("Exponential"), col = "blue", lwd = 2)
# Parameters
N = as.integer(1e3)       # Number of repetitions for each alpha level to average TPR and FPR
n = 10                    # Sample size for each test
d = 0.5
alpha.level = seq(from = 0.01, to = 0.8, by = 0.01)  # Range of significance levels
# Initialize vectors to store False Positive Rates (FPR) and True Positive Rates (TPR)
# FPR and TPR for each distribution
FPR_exp = TPR_exp = numeric(length(alpha.level))
# Loop over each significance level
for(i in seq_along(alpha.level)) {
alpha = alpha.level[i]
# Vectors to store p-values for each repetition for each distribution
pval_exp_error = pval_exp_powr = numeric(N)
# Repeat the test N times for each alpha level
norm_sample = 0
iter = 0
while(norm_sample < N && iter < N * 100) {  # Add a limit on iterations
x_exp = rexp(n = n, rate = 1)
iter = iter + 1
if(shapiro.test(x_exp)$p.value > alpha) {
norm_sample = norm_sample + 1
pval_exp_error[norm_sample] = t.test(x_exp - 1)$p.value
pval_exp_powr[norm_sample] = t.test(x_exp - 1 + d)$p.value
}
}
# Warn if the loop exited due to the iteration limit
if (norm_sample < N) {
warning(paste("Reached iteration limit for alpha level", alpha))
}
# Calculate FPR and TPRs for each distribution
FPR_exp[i] = mean(pval_exp_error < alpha)
TPR_exp[i] = mean(pval_exp_powr < alpha)
}
# Save the results to file
save(FPR_exp, TPR_exp, file = "ROC_downstream.test.RData")
# Plot the ROC curves
plot(FPR_exp, TPR_exp, type = "l", col = "blue", lwd = 2,
xlab = "False Positive Rate (FPR)", ylab = "True Positive Rate (TPR)",
main = "ROC Curve for Shapiro-Wilk Test")
abline(a = 0, b = 1, lty = 2, col = "red")  # Diagonal reference line
# Add a legend
legend("bottomright", legend = c("Exponential"), col = "blue", lwd = 2)
# Parameters
N = as.integer(1e3)       # Number of repetitions for each alpha level to average TPR and FPR
n = 10                    # Sample size for each test
d = 0.5
alpha.level = seq(from = 0.0, to = 0.8, by = 0.01)  # Range of significance levels
# Initialize vectors to store False Positive Rates (FPR) and True Positive Rates (TPR)
# FPR and TPR for each distribution
FPR_exp = TPR_exp = numeric(length(alpha.level))
# Loop over each significance level
for(i in seq_along(alpha.level)) {
alpha = alpha.level[i]
# Vectors to store p-values for each repetition for each distribution
pval_exp_error = pval_exp_powr = numeric(N)
# Repeat the test N times for each alpha level
norm_sample = 0
iter = 0
while(norm_sample < N && iter < N * 100) {  # Add a limit on iterations
x_exp = rexp(n = n, rate = 1)
iter = iter + 1
if(shapiro.test(x_exp)$p.value > alpha) {
norm_sample = norm_sample + 1
pval_exp_error[norm_sample] = t.test(x_exp - 1)$p.value
pval_exp_powr[norm_sample] = t.test(x_exp - 1 + d)$p.value
}
}
# Warn if the loop exited due to the iteration limit
if (norm_sample < N) {
warning(paste("Reached iteration limit for alpha level", alpha))
}
# Calculate FPR and TPRs for each distribution
FPR_exp[i] = mean(pval_exp_error < alpha)
TPR_exp[i] = mean(pval_exp_powr < alpha)
}
# Save the results to file
save(FPR_exp, TPR_exp, file = "ROC_downstream.test.RData")
# Plot the ROC curves
plot(FPR_exp, TPR_exp, type = "l", col = "blue", lwd = 2,
xlab = "False Positive Rate (FPR)", ylab = "True Positive Rate (TPR)",
main = "ROC Curve for Shapiro-Wilk Test")
abline(a = 0, b = 1, lty = 2, col = "red")  # Diagonal reference line
# Add a legend
legend("bottomright", legend = c("Exponential"), col = "blue", lwd = 2)
# Parameters
N = as.integer(1e3)           # Number of repetitions for each alpha level to average TPR and FPR
n = 10                        # Sample size for each test
d = 0.5                       # Effect size
alpha.level = seq(0, 0.8, 0.01) # Range of significance levels for ROC curve
# Initialize vectors to store False Positive Rates (FPR) and True Positive Rates (TPR)
FPR_exp = TPR_exp = numeric(length(alpha.level))
# Loop over each significance level
for(i in seq_along(alpha.level)) {
alpha = alpha.level[i]
# Initialize counters for successful normal samples
norm_sample = 0
iter = 0
# Vectors to store p-values for each distribution per alpha level
pval_exp_error = numeric(N)
pval_exp_powr = numeric(N)
# Generate data for N samples for each alpha level
while(norm_sample < N && iter < N * 100) {
# Sample from exponential distribution
x_exp = rexp(n, rate = 1)
iter = iter + 1
# Check for normality using the Shapiro-Wilk test
if(shapiro.test(x_exp)$p.value > alpha) {
norm_sample = norm_sample + 1
# Calculate p-values for null hypothesis (error rate) and alternative (power)
pval_exp_error[norm_sample] = t.test(x_exp - 1)$p.value
pval_exp_powr[norm_sample] = t.test(x_exp - 1 + d)$p.value
}
}
# Warn if the loop exited due to the iteration limit
if (norm_sample < N) {
warning(paste("Reached iteration limit for alpha level", alpha))
}
# Calculate FPR and TPR by averaging p-values below the threshold
FPR_exp[i] = mean(pval_exp_error[1:norm_sample] < alpha)
TPR_exp[i] = mean(pval_exp_powr[1:norm_sample] < alpha)
}
# Save the results to a file
save(FPR_exp, TPR_exp, file = "ROC_downstream.test.RData")
# Plot the ROC curves with smoothing
plot(FPR_exp, TPR_exp, type = "l", col = "blue", lwd = 2,
xlab = "False Positive Rate (FPR)", ylab = "True Positive Rate (TPR)",
main = "ROC Curve for Shapiro-Wilk Test with Exponential Distribution")
abline(a = 0, b = 1, lty = 2, col = "red")  # Diagonal reference line
# Add a legend
legend("bottomright", legend = c("Exponential"), col = "blue", lwd = 2)
# Parameters
N = as.integer(1e3)           # Number of repetitions for each alpha level to average TPR and FPR
n = 10                        # Sample size for each test
d = 0.5                       # Effect size
alpha.level = seq(0, 0.8, 0.1) # Range of significance levels for ROC curve
# Initialize vectors to store False Positive Rates (FPR) and True Positive Rates (TPR)
FPR_exp = TPR_exp = numeric(length(alpha.level))
# Loop over each significance level
for(i in seq_along(alpha.level)) {
alpha = alpha.level[i]
# Initialize counters for successful normal samples
norm_sample = 0
iter = 0
# Vectors to store p-values for each distribution per alpha level
pval_exp_error = numeric(N)
pval_exp_powr = numeric(N)
# Generate data for N samples for each alpha level
while(norm_sample < N && iter < N * 100) {
# Sample from exponential distribution
x_exp = rexp(n, rate = 1)
iter = iter + 1
# Check for normality using the Shapiro-Wilk test
if(shapiro.test(x_exp)$p.value > alpha) {
norm_sample = norm_sample + 1
# Calculate p-values for null hypothesis (error rate) and alternative (power)
pval_exp_error[norm_sample] = t.test(x_exp - 1)$p.value
pval_exp_powr[norm_sample] = t.test(x_exp - 1 + d)$p.value
}
}
# Warn if the loop exited due to the iteration limit
if (norm_sample < N) {
warning(paste("Reached iteration limit for alpha level", alpha))
}
# Calculate FPR and TPR by averaging p-values below the threshold
FPR_exp[i] = mean(pval_exp_error[1:norm_sample] < alpha)
TPR_exp[i] = mean(pval_exp_powr[1:norm_sample] < alpha)
}
# Save the results to a file
save(FPR_exp, TPR_exp, file = "ROC_downstream.test.RData")
# Plot the ROC curves with smoothing
plot(FPR_exp, TPR_exp, type = "l", col = "blue", lwd = 2,
xlab = "False Positive Rate (FPR)", ylab = "True Positive Rate (TPR)",
main = "ROC Curve for Shapiro-Wilk Test with Exponential Distribution")
abline(a = 0, b = 1, lty = 2, col = "red")  # Diagonal reference line
# Add a legend
legend("bottomright", legend = c("Exponential"), col = "blue", lwd = 2)
# Parameters
N = as.integer(1e3)           # Number of repetitions for each alpha level to average TPR and FPR
n = 10                        # Sample size for each test
d = 0.5                       # Effect size
alpha.level = seq(0, 0.1, 0.01) # Range of significance levels for ROC curve
# Initialize vectors to store False Positive Rates (FPR) and True Positive Rates (TPR)
FPR_exp = TPR_exp = numeric(length(alpha.level))
# Loop over each significance level
for(i in seq_along(alpha.level)) {
alpha = alpha.level[i]
# Initialize counters for successful normal samples
norm_sample = 0
iter = 0
# Vectors to store p-values for each distribution per alpha level
pval_exp_error = numeric(N)
pval_exp_powr = numeric(N)
# Generate data for N samples for each alpha level
while(norm_sample < N && iter < N * 100) {
# Sample from exponential distribution
x_exp = rexp(n, rate = 1)
iter = iter + 1
# Check for normality using the Shapiro-Wilk test
if(shapiro.test(x_exp)$p.value > alpha) {
norm_sample = norm_sample + 1
# Calculate p-values for null hypothesis (error rate) and alternative (power)
pval_exp_error[norm_sample] = t.test(x_exp - 1)$p.value
pval_exp_powr[norm_sample] = t.test(x_exp - 1 + d)$p.value
}
}
# Warn if the loop exited due to the iteration limit
if (norm_sample < N) {
warning(paste("Reached iteration limit for alpha level", alpha))
}
# Calculate FPR and TPR by averaging p-values below the threshold
FPR_exp[i] = mean(pval_exp_error[1:norm_sample] < alpha)
TPR_exp[i] = mean(pval_exp_powr[1:norm_sample] < alpha)
}
# Save the results to a file
save(FPR_exp, TPR_exp, file = "ROC_downstream.test.RData")
# Plot the ROC curves with smoothing
plot(FPR_exp, TPR_exp, type = "l", col = "blue", lwd = 2,
xlab = "False Positive Rate (FPR)", ylab = "True Positive Rate (TPR)",
main = "ROC Curve for Shapiro-Wilk Test with Exponential Distribution")
abline(a = 0, b = 1, lty = 2, col = "red")  # Diagonal reference line
# Add a legend
legend("bottomright", legend = c("Exponential"), col = "blue", lwd = 2)
# Parameters
N = as.integer(1e3)           # Number of repetitions for each alpha level to average TPR and FPR
n = 10                        # Sample size for each test
d = 0.5                       # Effect size
alpha.level = seq(0, 0.8, 0.01) # Range of significance levels for ROC curve
# Initialize vectors to store False Positive Rates (FPR) and True Positive Rates (TPR)
FPR_exp = TPR_exp = numeric(length(alpha.level))
# Loop over each significance level
for(i in seq_along(alpha.level)) {
alpha = alpha.level[i]
# Initialize counters for successful normal samples
norm_sample = 0
iter = 0
# Vectors to store p-values for each distribution per alpha level
pval_exp_error = numeric(N)
pval_exp_powr = numeric(N)
# Generate data for N samples for each alpha level
while(norm_sample < N && iter < N * 100) {
# Sample from exponential distribution
x_exp = rexp(n, rate = 1)
iter = iter + 1
# Check for normality using the Shapiro-Wilk test
if(shapiro.test(x_exp)$p.value > alpha) {
norm_sample = norm_sample + 1
# Calculate p-values for null hypothesis (error rate) and alternative (power)
pval_exp_error[norm_sample] = t.test(x_exp - 1)$p.value
pval_exp_powr[norm_sample] = t.test(x_exp - 1 + d)$p.value
}
}
# Warn if the loop exited due to the iteration limit
if (norm_sample < N) {
warning(paste("Reached iteration limit for alpha level", alpha))
}
# Calculate FPR and TPR by averaging p-values below the threshold
FPR_exp[i] = mean(pval_exp_error[1:norm_sample] < alpha)
TPR_exp[i] = mean(pval_exp_powr[1:norm_sample] < alpha)
}
# Save the results to a file
save(FPR_exp, TPR_exp, file = "ROC_downstream.test.RData")
# Plot the ROC curves with smoothing
plot(FPR_exp, TPR_exp, type = "l", col = "blue", lwd = 2,
xlab = "False Positive Rate (FPR)", ylab = "True Positive Rate (TPR)",
main = "ROC Curve for Shapiro-Wilk Test with Exponential Distribution")
abline(a = 0, b = 1, lty = 2, col = "red")  # Diagonal reference line
# Add a legend
legend("bottomright", legend = c("Exponential"), col = "blue", lwd = 2)
# Parameters
N = as.integer(1e3)           # Number of repetitions for each alpha level to average TPR and FPR
n = 10                        # Sample size for each test
d = 0.5                       # Effect size
alpha.level = seq(0, 0.8, 0.05) # Range of significance levels for ROC curve
# Initialize vectors to store False Positive Rates (FPR) and True Positive Rates (TPR)
FPR_exp = TPR_exp = numeric(length(alpha.level))
# Loop over each significance level
for(i in seq_along(alpha.level)) {
alpha = alpha.level[i]
# Initialize counters for successful normal samples
norm_sample = 0
iter = 0
# Vectors to store p-values for each distribution per alpha level
pval_exp_error = numeric(N)
pval_exp_powr = numeric(N)
# Generate data for N samples for each alpha level
while(norm_sample < N && iter < N * 100) {
# Sample from exponential distribution
x_exp = rexp(n, rate = 1)
iter = iter + 1
# Check for normality using the Shapiro-Wilk test
if(shapiro.test(x_exp)$p.value > alpha) {
norm_sample = norm_sample + 1
# Calculate p-values for null hypothesis (error rate) and alternative (power)
pval_exp_error[norm_sample] = t.test(x_exp - 1)$p.value
pval_exp_powr[norm_sample] = t.test(x_exp - 1 + d)$p.value
}
}
# Warn if the loop exited due to the iteration limit
if (norm_sample < N) {
warning(paste("Reached iteration limit for alpha level", alpha))
}
# Calculate FPR and TPR by averaging p-values below the threshold
FPR_exp[i] = mean(pval_exp_error[1:norm_sample] < alpha)
TPR_exp[i] = mean(pval_exp_powr[1:norm_sample] < alpha)
}
# Save the results to a file
save(FPR_exp, TPR_exp, file = "ROC_downstream.test.RData")
# Plot the ROC curves with smoothing
plot(FPR_exp, TPR_exp, type = "l", col = "blue", lwd = 2,
xlab = "False Positive Rate (FPR)", ylab = "True Positive Rate (TPR)",
main = "ROC Curve for Shapiro-Wilk Test with Exponential Distribution")
abline(a = 0, b = 1, lty = 2, col = "red")  # Diagonal reference line
# Add a legend
legend("bottomright", legend = c("Exponential"), col = "blue", lwd = 2)
