formula = as.formula(input$formula),
data = dataset(),
test = "SW",
alpha = 0.05,
normality_target = input$normality_target
)
} else {
x <- as.numeric(strsplit(input$xvals, ",")[[1]])
y <- as.numeric(strsplit(input$yvals, ",")[[1]])
result <- normality_check(
user_func(),
x = x,
y = y,
test = "SW",
alpha = 0.05,
normality_target = input$normality_target
)
}
output_string <- capture.output({
print(result$normality_result)
print(result$final_test_result)
})
result_output(paste(output_string, collapse = "\n"))
}, error = function(e) {
result_output(paste("Error during test execution:", e$message))
})
})
output$results <- renderText({
result_output()
})
}
shinyApp(ui, server)
library(shiny)
library(mblm)
`%||%` <- function(a, b) if (!is.null(a)) a else b
generate_tests <- function(data, test = "SW") {
if (test == "SW") {
return(shapiro.test(data))
} else {
stop("Only Shapiro-Wilk ('SW') supported in this app.")
}
}
load_user_test_function <- function(path) {
env <- new.env()
source(path, local = env)
fun_names <- ls(env)
return(env[[fun_names[1]]])
}
normality_check <- function(test_func, ..., data = NULL, test = "SW", alpha = 0.05, normality_target = NULL) {
args <- list(...)
if (!"data" %in% names(args) && !is.null(data)) args$data <- data
result <- do.call(test_func, args)
if (inherits(result, "lm")) {
normality_target <- "residuals"
} else if (is.null(normality_target)) {
stop("Normality target must be specified.")
}
valid_choices <- c("residuals", "x", "y", "diff", "both")
if (!normality_target %in% valid_choices) {
stop("Invalid normality target.")
}
normality_results <- switch(normality_target,
"residuals" = generate_tests(residuals(result), test),
"x" = generate_tests(args$x, test),
"y" = generate_tests(args$y, test),
"diff" = generate_tests(args$x - args$y, test),
"both" = list(
x_test = generate_tests(args$x, test),
y_test = generate_tests(args$y, test)
)
)
if (normality_target == "both") {
norm_ok <- normality_results$x_test$p.value > alpha &&
normality_results$y_test$p.value > alpha
} else {
norm_ok <- normality_results$p.value > alpha
}
if (norm_ok) {
test_result <- do.call(test_func, args)
} else {
if (!is.null(args$x) && !is.null(args$y)) {
test_result <- if (!is.null(args$paired) && args$paired) {
wilcox.test(args$x, args$y, paired = TRUE)
} else {
wilcox.test(args$x, args$y)
}
} else if (!is.null(args$x)) {
test_result <- wilcox.test(args$x, mu = args$mu %||% 0)
} else if (!is.null(args$formula) && !is.null(args$data)) {
test_result <- mblm::mblm(args$formula, data = args$data)
} else {
stop("Cannot determine nonparametric alternative.")
}
}
list(normality_result = normality_results, final_test_result = test_result)
}
# UI
ui <- fluidPage(
titlePanel("Normality Check Shiny App"),
sidebarLayout(
sidebarPanel(
fileInput("func_file", "Upload Test Function"),
fileInput("data_file", "Upload Dataset (CSV or RDS)"),
actionButton("load_data", "Load Uploaded Data"),
selectInput("input_type", "Select Test Type", choices = c("Linear Model", "T-test")),
conditionalPanel(
condition = "input.input_type == 'Linear Model'",
textInput("formula", "Model Formula", "y ~ x1 + x2")
),
conditionalPanel(
condition = "input.input_type == 'T-test'",
textInput("xvals", "x (comma separated)", "1,2,3,4,5"),
textInput("yvals", "y (comma separated)", "2,3,4,5,6")
),
selectInput("normality_target", "Normality Target", choices = c("residuals", "x", "y", "diff", "both")),
actionButton("run", "Run Normality Check")
),
mainPanel(
verbatimTextOutput("results")
)
)
)
# Server
server <- function(input, output, session) {
user_func <- reactiveVal(NULL)
dataset <- reactiveVal(data.frame())
result_output <- reactiveVal("")
observeEvent(input$func_file, {
req(input$func_file)
tryCatch({
user_func(load_user_test_function(input$func_file$datapath))
result_output("Function loaded successfully.")
}, error = function(e) {
result_output(paste("Error loading function:", e$message))
})
})
observeEvent(input$load_data, {
req(input$data_file)
tryCatch({
ext <- tools::file_ext(input$data_file$name)
data <- if (ext == "csv") {
read.csv(input$data_file$datapath)
} else if (ext == "rds") {
readRDS(input$data_file$datapath)
} else {
stop("Unsupported file type.")
}
dataset(data)
result_output("Dataset loaded successfully.")
}, error = function(e) {
result_output(paste("Error loading dataset:", e$message))
})
})
observeEvent(input$run, {
req(user_func())
tryCatch({
if (input$input_type == "Linear Model") {
req(input$formula, dataset())
result <- normality_check(
user_func(),
formula = as.formula(input$formula),
data = dataset(),
test = "SW",
alpha = 0.05,
normality_target = input$normality_target
)
} else {
x <- as.numeric(strsplit(input$xvals, ",")[[1]])
y <- as.numeric(strsplit(input$yvals, ",")[[1]])
result <- normality_check(
user_func(),
x = x,
y = y,
test = "SW",
alpha = 0.05,
normality_target = input$normality_target
)
}
output_string <- capture.output({
print(result$normality_result)
print(result$final_test_result)
})
result_output(paste(output_string, collapse = "\n"))
}, error = function(e) {
result_output(paste("Error during test execution:", e$message))
})
})
output$results <- renderText({
result_output()
})
}
shinyApp(ui, server)
library(shiny)
library(mblm)
`%||%` <- function(a, b) if (!is.null(a)) a else b
generate_tests <- function(data, test = "SW") {
if (test == "SW") {
return(shapiro.test(data))
} else {
stop("Only Shapiro-Wilk ('SW') supported in this app.")
}
}
load_user_test_function <- function(path) {
env <- new.env()
source(path, local = env)
fun_names <- ls(env)
return(env[[fun_names[1]]])
}
normality_check <- function(test_func, ..., data = NULL, test = "SW", alpha = 0.05, normality_target = NULL) {
args <- list(...)
if (!"data" %in% names(args) && !is.null(data)) args$data <- data
result <- do.call(test_func, args)
if (inherits(result, "lm")) {
normality_target <- "residuals"
} else if (is.null(normality_target)) {
stop("Normality target must be specified.")
}
valid_choices <- c("residuals", "x", "y", "diff", "both")
if (!normality_target %in% valid_choices) {
stop("Invalid normality target.")
}
normality_results <- switch(normality_target,
"residuals" = generate_tests(residuals(result), test),
"x" = generate_tests(args$x, test),
"y" = generate_tests(args$y, test),
"diff" = generate_tests(args$x - args$y, test),
"both" = list(
x_test = generate_tests(args$x, test),
y_test = generate_tests(args$y, test)
)
)
if (normality_target == "both") {
norm_ok <- normality_results$x_test$p.value > alpha &&
normality_results$y_test$p.value > alpha
} else {
norm_ok <- normality_results$p.value > alpha
}
if (norm_ok) {
test_result <- do.call(test_func, args)
} else {
if (!is.null(args$x) && !is.null(args$y)) {
test_result <- if (!is.null(args$paired) && args$paired) {
wilcox.test(args$x, args$y, paired = TRUE)
} else {
wilcox.test(args$x, args$y)
}
} else if (!is.null(args$x)) {
test_result <- wilcox.test(args$x, mu = args$mu %||% 0)
} else if (!is.null(args$formula) && !is.null(args$data)) {
test_result <- mblm::mblm(args$formula, data = args$data)
} else {
stop("Cannot determine nonparametric alternative.")
}
}
list(normality_result = normality_results, final_test_result = test_result)
}
# UI
ui <- fluidPage(
titlePanel("Normality Check Shiny App"),
sidebarLayout(
sidebarPanel(
fileInput("func_file", "Upload Test Function"),
fileInput("data_file", "Upload Dataset (CSV or RDS)"),
actionButton("load_data", "Load Uploaded Data"),
selectInput("input_type", "Select Test Type", choices = c("Linear Model", "T-test")),
conditionalPanel(
condition = "input.input_type == 'Linear Model'",
textInput("formula", "Model Formula", "y ~ x1 + x2")
),
conditionalPanel(
condition = "input.input_type == 'T-test'",
textInput("xvals", "x (comma separated)", "1,2,3,4,5"),
textInput("yvals", "y (comma separated)", "2,3,4,5,6")
),
selectInput("normality_target", "Normality Target", choices = c("residuals", "x", "y", "diff", "both")),
actionButton("run", "Run Normality Check")
),
mainPanel(
verbatimTextOutput("results")
)
)
)
# Server
server <- function(input, output, session) {
user_func <- reactiveVal(NULL)
dataset <- reactiveVal(data.frame())
result_output <- reactiveVal("")
observeEvent(input$func_file, {
req(input$func_file)
tryCatch({
user_func(load_user_test_function(input$func_file$datapath))
result_output("Function loaded successfully.")
}, error = function(e) {
result_output(paste("Error loading function:", e$message))
})
})
observeEvent(input$load_data, {
req(input$data_file)
tryCatch({
ext <- tools::file_ext(input$data_file$name)
data <- if (ext == "csv") {
read.csv(input$data_file$datapath)
} else if (ext == "rds") {
readRDS(input$data_file$datapath)
} else {
stop("Unsupported file type.")
}
dataset(data)
result_output("Dataset loaded successfully.")
}, error = function(e) {
result_output(paste("Error loading dataset:", e$message))
})
})
observeEvent(input$run, {
req(user_func())
tryCatch({
if (input$input_type == "Linear Model") {
req(input$formula, dataset())
result <- normality_check(
user_func(),
formula = as.formula(input$formula),
data = dataset(),
test = "SW",
alpha = 0.05,
normality_target = input$normality_target
)
} else {
x <- as.numeric(strsplit(input$xvals, ",")[[1]])
y <- as.numeric(strsplit(input$yvals, ",")[[1]])
result <- normality_check(
user_func(),
x = x,
y = y,
test = "SW",
alpha = 0.05,
normality_target = input$normality_target
)
}
output_string <- capture.output({
print(result$normality_result)
print(result$final_test_result)
})
result_output(paste(output_string, collapse = "\n"))
}, error = function(e) {
result_output(paste("Error during test execution:", e$message))
})
})
output$results <- renderText({
result_output()
})
}
shinyApp(ui, server)
library(shiny)
library(mblm)
`%||%` <- function(a, b) if (!is.null(a)) a else b
generate_tests <- function(data, test = "SW") {
if (test == "SW") {
return(shapiro.test(data))
} else {
stop("Only Shapiro-Wilk ('SW') supported in this app.")
}
}
load_user_test_function <- function(path) {
env <- new.env()
source(path, local = env)
fun_names <- ls(env)
return(env[[fun_names[1]]])
}
normality_check <- function(test_func, ..., data = NULL, test = "SW", alpha = 0.05, normality_target = NULL) {
args <- list(...)
if (!"data" %in% names(args) && !is.null(data)) args$data <- data
result <- do.call(test_func, args)
if (inherits(result, "lm")) {
normality_target <- "residuals"
} else if (is.null(normality_target)) {
stop("Normality target must be specified.")
}
valid_choices <- c("residuals", "x", "y", "diff", "both")
if (!normality_target %in% valid_choices) {
stop("Invalid normality target.")
}
normality_results <- switch(normality_target,
"residuals" = generate_tests(residuals(result), test),
"x" = generate_tests(args$x, test),
"y" = generate_tests(args$y, test),
"diff" = generate_tests(args$x - args$y, test),
"both" = list(
x_test = generate_tests(args$x, test),
y_test = generate_tests(args$y, test)
)
)
if (normality_target == "both") {
norm_ok <- normality_results$x_test$p.value > alpha &&
normality_results$y_test$p.value > alpha
} else {
norm_ok <- normality_results$p.value > alpha
}
if (norm_ok) {
test_result <- do.call(test_func, args)
} else {
if (!is.null(args$x) && !is.null(args$y)) {
test_result <- if (!is.null(args$paired) && args$paired) {
wilcox.test(args$x, args$y, paired = TRUE)
} else {
wilcox.test(args$x, args$y)
}
} else if (!is.null(args$x)) {
test_result <- wilcox.test(args$x, mu = args$mu %||% 0)
} else if (!is.null(args$formula) && !is.null(args$data)) {
test_result <- mblm::mblm(args$formula, data = args$data)
} else {
stop("Cannot determine nonparametric alternative.")
}
}
list(normality_result = normality_results, final_test_result = test_result)
}
# UI
ui <- fluidPage(
titlePanel("Normality Check Shiny App"),
sidebarLayout(
sidebarPanel(
fileInput("func_file", "Upload Test Function"),
fileInput("data_file", "Upload Dataset (CSV or RDS)"),
actionButton("load_data", "Load Uploaded Data"),
selectInput("input_type", "Select Test Type", choices = c("Linear Model", "T-test")),
conditionalPanel(
condition = "input.input_type == 'Linear Model'",
textInput("formula", "Model Formula", "y ~ x1 + x2")
),
conditionalPanel(
condition = "input.input_type == 'T-test'",
textInput("xvals", "x (comma separated)", "1,2,3,4,5"),
textInput("yvals", "y (comma separated)", "2,3,4,5,6")
),
selectInput("normality_target", "Normality Target", choices = c("residuals", "x", "y", "diff", "both")),
actionButton("run", "Run Normality Check")
),
mainPanel(
verbatimTextOutput("results")
)
)
)
# Server
server <- function(input, output, session) {
user_func <- reactiveVal(NULL)
dataset <- reactiveVal(data.frame())
result_output <- reactiveVal("")
observeEvent(input$func_file, {
req(input$func_file)
tryCatch({
user_func(load_user_test_function(input$func_file$datapath))
result_output("Function loaded successfully.")
}, error = function(e) {
result_output(paste("Error loading function:", e$message))
})
})
observeEvent(input$load_data, {
req(input$data_file)
tryCatch({
ext <- tools::file_ext(input$data_file$name)
data <- if (ext == "csv") {
read.csv(input$data_file$datapath)
} else if (ext == "rds") {
readRDS(input$data_file$datapath)
} else {
stop("Unsupported file type.")
}
dataset(data)
result_output("Dataset loaded successfully.")
}, error = function(e) {
result_output(paste("Error loading dataset:", e$message))
})
})
observeEvent(input$run, {
req(user_func())
tryCatch({
if (input$input_type == "Linear Model") {
req(input$formula, dataset())
result <- normality_check(
user_func(),
formula = as.formula(input$formula),
data = dataset(),
test = "SW",
alpha = 0.05,
normality_target = input$normality_target
)
} else {
x <- as.numeric(strsplit(input$xvals, ",")[[1]])
y <- as.numeric(strsplit(input$yvals, ",")[[1]])
result <- normality_check(
user_func(),
x = x,
y = y,
test = "SW",
alpha = 0.05,
normality_target = input$normality_target
)
}
output_string <- capture.output({
print(result$normality_result)
print(result$final_test_result)
})
result_output(paste(output_string, collapse = "\n"))
}, error = function(e) {
result_output(paste("Error during test execution:", e$message))
})
})
output$results <- renderText({
result_output()
})
}
shinyApp(ui, server)
