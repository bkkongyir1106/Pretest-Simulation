runApp('Shiny App/new app')
runApp('Shiny App/new app')
runApp('Shiny App/new app')
runApp('Shiny App/new app')
runApp('Shiny App/new app')
runApp('Shiny App/new app')
runApp('Shiny App/new app')
runApp('Shiny App/new app')
runApp('Shiny App/new app')
# Set parameters
p <- 0.25
q <- 1 - p
# Define function to compute exact probability using binomial pmf
exact_prob <- function(n, alpha) {
k <- alpha * n  # Ensure alpha * n is an integer
choose(n, k) * (p^k) * (q^(n-k))
}
# Define function for asymptotic approximation
asymptotic_prob <- function(n, alpha) {
gamma <- (p/alpha)^alpha * (q/(1-alpha))^(1-alpha)
(1 / sqrt(2 * pi * alpha * (1 - alpha) * n)) * (gamma^n)
}
# Define values of n (multiples of 4)
n_values <- seq(4, 200, by=4)
# Compute probabilities for Case (i) α = p and Case (ii) α = 0.5
alpha1 <- p  # Case (i)
alpha2 <- 0.5  # Case (ii)
exact1 <- sapply(n_values, exact_prob, alpha=alpha1)
asymp1 <- sapply(n_values, asymptotic_prob, alpha=alpha1)
exact2 <- sapply(n_values, exact_prob, alpha=alpha2)
asymp2 <- sapply(n_values, asymptotic_prob, alpha=alpha2)
# Plot results
par(mfrow=c(1,2))  # Split plot into two panels
plot(n_values, exact1, type="b", col="red", pch=16, ylim=c(0, max(exact1)),
xlab="n", ylab="Probability", main="Case (i): α = p")
lines(n_values, asymp1, type="b", col="blue", pch=16)
legend("topright", legend=c("Exact", "Asymptotic"), col=c("red", "blue"), pch=16)
plot(n_values, exact2, type="b", col="red", pch=16, ylim=c(0, max(exact2)),
xlab="n", ylab="Probability", main="Case (ii): α ≠ p")
lines(n_values, asymp2, type="b", col="blue", pch=16)
legend("topright", legend=c("Exact", "Asymptotic"), col=c("red", "blue"), pch=16)
# Find smallest n where probability < 0.001
n_threshold1 <- min(n_values[exact1 < 0.001])
n_threshold2 <- min(n_values[exact2 < 0.001])
cat("For α = p, P(Y_n = α) < 0.001 when n =", n_threshold1, "\n")
cat("For α ≠ p, P(Y_n = α) < 0.001 when n =", n_threshold2, "\n")
# Set parameters
p <- 0.25
q <- 1 - p
# Define function to compute exact probability using binomial pmf
exact_prob <- function(n, alpha) {
k <- alpha * n  # Ensure alpha * n is an integer
choose(n, k) * (p^k) * (q^(n-k))
}
# Define function for asymptotic approximation
asymptotic_prob <- function(n, alpha) {
gamma <- (p/alpha)^alpha * (q/(1-alpha))^(1-alpha)
(1 / sqrt(2 * pi * alpha * (1 - alpha) * n)) * (gamma^n)
}
# Define values of n (multiples of 4)
n_values <- seq(4, 200, by=4)
# Compute probabilities for Case (i) α = p and Case (ii) α = 0.5
alpha1 <- p  # Case (i)
alpha2 <- 0.5  # Case (ii)
exact1 <- sapply(n_values, exact_prob, alpha=alpha1)
asymp1 <- sapply(n_values, asymptotic_prob, alpha=alpha1)
exact2 <- sapply(n_values, exact_prob, alpha=alpha2)
asymp2 <- sapply(n_values, asymptotic_prob, alpha=alpha2)
# Plot results
par(mfrow=c(1,2))  # Split plot into two panels
plot(n_values, exact1, type="l", col="red", pch=16, ylim=c(0, max(exact1)),
xlab="n", ylab="Probability", main="Case (i): α = p")
lines(n_values, asymp1, type="l", col="blue", pch=16)
legend("topright", legend=c("Exact", "Asymptotic"), col=c("red", "blue"), pch=16)
plot(n_values, exact2, type="l", col="red", pch=16, ylim=c(0, max(exact2)),
xlab="n", ylab="Probability", main="Case (ii): α ≠ p")
lines(n_values, asymp2, type="l", col="blue", pch=16)
legend("topright", legend=c("Exact", "Asymptotic"), col=c("red", "blue"), pch=16)
# Find smallest n where probability < 0.001
n_threshold1 <- min(n_values[exact1 < 0.001])
n_threshold2 <- min(n_values[exact2 < 0.001])
cat("For α = p, P(Y_n = α) < 0.001 when n =", n_threshold1, "\n")
cat("For α ≠ p, P(Y_n = α) < 0.001 when n =", n_threshold2, "\n")
