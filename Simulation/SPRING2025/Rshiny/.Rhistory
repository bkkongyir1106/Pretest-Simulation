}
error    <- mean(error_pval < alpha)
power    <- mean(power_pval < alpha)
results <- list(error = error,
power = power)
}
# Organize Results in tables
datavec <- numeric(length(sample_size) * length(dist_sum))
Type1error <- Power <- array(datavec, dim = c(length(sample_size), length(dist_sum)), dimnames = list(sample_size, dist_sum))
for (t in seq_along(sample_size)) {
for (j in seq_along(dist_sum)) {
Type1error[t, j] <- (sim_out[[t]][[j]]$error)
Power[t, j] <- (sim_out[[t]][[j]]$power)
}
}
})
### Close Cluster
close_cluster(my_cl)
save(var_name = Power, file = "TwoSample.Uncond.power.RData")
save(var_name = Type1error, file = "TwoSample.Uncond.Type1error.RData")
# set up cores for parallel processing
par_set <- function(cores_reserve = 2)
{
cores = parallel::detectCores()
cores_use <- cores - cores_reserve
if(Sys.info()["sysname"] == "Windows"){
cl <- parallel::makeCluster(cores_use)
doParallel::registerDoParallel(cl)
}else{
cl <- snow::makeSOCKcluster(cores_use)
doSNOW::registerDoSNOW(cl)
}
foreach::getDoParWorkers()
return(cl)
}
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
# Cluster setup
{
my_cl <- par_set(cores_reserve = 2)
}
# perform simulation
system.time({
sim_out <- foreach(n = sample_size,
.packages = c("LaplacesDemon", "VGAM")) %:%
foreach(dist = dist_sum)%dopar%
{
set.seed(12345)
error_pval <- power_pval <- numeric(N)
for(i in 1: N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
if(shapiro.test(x)$p.value > alpha/2 & shapiro.test(y)$p.value > alpha/2)
{
error_pval[i] <- t.test(x)$p.value
power_pval[i] <- t.test(x + effect_size)$p.value
}else{
error_pval[i] <- wilcox.test(x)$p.value
power_pval[i] <- wilcox.test(x + effect_size)$p.value
}
}
error    <- mean(error_pval < alpha)
power    <- mean(power_pval < alpha)
results <- list(error = error,
power = power)
}
# Organize Results in tables
datavec <- numeric(length(sample_size) * length(dist_sum))
Type1error <- Power <- array(datavec, dim = c(length(sample_size), length(dist_sum)), dimnames = list(sample_size, dist_sum))
for (t in seq_along(sample_size)) {
for (j in seq_along(dist_sum)) {
Type1error[t, j] <- (sim_out[[t]][[j]]$error)
Power[t, j] <- (sim_out[[t]][[j]]$power)
}
}
})
### Close Cluster
close_cluster(my_cl)
save(var_name = Power, file = "TwoSample.2stage.power.RData")
save(var_name = Type1error, file = "TwoSample.2stage.Type1error.RData")
# set up cores for parallel processing
par_set <- function(cores_reserve = 2)
{
cores = parallel::detectCores()
cores_use <- cores - cores_reserve
if(Sys.info()["sysname"] == "Windows"){
cl <- parallel::makeCluster(cores_use)
doParallel::registerDoParallel(cl)
}else{
cl <- snow::makeSOCKcluster(cores_use)
doSNOW::registerDoSNOW(cl)
}
foreach::getDoParWorkers()
return(cl)
}
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
# Cluster setup
{
my_cl <- par_set(cores_reserve = 2)
}
# perform simulation
system.time({
sim_out <- foreach(n = sample_size,
.packages = c("LaplacesDemon", "VGAM")) %:%
foreach(dist = dist_sum)%dopar%
{
set.seed(12345)
error_pval <- power_pval <- numeric(N)
for(i in 1: N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
if(shapiro.test(x)$p.value > alpha/2 & shapiro.test(y)$p.value > alpha/2)
{
error_pval[i] <- t.test(x, y)$p.value
power_pval[i] <- t.test(x, y + effect_size)$p.value
}else{
error_pval[i] <- wilcox.test(x, y)$p.value
power_pval[i] <- wilcox.test(x, y + effect_size)$p.value
}
}
error    <- mean(error_pval < alpha)
power    <- mean(power_pval < alpha)
results <- list(error = error,
power = power)
}
# Organize Results in tables
datavec <- numeric(length(sample_size) * length(dist_sum))
Type1error <- Power <- array(datavec, dim = c(length(sample_size), length(dist_sum)), dimnames = list(sample_size, dist_sum))
for (t in seq_along(sample_size)) {
for (j in seq_along(dist_sum)) {
Type1error[t, j] <- (sim_out[[t]][[j]]$error)
Power[t, j] <- (sim_out[[t]][[j]]$power)
}
}
})
### Close Cluster
close_cluster(my_cl)
save(var_name = Power, file = "TwoSample.2stage.power.RData")
save(var_name = Type1error, file = "TwoSample.2stage.Type1error.RData")
# set up cores for parallel processing
par_set <- function(cores_reserve = 2)
{
cores = parallel::detectCores()
cores_use <- cores - cores_reserve
if(Sys.info()["sysname"] == "Windows"){
cl <- parallel::makeCluster(cores_use)
doParallel::registerDoParallel(cl)
}else{
cl <- snow::makeSOCKcluster(cores_use)
doSNOW::registerDoSNOW(cl)
}
foreach::getDoParWorkers()
return(cl)
}
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
# Cluster setup
{
my_cl <- par_set(cores_reserve = 2)
}
# perform simulation
system.time({
sim_out <- foreach(n = sample_size,
.packages = c("LaplacesDemon", "VGAM")) %:%
foreach(dist = dist_sum) %dopar%
{
set.seed(12345)
error_pval <- power_pval <- numeric(N)
SamplePast = 0
TotalSim = 0
while (SamplePast < N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
TotalSim = TotalSim + 1
if(shapiro.test(x)$p.value > alpha/2 & shapiro.test(y)$p.value > alpha/2)
{
SamplePast = SamplePast + 1
error_pval[SamplePast] <- t.test(x, y)$p.value
power_pval[SamplePast] <- t.test(x, y + effect_size)$p.value
}
}
error    <- mean(error_pval < alpha)
power    <- mean(power_pval < alpha)
results <- list(error = error,
power = power)
}
# Organize Results in tables
datavec <- numeric(length(sample_size) * length(dist_sum))
Type1error <- Power <- array(datavec, dim = c(length(sample_size), length(dist_sum)), dimnames = list(sample_size, dist_sum))
for (t in seq_along(sample_size)) {
for (j in seq_along(dist_sum)) {
Type1error[t, j] <- (sim_out[[t]][[j]]$error)
Power[t, j] <- (sim_out[[t]][[j]]$power)
}
}
})
### Close Cluster
close_cluster(my_cl)
save(var_name = Power, file = "TwoSample.cond.power.RData")
save(var_name = Type1error, file = "TwoSample.cond.Type1error.RData")
Type1error
Power
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/OneSample.2stage.power.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/OneSample.Uncond.Type1error.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/OneSample.cond.Type1error.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/OneSample.2stage.Type1error.RData")
# Load the data
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/OneSample.cond.Type1error.RData")
oneSample_cond <- data.frame(One.Sample.Conditional.TypeI.error)
# Load the data
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/OneSample.cond.Type1error.RData")
oneSample_cond <- data.frame(Type1error)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/OneSample.2stage.Type1error.RData")
oneSample2stage <- data.frame(Type1error)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/OneSample.Uncond.Type1error.RData")
oneSampleUncond <- data.frame(Type1error)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/Error/data_splitting.RData")
data_splitting <- data.frame(type_I_error_data_splitting)
# Process each dataframe into long format with method
process_df <- function(df, method_name) {
df %>%
rownames_to_column("SampleSize") %>%
mutate(SampleSize = as.numeric(SampleSize)) %>%
pivot_longer(cols = -SampleSize, names_to = "Distribution", values_to = "Value") %>%
mutate(Method = method_name)
}
# Process all dataframes
oneSample_cond_long <- process_df(oneSample_cond, "Conditional")
oneSample2stage_long <- process_df(oneSample2stage, "Two-stage")
twoSample_cond_long <- process_df(oneSampleUncond, "Unconditional")
data_splitting_long <- process_df(data_splitting, "data_splitting")
# Combine data
combined_data <- bind_rows(oneSample_cond_long, oneSample2stage_long, twoSample_cond_long, data_splitting_long)
# Filter for target distributions
selected_distributions <- c("Normal", "Exponential", "Chi.Square", "LogNormal")
combined_filtered <- combined_data %>%
filter(Distribution %in% selected_distributions)
# Create the plot
ggplot(combined_filtered, aes(x = SampleSize, y = Value, color = Method)) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black", linewidth = 0.7) +  # Add reference line
geom_point(size = 2) +
geom_line(linewidth = 0.8) +
facet_wrap(~Distribution, ncol = 2) +
theme_bw() +
labs(x = "Sample Size", y = "Type I Error Rate", color = "Method") +
scale_x_continuous(breaks = c(8, 10, 15, 20, 25, 30)) +
theme(legend.position = "bottom",
strip.background = element_rect(fill = "lightgrey"),
strip.text = element_text(face = "bold"))
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/TwoSample.Uncond.Type1error.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/TwoSample.cond.Type1error.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/TwoSample.2stage.Type1error.RData")
# Load the data
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/TwoSample.cond.Type1error.RData")
twoSample_cond <- data.frame(Type1error)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/TwoSample.2stage.Type1error.RData")
twoSample2stage <- data.frame(Type1error)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/TwoSample.Uncond.Type1error.RData")
twoSampleUncond <- data.frame(Type1error)
# Process each dataframe into long format with method
process_df <- function(df, method_name) {
df %>%
rownames_to_column("SampleSize") %>%
mutate(SampleSize = as.numeric(SampleSize)) %>%
pivot_longer(cols = -SampleSize, names_to = "Distribution", values_to = "Value") %>%
mutate(Method = method_name)
}
# Process all dataframes
twoSample_cond_long <- process_df(twoSample_cond, "Conditional")
twoSample2stage_long <- process_df(twoSample2stage, "Two-stage")
twoSampleUncond_long <- process_df(twoSampleUncond, "Unconditional")
# Combine data
combined_data <- bind_rows(twoSample_cond_long, twoSample2stage_long, twoSampleUncond_long)
# Filter for target distributions
selected_distributions <- c("Normal", "Exponential", "Chi.Square", "LogNormal")
combined_filtered <- combined_data %>%
filter(Distribution %in% selected_distributions)
# Create the plot
ggplot(combined_filtered, aes(x = SampleSize, y = Value, color = Method)) +
geom_point(size = 2) +
geom_line(linewidth = 0.8) +
facet_wrap(~Distribution, ncol = 2) +
theme_bw() +
labs(x = "Sample Size", y = "Type I Error Rate", color = "Method") +
scale_x_continuous(breaks = c(8, 10, 15, 20, 25, 30)) +
theme(legend.position = "bottom",
strip.background = element_rect(fill = "lightgrey"),
strip.text = element_text(face = "bold"))
# Load the data
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/TwoSample.cond.Type1error.RData")
twoSample_cond <- data.frame(Type1error)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/TwoSample.2stage.Type1error.RData")
twoSample2stage <- data.frame(Type1error)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/TwoSample.Uncond.Type1error.RData")
twoSampleUncond <- data.frame(Type1error)
# Process each dataframe into long format with method
process_df <- function(df, method_name) {
df %>%
rownames_to_column("SampleSize") %>%
mutate(SampleSize = as.numeric(SampleSize)) %>%
pivot_longer(cols = -SampleSize, names_to = "Distribution", values_to = "Value") %>%
mutate(Method = method_name)
}
# Process all dataframes
twoSample_cond_long <- process_df(twoSample_cond, "Conditional")
twoSample2stage_long <- process_df(twoSample2stage, "Two-stage")
twoSampleUncond_long <- process_df(twoSampleUncond, "Unconditional")
# Combine data
combined_data <- bind_rows(twoSample_cond_long, twoSample2stage_long, twoSampleUncond_long)
# Filter for target distributions
selected_distributions <- c("Normal", "Exponential", "Chi.Square", "LogNormal")
combined_filtered <- combined_data %>%
filter(Distribution %in% selected_distributions)
# Create the plot
ggplot(combined_filtered, aes(x = SampleSize, y = Value, color = Method)) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black", linewidth = 0.7) +  # Add reference line
geom_point(size = 2) +
geom_line(linewidth = 0.8) +
facet_wrap(~Distribution, ncol = 2) +
theme_bw() +
labs(x = "Sample Size", y = "Type I Error Rate", color = "Method") +
scale_x_continuous(breaks = c(8, 10, 15, 20, 25, 30)) +
theme(legend.position = "bottom",
strip.background = element_rect(fill = "lightgrey"),
strip.text = element_text(face = "bold"))
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/OneSample.2stage.power.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/OneSample.cond.power.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/OneSample.Uncond.power.RData")
# Load the data
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/OneSample.cond.power.RData")
oneSample_cond <- data.frame(Power)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/OneSample.2stage.power.RData")
oneSample2stage <- data.frame(Power)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/OneSample.Uncond.power.RData")
oneSampleUncond <- data.frame(Power)
# load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/Error/data_splitting.RData")
# data_splitting <- data.frame(type_I_error_data_splitting)
# Process each dataframe into long format with method
process_df <- function(df, method_name) {
df %>%
rownames_to_column("SampleSize") %>%
mutate(SampleSize = as.numeric(SampleSize)) %>%
pivot_longer(cols = -SampleSize, names_to = "Distribution", values_to = "Value") %>%
mutate(Method = method_name)
}
# Process all dataframes
oneSample_cond_long <- process_df(oneSample_cond, "Conditional")
oneSample2stage_long <- process_df(oneSample2stage, "Two-stage")
twoSample_cond_long <- process_df(oneSampleUncond, "Unconditional")
#data_splitting_long <- process_df(data_splitting, "data_splitting")
# Combine data
combined_data <- bind_rows(oneSample_cond_long, oneSample2stage_long, twoSample_cond_long)
# Filter for target distributions
selected_distributions <- c("Normal", "Exponential", "Chi.Square", "LogNormal")
combined_filtered <- combined_data %>%
filter(Distribution %in% selected_distributions)
# Create the plot
ggplot(combined_filtered, aes(x = SampleSize, y = Value, color = Method)) +
geom_point(size = 2) +
geom_line(linewidth = 0.8) +
facet_wrap(~Distribution, ncol = 2) +
theme_bw() +
labs(x = "Sample Size", y = "Power", color = "Method") +
scale_x_continuous(breaks = c(8, 10, 15, 20, 25, 30)) +
theme(legend.position = "bottom",
strip.background = element_rect(fill = "lightgrey"),
strip.text = element_text(face = "bold"))
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/TwoSample.2stage.power.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/TwoSample.cond.power.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/TwoSample.Uncond.power.RData")
# Load the data
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/TwoSample.cond.power.RData")
twoSample_cond <- data.frame(Power)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/TwoSample.2stage.power.RData")
twoSample2stage <- data.frame(Power)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/tests/TwoSample.Uncond.power.RData")
twoSampleUncond <- data.frame(Power)
# Process each dataframe into long format with method
process_df <- function(df, method_name) {
df %>%
rownames_to_column("SampleSize") %>%
mutate(SampleSize = as.numeric(SampleSize)) %>%
pivot_longer(cols = -SampleSize, names_to = "Distribution", values_to = "Value") %>%
mutate(Method = method_name)
}
# Process all dataframes
twoSample_cond_long <- process_df(twoSample_cond, "Conditional")
twoSample2stage_long <- process_df(twoSample2stage, "Two-stage")
twoSampleUncond_long <- process_df(twoSampleUncond, "Unconditional")
# Combine data
combined_data <- bind_rows(twoSample_cond_long, twoSample2stage_long, twoSampleUncond_long)
# Filter for target distributions
selected_distributions <- c("Normal", "Exponential", "Chi.Square", "LogNormal")
combined_filtered <- combined_data %>%
filter(Distribution %in% selected_distributions)
# Create the plot
ggplot(combined_filtered, aes(x = SampleSize, y = Value, color = Method)) +
geom_point(size = 2) +
geom_line(linewidth = 0.8) +
facet_wrap(~Distribution, ncol = 2) +
theme_bw() +
labs(x = "Sample Size", y = "Power", color = "Method") +
scale_x_continuous(breaks = c(8, 10, 15, 20, 25, 30)) +
theme(legend.position = "bottom",
strip.background = element_rect(fill = "lightgrey"),
strip.text = element_text(face = "bold"))
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/data_splitting.RData")
# -------------------- Prepare Data for Plotting ------------------------
# ------ Parameters ------
alpha <- 0.05  # Define alpha for reference line
distributions <- c("Exponential", "LogNormal")  # Target distributions
sample_size <- c(8, 10, 15, 20, 25, 30)
# ------ Data Preparation ------
create_df <- function(matrix, method_name) {
as.data.frame(matrix) %>%
rownames_to_column("SampleSize") %>%
pivot_longer(-SampleSize, names_to = "Distribution", values_to = "ErrorRate") %>%
mutate(
SampleSize = as.numeric(SampleSize),
Method = method_name
) %>%
filter(Distribution %in% distributions)  # Filter early for efficiency
}
combined_df <- bind_rows(
create_df(type_I_error_data_splitting, "Data Splitting"),
create_df(type_I_error_two_stage, "Two-Stage")
)
ggplot(combined_df, aes(x = SampleSize, y = ErrorRate, color = Method)) +
geom_line(linewidth = 0.8) +
geom_point(size = 2) +
facet_wrap(~ Distribution, ncol = 3, scales = "free_y") +  # Allow different y-axis scales
geom_hline(yintercept = alpha, linetype = "dashed", color = "darkred") +
scale_x_continuous(breaks = sample_size) +
labs(
title = "Comparison of Conditional Type I Error Rates",
x = "Sample Size",
y = "Type I Error Rate",
color = "Method"
) +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom"
)
# --------------------Addressing Selection Effects ------------------
# -------------------- Conditional Type I error -------------------------------
# -------------------------------------------------------------------
# Set simulation parameters
set.seed(12345)
distributions <- c("Normal","Exponential","Chi-Square", "LogNormal")
sample_size <- c(8, 10, 15, 20, 25, 30)
N_sim <- 1e4
alpha <- 0.05
# Initialize matrices to store results
initialize_matrix <- function(sample_size, distributions) {
matrix(nrow = length(sample_size), ncol = length(distributions),
dimnames = list(sample_size, distributions))
}
twosample.type_I_error_data_splitting <- initialize_matrix(sample_size, distributions)
twosample.type_I_error_two_stage <- initialize_matrix(sample_size, distributions)
# -------------------- Data Splitting Procedure -------------------------
for (j in seq_along(distributions)) {
for (i in seq_along(sample_size)) {
dist <- distributions[j]
n <- sample_size[i]
pvals <- numeric(N_sim)
count <- 0
iter <- 0
while (count < N_sim) {
iter <- iter + 1
x <- generate_data(n, dist)
y <- generate_data(n, dist)
split_point <- floor(n/2)
# First stage: Shapiro test on first half
if (shapiro.test(x[1:split_point])$p.value > alpha & shapiro.test(y[1:split_point])$p.value > alpha) {
count <- count + 1
# Second stage: t-test on second half
pvals[count] <- t.test(x[(split_point+1):n],y[(split_point+1):n] )$p.value
}
}
twosample.type_I_error_data_splitting[i, j] <- mean(pvals < alpha)
}
}
# -------------------- Two-Stage Procedure ------------------------------
for (j in seq_along(distributions)) {
for (i in seq_along(sample_size)) {
dist <- distributions[j]
n <- sample_size[i]
pvals <- numeric(N_sim)
count <- 0
iter <- 0
while (count < N_sim) {
iter <- iter + 1
x <- generate_data(n, dist)
y <- generate_data(n, dist)
# First stage: Shapiro test on full data
if (shapiro.test(x)$p.value > alpha & shapiro.test(y)$p.value > alpha) {
count <- count + 1
# Second stage: t-test on full data
pvals[count] <- t.test(x, y)$p.value
}
}
twosample.type_I_error_two_stage[i, j] <- mean(pvals < alpha)
}
}
twosample.type_I_error_data_splitting
twosample.type_I_error_two_stage
