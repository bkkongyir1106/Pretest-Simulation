theme_minimal() +
theme(legend.position = "bottom")
# Combine the plots vertically
combined_plot <- conditional_typeI_plot / typeI_plot / power_plot +
plot_layout(heights = c(1, 2, 1))  # Adjust heights as needed
# Display the combined plot
print(combined_plot)
# ===================== plots =================================================
# Load the datasets
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/onesample/one_sample.compare_methods.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/onesample/sw.test.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/onesample/one_sample.conditional.RData")
typeI_data <- data.frame(
sample_size = sample_size,
Exp_t = TypeIerror.t.test[, "Exponential"],
Exp_split = TypeIerror.split.test[, "Exponential"],
Exp_boot = TypeIerror.boot.test[, "Exponential"],
Exp_t_boot = TypeIerror.t_boot.test[, "Exponential"],
LogNorm_t = TypeIerror.t.test[, "LogNormal"],
LogNorm_split = TypeIerror.split.test[, "LogNormal"],
LogNorm_boot = TypeIerror.boot.test[, "LogNormal"],
LogNorm_t_boot = TypeIerror.t_boot.test[, "LogNormal"]
)
# Reshape the data for plotting
typeI_long <- typeI_data %>%
pivot_longer(
cols = starts_with("Exp_") | starts_with("LogNorm_"),
names_to = "test_method",
values_to = "typeI_error"
) %>%
mutate(
distribution = ifelse(grepl("^Exp_", test_method), "Exponential", "LogNormal"),
test_method = gsub("^Exp_|^LogNorm_", "", test_method)
)
# Combine power data into a data frame
power_data <- data.frame(
sample_size = sample_size,
Exponential = power_norm.test[, "Exponential"],
LogNormal = power_norm.test[, "LogNormal"]
)
# Reshape the power data for plotting
power_long <- power_data %>%
pivot_longer(
cols = c(Exponential, LogNormal),
names_to = "distribution",
values_to = "power"
)
# Combine power data into a data frame
conditional_typeI_df <- data.frame(
sample_size = sample_size,
Exponential = conditional.TypeIerror[, "Exponential"],
LogNormal = conditional.TypeIerror[, "LogNormal"]
)
# Reshape the power data for plotting
conditional_typeI_long <- conditional_typeI_df %>%
pivot_longer(
cols = c(Exponential, LogNormal),
names_to = "distribution",
values_to = "conditional_typeI_error"
)
# Plot conditional Type I error rates for Exponential and LogNormal
conditional_typeI_plot <- ggplot(conditional_typeI_long, aes(x = sample_size, y = conditional_typeI_error, color = distribution)) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black", linewidth = 0.7) +
geom_line(size = 1) +
geom_point(size = 2) +
ylim(0, 0.5) +
facet_wrap(~distribution, scales = "free_y") +
labs(
x = "Sample Size",
y = "Type I error",
title = "Conditional Type I error",
color = "Distribution"
) +
theme_minimal() +
theme(legend.position = "bottom")
# Plot Type I error rates for all test methods in the same plot for each distribution
typeI_plot <- ggplot(typeI_long, aes(x = sample_size, y = typeI_error, color = test_method)) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black", linewidth = 0.7) +
geom_line(size = 1) +
geom_point(size = 2) +
ylim(0, 0.2) +
facet_wrap(~distribution, scales = "free_y") +
labs(
x = "Sample Size",
y = "Type I Error Rate",
title = "Type I Error Rates by Test Method and Distribution",
color = "Test Method"
) +
theme_minimal() +
theme(legend.position = "bottom")
# Plot power of the Shapiro-Wilk test for each distribution
power_plot <- ggplot(power_long, aes(x = sample_size, y = power, color = distribution)) +
geom_line(size = 1) +
geom_point(size = 2) +
facet_wrap(~distribution, scales = "free_y") +
labs(
x = "Sample Size",
y = "Power of SW Test",
title = "Power of Shapiro-Wilk Test by Distribution",
color = "Distribution"
) +
theme_minimal() +
theme(legend.position = "bottom")
# Combine the plots vertically
combined_plot <- conditional_typeI_plot / typeI_plot / power_plot +
plot_layout(heights = c(1, 2, 1))  # Adjust heights as needed
# Display the combined plot
print(combined_plot)
# ===================== plots =================================================
# Load the datasets
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/onesample/one_sample.compare_methods.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/onesample/sw.test.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/onesample/one_sample.conditional.RData")
typeI_data <- data.frame(
sample_size = sample_size,
Exp_t = TypeIerror.t.test[, "Exponential"],
Exp_split = TypeIerror.split.test[, "Exponential"],
Exp_boot = TypeIerror.boot.test[, "Exponential"],
Exp_t_boot = TypeIerror.t_boot.test[, "Exponential"],
LogNorm_t = TypeIerror.t.test[, "LogNormal"],
LogNorm_split = TypeIerror.split.test[, "LogNormal"],
LogNorm_boot = TypeIerror.boot.test[, "LogNormal"],
LogNorm_t_boot = TypeIerror.t_boot.test[, "LogNormal"]
)
# Reshape the data for plotting
typeI_long <- typeI_data %>%
pivot_longer(
cols = starts_with("Exp_") | starts_with("LogNorm_"),
names_to = "test_method",
values_to = "typeI_error"
) %>%
mutate(
distribution = ifelse(grepl("^Exp_", test_method), "Exponential", "LogNormal"),
test_method = gsub("^Exp_|^LogNorm_", "", test_method)
)
# Combine power data into a data frame
power_data <- data.frame(
sample_size = sample_size,
Exponential = power_norm.test[, "Exponential"],
LogNormal = power_norm.test[, "LogNormal"]
)
# Reshape the power data for plotting
power_long <- power_data %>%
pivot_longer(
cols = c(Exponential, LogNormal),
names_to = "distribution",
values_to = "power"
)
# Combine power data into a data frame
conditional_typeI_df <- data.frame(
sample_size = sample_size,
Exponential = conditional.TypeIerror[, "Exponential"],
LogNormal = conditional.TypeIerror[, "LogNormal"]
)
# Reshape the power data for plotting
conditional_typeI_long <- conditional_typeI_df %>%
pivot_longer(
cols = c(Exponential, LogNormal),
names_to = "distribution",
values_to = "conditional_typeI_error"
)
# Plot conditional Type I error rates for Exponential and LogNormal
conditional_typeI_plot <- ggplot(conditional_typeI_long, aes(x = sample_size, y = conditional_typeI_error, color = distribution)) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black", linewidth = 0.7) +
geom_line(size = 1) +
geom_point(size = 2) +
ylim(0, 0.5) +
facet_wrap(~distribution, scales = "free_y") +
labs(
x = "Sample Size",
y = "Type I error",
title = "Conditional Type I error",
color = "Distribution"
) +
theme_minimal() +
theme(legend.position = "bottom")
# Plot Type I error rates for all test methods in the same plot for each distribution
typeI_plot <- ggplot(typeI_long, aes(x = sample_size, y = typeI_error, color = test_method)) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black", linewidth = 0.7) +
geom_line(size = 1) +
geom_point(size = 2) +
ylim(0, 0.2) +
facet_wrap(~distribution, scales = "free_y") +
labs(
x = "Sample Size",
y = "Type I Error Rate",
title = "Type I Error Rates by Test Method and Distribution",
color = "Test Method"
) +
theme_minimal() +
theme(legend.position = "bottom")
# Plot power of the Shapiro-Wilk test for each distribution
power_plot <- ggplot(power_long, aes(x = sample_size, y = power, color = distribution)) +
geom_line(size = 1) +
geom_point(size = 2) +
facet_wrap(~distribution, scales = "free_y") +
labs(
x = "Sample Size",
y = "Power of SW Test",
title = "Power of Shapiro-Wilk Test by Distribution",
color = "Distribution"
) +
theme_minimal() +
theme(legend.position = "bottom")
# Combine the plots vertically
combined_plot <- conditional_typeI_plot / typeI_plot / power_plot +
plot_layout(heights = c(1, 2, 1))  # Adjust heights as needed
# Display the combined plot
print(combined_plot)
# ===================== plots =================================================
# Load the datasets
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/onesample/one_sample.compare_methods.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/onesample/sw.test.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/onesample/one_sample.conditional.RData")
typeI_data <- data.frame(
sample_size = sample_size,
Exp_t = TypeIerror.t.test[, "Exponential"],
Exp_split = TypeIerror.split.test[, "Exponential"],
Exp_boot = TypeIerror.boot.test[, "Exponential"],
Exp_t_boot = TypeIerror.t_boot.test[, "Exponential"],
LogNorm_t = TypeIerror.t.test[, "LogNormal"],
LogNorm_split = TypeIerror.split.test[, "LogNormal"],
LogNorm_boot = TypeIerror.boot.test[, "LogNormal"],
LogNorm_t_boot = TypeIerror.t_boot.test[, "LogNormal"]
)
# Reshape the data for plotting
typeI_long <- typeI_data %>%
pivot_longer(
cols = starts_with("Exp_") | starts_with("LogNorm_"),
names_to = "test_method",
values_to = "typeI_error"
) %>%
mutate(
distribution = ifelse(grepl("^Exp_", test_method), "Exponential", "LogNormal"),
test_method = gsub("^Exp_|^LogNorm_", "", test_method)
)
# Combine power data into a data frame
power_data <- data.frame(
sample_size = sample_size,
Exponential = power_norm.test[, "Exponential"],
LogNormal = power_norm.test[, "LogNormal"]
)
# Reshape the power data for plotting
power_long <- power_data %>%
pivot_longer(
cols = c(Exponential, LogNormal),
names_to = "distribution",
values_to = "power"
)
# Combine power data into a data frame
conditional_typeI_df <- data.frame(
sample_size = sample_size,
Exponential = conditional.TypeIerror[, "Exponential"],
LogNormal = conditional.TypeIerror[, "LogNormal"]
)
# Reshape the power data for plotting
conditional_typeI_long <- conditional_typeI_df %>%
pivot_longer(
cols = c(Exponential, LogNormal),
names_to = "distribution",
values_to = "conditional_typeI_error"
)
# Plot conditional Type I error rates for Exponential and LogNormal
conditional_typeI_plot <- ggplot(conditional_typeI_long, aes(x = sample_size, y = conditional_typeI_error, color = distribution)) +
#geom_hline(yintercept = 0.05, linetype = "dashed", color = "black", linewidth = 0.7) +
geom_line(size = 1) +
geom_point(size = 2) +
#ylim(0, 0.5) +
facet_wrap(~distribution, scales = "free_y") +
labs(
x = "Sample Size",
y = "Type I error",
title = "Conditional Type I error",
color = "Distribution"
) +
theme_minimal() +
theme(legend.position = "bottom")
# Plot Type I error rates for all test methods in the same plot for each distribution
typeI_plot <- ggplot(typeI_long, aes(x = sample_size, y = typeI_error, color = test_method)) +
#geom_hline(yintercept = 0.05, linetype = "dashed", color = "black", linewidth = 0.7) +
geom_line(size = 1) +
geom_point(size = 2) +
#ylim(0, 0.2) +
facet_wrap(~distribution, scales = "free_y") +
labs(
x = "Sample Size",
y = "Type I Error Rate",
title = "Type I Error Rates by Test Method and Distribution",
color = "Test Method"
) +
theme_minimal() +
theme(legend.position = "bottom")
# Plot power of the Shapiro-Wilk test for each distribution
power_plot <- ggplot(power_long, aes(x = sample_size, y = power, color = distribution)) +
geom_line(size = 1) +
geom_point(size = 2) +
facet_wrap(~distribution, scales = "free_y") +
labs(
x = "Sample Size",
y = "Power of SW Test",
title = "Power of Shapiro-Wilk Test by Distribution",
color = "Distribution"
) +
theme_minimal() +
theme(legend.position = "bottom")
# Combine the plots vertically
combined_plot <- conditional_typeI_plot / typeI_plot / power_plot +
plot_layout(heights = c(1, 2, 1))  # Adjust heights as needed
# Display the combined plot
print(combined_plot)
# ===================== plots =================================================
# Load the datasets
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/onesample/one_sample.compare_methods.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/onesample/sw.test.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/onesample/one_sample.conditional.RData")
typeI_data <- data.frame(
sample_size = sample_size,
Exp_t = TypeIerror.t.test[, "Exponential"],
Exp_split = TypeIerror.split.test[, "Exponential"],
Exp_boot = TypeIerror.boot.test[, "Exponential"],
Exp_t_boot = TypeIerror.t_boot.test[, "Exponential"],
LogNorm_t = TypeIerror.t.test[, "LogNormal"],
LogNorm_split = TypeIerror.split.test[, "LogNormal"],
LogNorm_boot = TypeIerror.boot.test[, "LogNormal"],
LogNorm_t_boot = TypeIerror.t_boot.test[, "LogNormal"]
)
# Reshape the data for plotting
typeI_long <- typeI_data %>%
pivot_longer(
cols = starts_with("Exp_") | starts_with("LogNorm_"),
names_to = "test_method",
values_to = "typeI_error"
) %>%
mutate(
distribution = ifelse(grepl("^Exp_", test_method), "Exponential", "LogNormal"),
test_method = gsub("^Exp_|^LogNorm_", "", test_method)
)
# Combine power data into a data frame
power_data <- data.frame(
sample_size = sample_size,
Exponential = power_norm.test[, "Exponential"],
LogNormal = power_norm.test[, "LogNormal"]
)
# Reshape the power data for plotting
power_long <- power_data %>%
pivot_longer(
cols = c(Exponential, LogNormal),
names_to = "distribution",
values_to = "power"
)
# Combine power data into a data frame
conditional_typeI_df <- data.frame(
sample_size = sample_size,
Exponential = conditional.TypeIerror[, "Exponential"],
LogNormal = conditional.TypeIerror[, "LogNormal"]
)
# Reshape the power data for plotting
conditional_typeI_long <- conditional_typeI_df %>%
pivot_longer(
cols = c(Exponential, LogNormal),
names_to = "distribution",
values_to = "conditional_typeI_error"
)
# Plot conditional Type I error rates for Exponential and LogNormal
conditional_typeI_plot <- ggplot(conditional_typeI_long, aes(x = sample_size, y = conditional_typeI_error, color = distribution)) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black", linewidth = 0.7) +
geom_line(size = 1) +
geom_point(size = 2) +
ylim(0, 0.7) +
facet_wrap(~distribution, scales = "free_y") +
labs(
x = "Sample Size",
y = "Type I error",
title = "Conditional Type I error",
color = "Distribution"
) +
theme_minimal() +
theme(legend.position = "bottom")
# Plot Type I error rates for all test methods in the same plot for each distribution
typeI_plot <- ggplot(typeI_long, aes(x = sample_size, y = typeI_error, color = test_method)) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black", linewidth = 0.7) +
geom_line(size = 1) +
geom_point(size = 2) +
ylim(0, 0.2) +
facet_wrap(~distribution, scales = "free_y") +
labs(
x = "Sample Size",
y = "Type I Error Rate",
title = "Type I Error Rates by Test Method and Distribution",
color = "Test Method"
) +
theme_minimal() +
theme(legend.position = "bottom")
# Plot power of the Shapiro-Wilk test for each distribution
power_plot <- ggplot(power_long, aes(x = sample_size, y = power, color = distribution)) +
geom_line(size = 1) +
geom_point(size = 2) +
facet_wrap(~distribution, scales = "free_y") +
labs(
x = "Sample Size",
y = "Power of SW Test",
title = "Power of Shapiro-Wilk Test by Distribution",
color = "Distribution"
) +
theme_minimal() +
theme(legend.position = "bottom")
# Combine the plots vertically
combined_plot <- conditional_typeI_plot / typeI_plot / power_plot +
plot_layout(heights = c(1, 2, 1))  # Adjust heights as needed
# Display the combined plot
print(combined_plot)
# ===================== plots =================================================
# Load the datasets
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/onesample/one_sample.compare_methods.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/onesample/sw.test.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/onesample/one_sample.conditional.RData")
typeI_data <- data.frame(
sample_size = sample_size,
Exp_t = TypeIerror.t.test[, "Exponential"],
Exp_split = TypeIerror.split.test[, "Exponential"],
Exp_boot = TypeIerror.boot.test[, "Exponential"],
Exp_t_boot = TypeIerror.t_boot.test[, "Exponential"],
LogNorm_t = TypeIerror.t.test[, "LogNormal"],
LogNorm_split = TypeIerror.split.test[, "LogNormal"],
LogNorm_boot = TypeIerror.boot.test[, "LogNormal"],
LogNorm_t_boot = TypeIerror.t_boot.test[, "LogNormal"]
)
# Reshape the data for plotting
typeI_long <- typeI_data %>%
pivot_longer(
cols = starts_with("Exp_") | starts_with("LogNorm_"),
names_to = "test_method",
values_to = "typeI_error"
) %>%
mutate(
distribution = ifelse(grepl("^Exp_", test_method), "Exponential", "LogNormal"),
test_method = gsub("^Exp_|^LogNorm_", "", test_method)
)
# Combine power data into a data frame
power_data <- data.frame(
sample_size = sample_size,
Exponential = power_norm.test[, "Exponential"],
LogNormal = power_norm.test[, "LogNormal"]
)
# Reshape the power data for plotting
power_long <- power_data %>%
pivot_longer(
cols = c(Exponential, LogNormal),
names_to = "distribution",
values_to = "power"
)
# Combine power data into a data frame
conditional_typeI_df <- data.frame(
sample_size = sample_size,
Exponential = conditional.TypeIerror[, "Exponential"],
LogNormal = conditional.TypeIerror[, "LogNormal"]
)
# Reshape the power data for plotting
conditional_typeI_long <- conditional_typeI_df %>%
pivot_longer(
cols = c(Exponential, LogNormal),
names_to = "distribution",
values_to = "conditional_typeI_error"
)
# Plot conditional Type I error rates for Exponential and LogNormal
conditional_typeI_plot <- ggplot(conditional_typeI_long, aes(x = sample_size, y = conditional_typeI_error, color = distribution)) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black", linewidth = 0.7) +
geom_line(size = 1) +
geom_point(size = 2) +
ylim(0, 0.6) +
facet_wrap(~distribution, scales = "free_y") +
labs(
x = "Sample Size",
y = "Type I error",
title = "Conditional Type I error",
color = "Distribution"
) +
theme_minimal() +
theme(legend.position = "bottom")
# Plot Type I error rates for all test methods in the same plot for each distribution
typeI_plot <- ggplot(typeI_long, aes(x = sample_size, y = typeI_error, color = test_method)) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black", linewidth = 0.7) +
geom_line(size = 1) +
geom_point(size = 2) +
ylim(0, 0.2) +
facet_wrap(~distribution, scales = "free_y") +
labs(
x = "Sample Size",
y = "Type I Error Rate",
title = "Type I Error Rates by Test Method and Distribution",
color = "Test Method"
) +
theme_minimal() +
theme(legend.position = "bottom")
# Plot power of the Shapiro-Wilk test for each distribution
power_plot <- ggplot(power_long, aes(x = sample_size, y = power, color = distribution)) +
geom_line(size = 1) +
geom_point(size = 2) +
facet_wrap(~distribution, scales = "free_y") +
labs(
x = "Sample Size",
y = "Power of SW Test",
title = "Power of Shapiro-Wilk Test by Distribution",
color = "Distribution"
) +
theme_minimal() +
theme(legend.position = "bottom")
# Combine the plots vertically
combined_plot <- conditional_typeI_plot / typeI_plot / power_plot +
plot_layout(heights = c(1, 2, 1))  # Adjust heights as needed
# Display the combined plot
print(combined_plot)
