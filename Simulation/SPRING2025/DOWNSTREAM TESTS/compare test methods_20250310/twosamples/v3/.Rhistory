# Calculate type I error rates as the proportion of rejections for each test
error.t.test_mat[i, d]           <- mean(sim_results[, "t_test"])
error.mw_u.test_mat[i, d]        <- mean(sim_results[, "wilcox"])
error.t_mw_u.test_mat[i, d]      <- mean(sim_results[, "t_wilcox"])
error.split.test_mat[i, d]       <- mean(sim_results[, "split"])
error.permutation.test_mat[i, d] <- mean(sim_results[, "perm"])
error.bootstrap.test_mat[i, d]   <- mean(sim_results[, "boot"])
error.t.test_perm.test_mat[i, d]   <- mean(sim_results[, "t.test_perm.test"])
# Update progress bar and print a message for the current combination
current_iter <- current_iter + 1
setTxtProgressBar(pb, current_iter)
message(sprintf("Completed: sample size %d, distribution %s", n, dist_current))
}
}
# Clean up the progress bar and stop the cluster
close(pb)
stopCluster(cl)
# Name the rows and columns of each result matrix
rownames(error.t.test_mat)           <- sample_size
colnames(error.t.test_mat)            <- distribution
rownames(error.mw_u.test_mat)         <- sample_size
colnames(error.mw_u.test_mat)          <- distribution
rownames(error.t_mw_u.test_mat)       <- sample_size
colnames(error.t_mw_u.test_mat)        <- distribution
rownames(error.split.test_mat)        <- sample_size
colnames(error.split.test_mat)         <- distribution
rownames(error.permutation.test_mat)  <- sample_size
colnames(error.permutation.test_mat)   <- distribution
rownames(error.bootstrap.test_mat)    <- sample_size
colnames(error.bootstrap.test_mat)     <- distribution
rownames(error.t.test_perm.test_mat)    <- sample_size
colnames(error.t.test_perm.test_mat)     <- distribution
# Save the results
save(error.t.test_mat, error.mw_u.test_mat, error.t_mw_u.test_mat,
error.split.test_mat, error.permutation.test_mat, error.bootstrap.test_mat, error.t.test_perm.test_mat,
file = "two_sample.compare_type_I_error_results.RData")
error.t.test_mat
error.mw_u.test_mat
error.t.test_perm.test_mat
error.bootstrap.test_mat
close(pb)
# Load user-defined functions
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/twosamples/v3")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# set up cores for parallel processing
par_set <- function(cores_reserve = 2)
{
cores = parallel::detectCores()
cores_use <- cores - cores_reserve
if(Sys.info()["sysname"] == "Windows"){
# make a socket for both Windows & Unix-like
cl <- parallel::makeCluster(cores_use)
doParallel::registerDoParallel(cl)
}else{
# make a socket cluster for Unix-like
cl <- snow::makeSOCKcluster(cores_use)
doSNOW::registerDoSNOW(cl)
}
foreach::getDoParWorkers()
return(cl)
}
# Function to close the cluster
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
## Set up the simulation parameters
{
# Simulation parameters
Nsim <- 1e1
sample_size <- c(8, 10, 15, 20, 25, 30)
distribution <- c("Normal", "Exponential") #, "LogNormal")
alpha <- 0.05
B <- 1e1
effect_size <- 0.0
}
# Progress taskbar setup
{
my_cl <- par_set(cores_reserve = 2)
ntasks <- length(sample_size) * length(distribution)
pb <- txtProgressBar(max=ntasks, style=3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress=progress)
}
## Perform simulation
# Track simulation start time
start_time <- Sys.time()
cat("Simulation started at:", format(start_time), "\n\n")
#system.time({
sim_out <- foreach(n = sample_size,
.packages = c("LaplacesDemon", "VGAM"), # Put Difficult Packages here
.options.snow=opts) %:%
foreach(dist = distribution) %dopar%
{
set.seed(12345)
pval_sw <- pval_t <- pval_perm <- pval_adaptive_t_perm <- pval_conditional <- numeric(Nsim)
for (i in 1:Nsim) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
# perform Shapiro-Wilk test
pval_sw[i] <- shapiro.test(x)$p.value
# perform t-test
pval_t[i] <- t.test(x, y, mu = effect_size)$p.value
# perform permutation test
observe_stat <- TwoSample_test_statistic(x, y)
data <- c(x, y)
permuted_stat <- numeric(B)
for (j in 1:B) {
sample_data <- sample(data)
sample_x <- sample_data[1:length(x)]
sample_y <- sample_data[(length(x) + 1):(length(x) + length(y))]
permuted_stat[j] <- TwoSample_test_statistic(sample_x, sample_y + effect_size)
}
pval_perm[i] <- mean(abs(permuted_stat) >= abs(observe_stat))
# Adaptive t/permutation
if(pval_sw[i] > alpha){
pval_adaptive_t_perm[i] <- t.test(x, y, mu = effect_size)$p.value
} else {
observe_stat <- TwoSample_test_statistic(x, y)
data <- c(x, y)
permuted_stat <- numeric(B)
for (j in 1:B) {
sample_data <- sample(data)
sample_x <- sample_data[1:length(x)]
sample_y <- sample_data[(length(x) + 1):(length(x) + length(y))]
permuted_stat[j] <- TwoSample_test_statistic(sample_x, sample_y + effect_size)
}
pval_adaptive_t_perm[i] <- mean(abs(permuted_stat) >= abs(observe_stat))
}
# Conditional t-test error only if both samples are normal
if (pval_sw[i] > alpha && shapiro.test(y)$p.value > alpha) {
pval_conditional[i] <- t.test(x, y, mu = effect_size)$p.value
} else {
pval_conditional[i] <- NA
}
}
results <- list(error_t = mean(pval_t < alpha),
error_perm = mean(pval_perm < alpha),
error_adaptive_t_perm = mean(pval_adaptive_t_perm < alpha),
error_conditional = round(mean(pval_conditional < alpha, na.rm = TRUE), 3))
return(results)
}
# Organize Results in tables
errorvec <- numeric(length(sample_size) * length(distribution))
Type_I_error_t.test <- Type_I_error_perm.test <- Type_I_error_adaptive_t_perm.test <- Type_I_error_conditional.test <- array(errorvec, dim = c(length(sample_size), length(distribution)), dimnames = list(sample_size, distribution))
for (t in seq_along(sample_size)) {
for (j in seq_along(distribution)) {
Type_I_error_t.test[t, j] <- (sim_out[[t]][[j]]$error_t)
Type_I_error_perm.test[t, j] <- (sim_out[[t]][[j]]$error_perm)
Type_I_error_adaptive_t_perm.test[t, j] <- (sim_out[[t]][[j]]$error_adaptive_t_perm)
Type_I_error_conditional.test[t, j] <- (sim_out[[t]][[j]]$error_conditional)
}
}
#})
# Track end time
end_time <- Sys.time()
cat("\n\nSimulation completed at:", format(end_time), "\n")
cat("Total runtime:", round(difftime(end_time, start_time, units = "mins"), 2), "minutes\n")
#close clusters
close_cluster(my_cl)
Type_I_error_t.test
Type_I_error_perm.test
Type_I_error_adaptive_t_perm.test
Type_I_error_conditional.test
detectCores()
# Load user-defined functions
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/twosamples/v3")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# set up cores for parallel processing
par_set <- function(cores_reserve = 2)
{
cores = parallel::detectCores()
cores_use <- cores - cores_reserve
if(Sys.info()["sysname"] == "Windows"){
# make a socket for both Windows & Unix-like
cl <- parallel::makeCluster(cores_use)
doParallel::registerDoParallel(cl)
}else{
# make a socket cluster for Unix-like
cl <- snow::makeSOCKcluster(cores_use)
doSNOW::registerDoSNOW(cl)
}
foreach::getDoParWorkers()
return(cl)
}
# Function to close the cluster
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
## Set up the simulation parameters
{
# Simulation parameters
Nsim <- 1e3
sample_size <- c(8, 10, 15, 20, 25, 30)
distribution <- c("Normal", "Exponential") #, "LogNormal")
alpha <- 0.05
B <- 1e3
effect_size <- 0.0
}
# Progress taskbar setup
{
my_cl <- par_set(cores_reserve = 2)
ntasks <- length(sample_size) * length(distribution)
pb <- txtProgressBar(max=ntasks, style=3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress=progress)
}
## Perform simulation
# Track simulation start time
start_time <- Sys.time()
cat("Simulation started at:", format(start_time), "\n\n")
#system.time({
sim_out <- foreach(n = sample_size,
.packages = c("LaplacesDemon", "VGAM"), # Put Difficult Packages here
.options.snow=opts) %:%
foreach(dist = distribution) %dopar%
{
set.seed(12345)
pval_sw <- pval_t <- pval_perm <- pval_adaptive_t_perm <- pval_conditional <- numeric(Nsim)
for (i in 1:Nsim) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
# perform Shapiro-Wilk test
pval_sw[i] <- shapiro.test(x)$p.value
# perform t-test
pval_t[i] <- t.test(x, y, mu = effect_size)$p.value
# perform permutation test
observe_stat <- TwoSample_test_statistic(x, y)
data <- c(x, y)
permuted_stat <- numeric(B)
for (j in 1:B) {
sample_data <- sample(data)
sample_x <- sample_data[1:length(x)]
sample_y <- sample_data[(length(x) + 1):(length(x) + length(y))]
permuted_stat[j] <- TwoSample_test_statistic(sample_x, sample_y + effect_size)
}
pval_perm[i] <- mean(abs(permuted_stat) >= abs(observe_stat))
# Adaptive t/permutation
if(pval_sw[i] > alpha){
pval_adaptive_t_perm[i] <- t.test(x, y, mu = effect_size)$p.value
} else {
observe_stat <- TwoSample_test_statistic(x, y)
data <- c(x, y)
permuted_stat <- numeric(B)
for (j in 1:B) {
sample_data <- sample(data)
sample_x <- sample_data[1:length(x)]
sample_y <- sample_data[(length(x) + 1):(length(x) + length(y))]
permuted_stat[j] <- TwoSample_test_statistic(sample_x, sample_y + effect_size)
}
pval_adaptive_t_perm[i] <- mean(abs(permuted_stat) >= abs(observe_stat))
}
# Conditional t-test error only if both samples are normal
if (pval_sw[i] > alpha && shapiro.test(y)$p.value > alpha) {
pval_conditional[i] <- t.test(x, y, mu = effect_size)$p.value
} else {
pval_conditional[i] <- NA
}
}
results <- list(error_t = mean(pval_t < alpha),
error_perm = mean(pval_perm < alpha),
error_adaptive_t_perm = mean(pval_adaptive_t_perm < alpha),
error_conditional = round(mean(pval_conditional < alpha, na.rm = TRUE), 3))
return(results)
}
# Organize Results in tables
errorvec <- numeric(length(sample_size) * length(distribution))
Type_I_error_t.test <- Type_I_error_perm.test <- Type_I_error_adaptive_t_perm.test <- Type_I_error_conditional.test <- array(errorvec, dim = c(length(sample_size), length(distribution)), dimnames = list(sample_size, distribution))
for (t in seq_along(sample_size)) {
for (j in seq_along(distribution)) {
Type_I_error_t.test[t, j] <- (sim_out[[t]][[j]]$error_t)
Type_I_error_perm.test[t, j] <- (sim_out[[t]][[j]]$error_perm)
Type_I_error_adaptive_t_perm.test[t, j] <- (sim_out[[t]][[j]]$error_adaptive_t_perm)
Type_I_error_conditional.test[t, j] <- (sim_out[[t]][[j]]$error_conditional)
}
}
#})
# Track end time
end_time <- Sys.time()
cat("\n\nSimulation completed at:", format(end_time), "\n")
cat("Total runtime:", round(difftime(end_time, start_time, units = "mins"), 2), "minutes\n")
#close clusters
close_cluster(my_cl)
Type_I_error_t.test
Type_I_error_perm.test
Type_I_error_adaptive_t_perm.test
Type_I_error_conditional.test
# Load user-defined functions
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/twosamples/v3")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# set up cores for parallel processing
par_set <- function(cores_reserve = 2)
{
cores = parallel::detectCores()
cores_use <- cores - cores_reserve
if(Sys.info()["sysname"] == "Windows"){
# make a socket for both Windows & Unix-like
cl <- parallel::makeCluster(cores_use)
doParallel::registerDoParallel(cl)
}else{
# make a socket cluster for Unix-like
cl <- snow::makeSOCKcluster(cores_use)
doSNOW::registerDoSNOW(cl)
}
foreach::getDoParWorkers()
return(cl)
}
# Function to close the cluster
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
## Set up the simulation parameters
{
# Simulation parameters
Nsim <- 1e4
sample_size <- c(8, 10, 15, 20, 25, 30)
distribution <- c("Normal", "Exponential") #, "LogNormal")
alpha <- 0.05
B <- 1e3
effect_size <- 0.0
}
# Progress taskbar setup
{
my_cl <- par_set(cores_reserve = 2)
ntasks <- length(sample_size) * length(distribution)
pb <- txtProgressBar(max=ntasks, style=3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress=progress)
}
## Perform simulation
# Track simulation start time
start_time <- Sys.time()
cat("Simulation started at:", format(start_time), "\n\n")
#system.time({
sim_out <- foreach(n = sample_size,
.packages = c("LaplacesDemon", "VGAM"), # Put Difficult Packages here
.options.snow=opts) %:%
foreach(dist = distribution) %dopar%
{
set.seed(12345)
pval_sw <- pval_t <- pval_perm <- pval_adaptive_t_perm <- pval_conditional <- numeric(Nsim)
for (i in 1:Nsim) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
# perform Shapiro-Wilk test
pval_sw[i] <- shapiro.test(x)$p.value
# perform t-test
pval_t[i] <- t.test(x, y, mu = effect_size)$p.value
# perform permutation test
observe_stat <- TwoSample_test_statistic(x, y)
data <- c(x, y)
permuted_stat <- numeric(B)
for (j in 1:B) {
sample_data <- sample(data)
sample_x <- sample_data[1:length(x)]
sample_y <- sample_data[(length(x) + 1):(length(x) + length(y))]
permuted_stat[j] <- TwoSample_test_statistic(sample_x, sample_y + effect_size)
}
pval_perm[i] <- mean(abs(permuted_stat) >= abs(observe_stat))
# Adaptive t/permutation
if(pval_sw[i] > alpha){
pval_adaptive_t_perm[i] <- t.test(x, y, mu = effect_size)$p.value
} else {
observe_stat <- TwoSample_test_statistic(x, y)
data <- c(x, y)
permuted_stat <- numeric(B)
for (j in 1:B) {
sample_data <- sample(data)
sample_x <- sample_data[1:length(x)]
sample_y <- sample_data[(length(x) + 1):(length(x) + length(y))]
permuted_stat[j] <- TwoSample_test_statistic(sample_x, sample_y + effect_size)
}
pval_adaptive_t_perm[i] <- mean(abs(permuted_stat) >= abs(observe_stat))
}
# Conditional t-test error only if both samples are normal
if (pval_sw[i] > alpha && shapiro.test(y)$p.value > alpha) {
pval_conditional[i] <- t.test(x, y, mu = effect_size)$p.value
} else {
pval_conditional[i] <- NA
}
}
results <- list(error_t = mean(pval_t < alpha),
error_perm = mean(pval_perm < alpha),
error_adaptive_t_perm = mean(pval_adaptive_t_perm < alpha),
error_conditional = round(mean(pval_conditional < alpha, na.rm = TRUE), 3))
return(results)
}
# Organize Results in tables
errorvec <- numeric(length(sample_size) * length(distribution))
Type_I_error_t.test <- Type_I_error_perm.test <- Type_I_error_adaptive_t_perm.test <- Type_I_error_conditional.test <- array(errorvec, dim = c(length(sample_size), length(distribution)), dimnames = list(sample_size, distribution))
for (t in seq_along(sample_size)) {
for (j in seq_along(distribution)) {
Type_I_error_t.test[t, j] <- (sim_out[[t]][[j]]$error_t)
Type_I_error_perm.test[t, j] <- (sim_out[[t]][[j]]$error_perm)
Type_I_error_adaptive_t_perm.test[t, j] <- (sim_out[[t]][[j]]$error_adaptive_t_perm)
Type_I_error_conditional.test[t, j] <- (sim_out[[t]][[j]]$error_conditional)
}
}
#})
# Track end time
end_time <- Sys.time()
cat("\n\nSimulation completed at:", format(end_time), "\n")
cat("Total runtime:", round(difftime(end_time, start_time, units = "mins"), 2), "minutes\n")
#close clusters
close_cluster(my_cl)
Type_I_error_t.test
Type_I_error_perm.test
Type_I_error_adaptive_t_perm.test
Type_I_error_conditional.test
# Load user-defined functions
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/twosamples/v3")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# set up cores for parallel processing
par_set <- function(cores_reserve = 2)
{
cores = parallel::detectCores()
cores_use <- cores - cores_reserve
if(Sys.info()["sysname"] == "Windows"){
# make a socket for both Windows & Unix-like
cl <- parallel::makeCluster(cores_use)
doParallel::registerDoParallel(cl)
}else{
# make a socket cluster for Unix-like
cl <- snow::makeSOCKcluster(cores_use)
doSNOW::registerDoSNOW(cl)
}
foreach::getDoParWorkers()
return(cl)
}
# Function to close the cluster
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
## Set up the simulation parameters
{
# Simulation parameters
Nsim <- 1e4
sample_size <- c(8, 10, 15, 20, 25, 30)
distribution <- c("Normal", "Exponential", "LogNormal")
alpha <- 0.05
B <- 1e3
effect_size <- 0.0
}
# Progress taskbar setup
{
my_cl <- par_set(cores_reserve = 2)
ntasks <- length(sample_size) * length(distribution)
pb <- txtProgressBar(max=ntasks, style=3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress=progress)
}
## Perform simulation
# Track simulation start time
start_time <- Sys.time()
cat("Simulation started at:", format(start_time), "\n\n")
#system.time({
sim_out <- foreach(n = sample_size,
.packages = c("LaplacesDemon", "VGAM"), # Put Difficult Packages here
.options.snow=opts) %:%
foreach(dist = distribution) %dopar%
{
set.seed(12345)
pval_sw <- pval_t <- pval_perm <- pval_adaptive_t_perm <- pval_conditional <- numeric(Nsim)
for (i in 1:Nsim) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
# perform Shapiro-Wilk test
pval_sw[i] <- shapiro.test(x)$p.value
# perform t-test
pval_t[i] <- t.test(x, y, mu = effect_size)$p.value
# perform permutation test
observe_stat <- TwoSample_test_statistic(x, y)
data <- c(x, y)
permuted_stat <- numeric(B)
for (j in 1:B) {
sample_data <- sample(data)
sample_x <- sample_data[1:length(x)]
sample_y <- sample_data[(length(x) + 1):(length(x) + length(y))]
permuted_stat[j] <- TwoSample_test_statistic(sample_x, sample_y + effect_size)
}
pval_perm[i] <- mean(abs(permuted_stat) >= abs(observe_stat))
# Adaptive t/permutation
if(pval_sw[i] > alpha){
pval_adaptive_t_perm[i] <- t.test(x, y, mu = effect_size)$p.value
} else {
observe_stat <- TwoSample_test_statistic(x, y)
data <- c(x, y)
permuted_stat <- numeric(B)
for (j in 1:B) {
sample_data <- sample(data)
sample_x <- sample_data[1:length(x)]
sample_y <- sample_data[(length(x) + 1):(length(x) + length(y))]
permuted_stat[j] <- TwoSample_test_statistic(sample_x, sample_y + effect_size)
}
pval_adaptive_t_perm[i] <- mean(abs(permuted_stat) >= abs(observe_stat))
}
# Conditional t-test error only if both samples are normal
if (pval_sw[i] > alpha && shapiro.test(y)$p.value > alpha) {
pval_conditional[i] <- t.test(x, y, mu = effect_size)$p.value
} else {
pval_conditional[i] <- NA
}
}
results <- list(error_t = mean(pval_t < alpha),
error_perm = mean(pval_perm < alpha),
error_adaptive_t_perm = mean(pval_adaptive_t_perm < alpha),
error_conditional = round(mean(pval_conditional < alpha, na.rm = TRUE), 3))
return(results)
}
