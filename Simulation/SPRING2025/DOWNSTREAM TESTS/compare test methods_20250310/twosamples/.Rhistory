TwoSample_test_statistic(s1, s2)
})
results[j] <- mean(alt_stats < crit[1] | alt_stats > crit[2])
}
return(results)
}
}
# -------------------------------------------------------------------------
# Example usage:
# ------------------------------------------------------------------------
{
sample_sizes <- c(10, 20, 30, 40, 50)  # Your sample sizes
set.seed(12345)
power_results <- bootstrap_two_sample(rnorm(50), rnorm(50),  effect_size = 0.5, alpha = 0.05, n_bootstrap = 1e5, sample_size = sample_sizes)
# Create a data frame for plotting
plot_data <- data.frame(
SampleSize = sample_sizes,
Power = power_results
)
# Generate the ggplot
ggplot(plot_data, aes(x = SampleSize, y = Power)) +
geom_line(color = "#4E79A7", linewidth = 1) +
geom_point(color = "#E15759", size = 3) +
scale_y_continuous(limits = c(0, 1), labels = scales::percent) +
labs(x = "Sample Size",
y = "Statistical Power",
title = "Power Analysis by Sample Size",
subtitle = "Bootstrap estimation of statistical power") +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
panel.grid.minor = element_blank()
)
}
# -----------------------------------------------------------------------
# -------------- two-sample bootstrap function for p-values -------------
# -----------------------------------------------------------------------
bootstrap_two_sample_test <- function(x1, x2, effect_size,  alpha, n_bootstrap) {
# Calculate observed test statistic
T_obs <- TwoSample_test_statistic(x1, x2 + effect_size)
# Create combined null distribution
combined <- c(x1, x2 )
n1 <- length(x1)
n2 <- length(x2)
# Generate null distribution
null_stats <- replicate(n_bootstrap, {
s1 <- sample(combined, n1, replace = TRUE)
s2 <- sample(combined, n2, replace = TRUE) +  effect_size
TwoSample_test_statistic(s1, s2)
})
# Calculate critical values (two-tailed)
crit <- quantile(null_stats, c(alpha/2, 1 - alpha/2))
# Return binary rejection decision
as.integer(T_obs < crit[1] | T_obs > crit[2])
}
bootstrap_one_sample <- function(x, effect_size, alpha, n_bootstrap, sample_size) {
results <- numeric(length(sample_size))
for(j in seq_along(sample_size)) {
n <- sample_size[j]
# Null distribution
null_stats <- replicate(n_bootstrap, {
OneSample_test_statistic(sample(x, n, replace = TRUE))
})
crit <- quantile(null_stats, c(alpha/2, 1 - alpha/2))
# Alternative distribution
alt_stats <- replicate(n_bootstrap, {
shifted_data <- sample(x, n, replace = TRUE) + effect_size
OneSample_test_statistic(shifted_data)
})
results[j] <- mean(alt_stats < crit[1] | alt_stats > crit[2])
}
return(results)
}
# ==============================================================================
# -----------------------Confidence Intervals Approach-------------------------
# bootstrap function for Type I error/power of one-sample location
#                        test through Confidence intervals
# -----------------------------------------------------------------------------
{
bootstrap_one_sample <- function(x, effect_size, alpha, n_bootstrap, sample_size) {
results <- numeric(length(sample_size))
for(j in seq_along(sample_size)) {
n <- sample_size[j]
# Null distribution
null_stats <- replicate(n_bootstrap, {
OneSample_test_statistic(sample(x, n, replace = TRUE))
})
crit <- quantile(null_stats, c(alpha/2, 1 - alpha/2))
# Alternative distribution
alt_stats <- replicate(n_bootstrap, {
shifted_data <- sample(x, n, replace = TRUE) + effect_size
OneSample_test_statistic(shifted_data)
})
results[j] <- mean(alt_stats < crit[1] | alt_stats > crit[2])
}
return(results)
}
}
# Combine the data for plotting
df <- data.frame(
statistic = c(null_stats, alt_stats),
Distribution = rep(c("Null", "Alternative"), each = length(null_stats))
)
# Create the density plot with confidence intervals indicated
ggplot(df, aes(x = statistic, fill = Distribution)) +
geom_density(alpha = 0.5) +
geom_vline(xintercept = crit[1], linetype = "dashed", color = "red", size = 1) +
geom_vline(xintercept = crit[2], linetype = "dashed", color = "red", size = 1) +
labs(title = "Density Plots for Test Statistics",
x = "Test Statistic Value",
y = "Density") +
theme_minimal()
sample_sizes <- c(10, 20, 30, 40, 50)  # Your sample sizes
#set.seed(12345)
power_results <- bootstrap_one_sample(rnorm(50), effect_size = 0.5, alpha = 0.05, n_bootstrap = 1e3, sample_size = sample_sizes)
# Create a data frame for plotting
plot_data <- data.frame(
SampleSize = sample_sizes,
Power = power_results
)
# Generate the ggplot
ggplot(plot_data, aes(x = SampleSize, y = Power)) +
geom_line(color = "#4E79A7", linewidth = 1) +
geom_point(color = "#E15759", size = 3) +
scale_y_continuous(limits = c(0, 1), labels = scales::percent) +
labs(x = "Sample Size",
y = "Statistical Power",
title = "Power Analysis by Sample Size",
subtitle = "Bootstrap estimation of statistical power") +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
panel.grid.minor = element_blank()
)
{
bootstrap_one_sample <- function(x, effect_size, alpha, n_bootstrap, sample_size) {
results <- numeric(length(sample_size))
for(j in seq_along(sample_size)) {
n <- sample_size[j]
# Null distribution
null_stats <- replicate(n_bootstrap, {
OneSample_test_statistic(sample(x, n, replace = TRUE))
})
crit <- quantile(null_stats, c(alpha/2, 1 - alpha/2))
# Alternative distribution
alt_stats <- replicate(n_bootstrap, {
shifted_data <- sample(x, n, replace = TRUE) + effect_size
OneSample_test_statistic(shifted_data)
})
results[j] <- mean(alt_stats < crit[1] | alt_stats > crit[2])
}
return(results)
}
}
# # Combine the data for plotting
# df <- data.frame(
#   statistic = c(null_stats, alt_stats),
#   Distribution = rep(c("Null", "Alternative"), each = length(null_stats))
# )
#
# # Create the density plot with confidence intervals indicated
# ggplot(df, aes(x = statistic, fill = Distribution)) +
#   geom_density(alpha = 0.5) +
#   geom_vline(xintercept = crit[1], linetype = "dashed", color = "red", size = 1) +
#   geom_vline(xintercept = crit[2], linetype = "dashed", color = "red", size = 1) +
#   labs(title = "Density Plots for Test Statistics",
#        x = "Test Statistic Value",
#        y = "Density") +
#   theme_minimal()
#
# -------------------------------------------------------------------------
# Example usage:
# ------------------------------------------------------------------------
{
sample_sizes <- c(10, 20, 30, 40, 50)  # Your sample sizes
#set.seed(12345)
power_results <- bootstrap_one_sample(rnorm(50), effect_size = 0.5, alpha = 0.05, n_bootstrap = 1e3, sample_size = sample_sizes)
# Create a data frame for plotting
plot_data <- data.frame(
SampleSize = sample_sizes,
Power = power_results
)
# Generate the ggplot
ggplot(plot_data, aes(x = SampleSize, y = Power)) +
geom_line(color = "#4E79A7", linewidth = 1) +
geom_point(color = "#E15759", size = 3) +
scale_y_continuous(limits = c(0, 1), labels = scales::percent) +
labs(x = "Sample Size",
y = "Statistical Power",
title = "Power Analysis by Sample Size",
subtitle = "Bootstrap estimation of statistical power") +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
panel.grid.minor = element_blank()
)
}
bootstrap_two_sample <- function(x1, x2, effect_size, alpha, n_bootstrap, sample_size) {
results <- numeric(length(sample_size))
#combined <- c(x1, x2, effect_size)
for(j in seq_along(sample_size)) {
n <- sample_size[j]
# Null distribution
null_stats <- replicate(n_bootstrap, {
s1 <- sample(x1, n, replace = TRUE)
s2 <- sample(x2, n, replace = TRUE)
TwoSample_test_statistic(s1, s2)
})
crit <- quantile(null_stats, c(alpha/2, 1 - alpha/2))
# Alternative distribution
alt_stats <- replicate(n_bootstrap, {
s1 <- sample(x1, n, replace = TRUE)
s2 <- sample(x2, n, replace = TRUE) +  effect_size
TwoSample_test_statistic(s1, s2)
})
results[j] <- mean(alt_stats < crit[1] | alt_stats > crit[2])
}
return(results)
}
# ==============================================================================
# -----------------------Confidence Intervals Approach-------------------------
# bootstrap function for Type I error/power of one-sample location
#                        test through Confidence intervals
# -----------------------------------------------------------------------------
#               This function will be used in the Shiny app
# -----------------------------------------------------------------------------
{
bootstrap_two_sample <- function(x1, x2, effect_size, alpha, n_bootstrap, sample_size) {
results <- numeric(length(sample_size))
#combined <- c(x1, x2, effect_size)
for(j in seq_along(sample_size)) {
n <- sample_size[j]
# Null distribution
null_stats <- replicate(n_bootstrap, {
s1 <- sample(x1, n, replace = TRUE)
s2 <- sample(x2, n, replace = TRUE)
TwoSample_test_statistic(s1, s2)
})
crit <- quantile(null_stats, c(alpha/2, 1 - alpha/2))
# Alternative distribution
alt_stats <- replicate(n_bootstrap, {
s1 <- sample(x1, n, replace = TRUE)
s2 <- sample(x2, n, replace = TRUE) +  effect_size
TwoSample_test_statistic(s1, s2)
})
results[j] <- mean(alt_stats < crit[1] | alt_stats > crit[2])
}
return(results)
}
}
# -------------------------------------------------------------------------
# Example usage:
# ------------------------------------------------------------------------
{
sample_sizes <- c(10, 20, 30, 40, 50)  # Your sample sizes
set.seed(12345)
power_results <- bootstrap_two_sample(rnorm(50), rnorm(50),  effect_size = 0.5, alpha = 0.05, n_bootstrap = 1e5, sample_size = sample_sizes)
# Create a data frame for plotting
plot_data <- data.frame(
SampleSize = sample_sizes,
Power = power_results
)
# Generate the ggplot
ggplot(plot_data, aes(x = SampleSize, y = Power)) +
geom_line(color = "#4E79A7", linewidth = 1) +
geom_point(color = "#E15759", size = 3) +
scale_y_continuous(limits = c(0, 1), labels = scales::percent) +
labs(x = "Sample Size",
y = "Statistical Power",
title = "Power Analysis by Sample Size",
subtitle = "Bootstrap estimation of statistical power") +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
panel.grid.minor = element_blank()
)
}
bootstrap_two_sample(rnorm(50), rnorm(50),  effect_size = 0.5, alpha = 0.05, n_bootstrap = 1e5, sample_size = sample_sizes)
bootstrap_one_sample <- function(x, effect_size, alpha, n_bootstrap, sample_size) {
results <- numeric(length(sample_size))
for(j in seq_along(sample_size)) {
n <- sample_size[j]
# Null distribution
null_stats <- replicate(n_bootstrap, {
OneSample_test_statistic(sample(x, n, replace = TRUE))
})
crit <- quantile(null_stats, c(alpha/2, 1 - alpha/2))
# Alternative distribution
alt_stats <- replicate(n_bootstrap, {
shifted_data <- sample(x, n, replace = TRUE) + effect_size
OneSample_test_statistic(shifted_data)
})
results[j] <- mean(alt_stats < crit[1] | alt_stats > crit[2])
}
return(results)
}
# ==============================================================================
# -----------------------Confidence Intervals Approach-------------------------
# bootstrap function for Type I error/power of one-sample location
#                        test through Confidence intervals
# -----------------------------------------------------------------------------
#               This function will be used in the Shiny app
# -----------------------------------------------------------------------------
{
bootstrap_one_sample <- function(x, effect_size, alpha, n_bootstrap, sample_size) {
results <- numeric(length(sample_size))
for(j in seq_along(sample_size)) {
n <- sample_size[j]
# Null distribution
null_stats <- replicate(n_bootstrap, {
OneSample_test_statistic(sample(x, n, replace = TRUE))
})
crit <- quantile(null_stats, c(alpha/2, 1 - alpha/2))
# Alternative distribution
alt_stats <- replicate(n_bootstrap, {
shifted_data <- sample(x, n, replace = TRUE) + effect_size
OneSample_test_statistic(shifted_data)
})
results[j] <- mean(alt_stats < crit[1] | alt_stats > crit[2])
}
return(results)
}
}
{
sample_sizes <- c(10, 20, 30, 40, 50)  # Your sample sizes
#set.seed(12345)
power_results <- bootstrap_one_sample(rnorm(50), effect_size = 0.5, alpha = 0.05, n_bootstrap = 1e3, sample_size = sample_sizes)
# Create a data frame for plotting
plot_data <- data.frame(
SampleSize = sample_sizes,
Power = power_results
)
# Generate the ggplot
ggplot(plot_data, aes(x = SampleSize, y = Power)) +
geom_line(color = "#4E79A7", linewidth = 1) +
geom_point(color = "#E15759", size = 3) +
scale_y_continuous(limits = c(0, 1), labels = scales::percent) +
labs(x = "Sample Size",
y = "Statistical Power",
title = "Power Analysis by Sample Size",
subtitle = "Bootstrap estimation of statistical power") +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
panel.grid.minor = element_blank()
)
}
# =========================== Bootstrap for Type I error/Power ===============
# Function as provided (note: it returns rejection probabilities across sample sizes)
bootstrap_one_sample <- function(x, effect_size, alpha, n_bootstrap, sample_size) {
results <- numeric(length(sample_size))
for(j in seq_along(sample_size)) {
n <- sample_size[j]
# Null distribution
null_stats <- replicate(n_bootstrap, {
OneSample_test_statistic(sample(x, n, replace = TRUE))
})
crit <- quantile(null_stats, c(alpha/2, 1 - alpha/2))
# Alternative distribution
alt_stats <- replicate(n_bootstrap, {
shifted_data <- sample(x, n, replace = TRUE) + effect_size
OneSample_test_statistic(shifted_data)
})
results[j] <- mean(alt_stats < crit[1] | alt_stats > crit[2])
# Create data frame for plotting
df <- data.frame(
statistic = c(null_stats, alt_stats),
Distribution = rep(c("Null", "Alternative"), each = length(null_stats))
)
# Generate the density plot with CI bounds from the null distribution
print(
ggplot(df, aes(x = statistic, fill = Distribution)) +
geom_density(alpha = 0.5) +
geom_vline(xintercept = crit[1], linetype = "dashed", color = "red", size = 1) +
geom_vline(xintercept = crit[2], linetype = "dashed", color = "red", size = 1) +
labs(title = "Density Plots for Test Statistics",
subtitle = paste("Sample size =", n),
x = "Test Statistic Value",
y = "Density") +
theme_minimal()
)
}
return(results)
}
#set.seed(123)  # For reproducibility
sample_size <- c(100)
dist = "Exponential"
# Run the bootstrap function.
# This will compute the rejection probability for each sample size in sample_size.
rejection_probs <- bootstrap_one_sample(x = generate_data(n = sample_size, dist),
effect_size = 0,
alpha = 0.05,
n_bootstrap = 1000,
sample_size = sample_size)
# ===================== plots =================================================
# Load required libraries
library(tidyverse)
library(patchwork)
# Load the datasets
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/twosamples/two_sample.compare_methods.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/twosamples/two_sample.conditional.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/compare test methods_20250310/twosamples/sw.test.RData")
# Prepare Type I error data
typeI_data <- data.frame(
sample_size = sample_size,
Exp_t = TypeIerror.t.test[, "Exponential"],
Exp_split = TypeIerror.split.test[, "Exponential"],
Exp_perm = TypeIerror.perm.test[, "Exponential"],
Exp_t_perm = TypeIerror.t_perm.test[, "Exponential"],
LogNorm_t = TypeIerror.t.test[, "LogNormal"],
LogNorm_split = TypeIerror.split.test[, "LogNormal"],
LogNorm_perm = TypeIerror.perm.test[, "LogNormal"],
LogNorm_t_perm = TypeIerror.t_perm.test[, "LogNormal"]
)
typeI_long <- typeI_data %>%
pivot_longer(
cols = starts_with("Exp_") | starts_with("LogNorm_"),
names_to = "test_method",
values_to = "typeI_error"
) %>%
mutate(
distribution = ifelse(grepl("^Exp_", test_method), "Exponential", "LogNormal"),
test_method = gsub("^Exp_|^LogNorm_", "", test_method)
)
# Prepare power data
power_data <- data.frame(
sample_size = sample_size,
Exponential = power_norm.test[, "Exponential"],
LogNormal = power_norm.test[, "LogNormal"]
)
power_long <- power_data %>%
pivot_longer(
cols = c(Exponential, LogNormal),
names_to = "distribution",
values_to = "power"
)
# Prepare conditional Type I error data
conditional_typeI_df <- data.frame(
sample_size = sample_size,
Exponential = conditional.TypeIerror[, "Exponential"],
LogNormal = conditional.TypeIerror[, "LogNormal"]
)
conditional_typeI_long <- conditional_typeI_df %>%
pivot_longer(
cols = c(Exponential, LogNormal),
names_to = "distribution",
values_to = "conditional_typeI_error"
)
# Plot: Conditional Type I Error
plot1 <- ggplot(conditional_typeI_long, aes(x = sample_size, y = conditional_typeI_error, color = distribution)) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black", linewidth = 0.7) +
geom_line(size = 1) +
geom_point(size = 2) +
ylim(0, 0.25) +
facet_wrap(~distribution, scales = "free_y") +
labs(
x = NULL,
y = "Conditional Type I Error",
title = "Conditional Type I Error by Distribution",
color = "Distribution"
) +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
# Plot: Type I Error by Test Method
plot2 <- ggplot(typeI_long, aes(x = sample_size, y = typeI_error, color = test_method)) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black", linewidth = 0.7) +
geom_line(size = 1) +
geom_point(size = 2) +
ylim(0, 0.07) +
facet_wrap(~distribution, scales = "free_y") +
labs(
x = NULL,
y = "Type I Error Rate",
title = "Type I Error Rates by Test Method and Distribution",
color = "Test Method"
) +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
# Plot: Power of SW Test
plot3 <- ggplot(power_long, aes(x = sample_size, y = power, color = distribution)) +
geom_line(size = 1) +
geom_point(size = 2) +
facet_wrap(~distribution, scales = "free_y") +
labs(
x = "Sample Size",
y = "Power of SW Test",
title = "Power of Shapiro-Wilk Test by Distribution",
color = "Distribution"
) +
theme_minimal() +
theme(legend.position = "bottom")
# Combine all plots vertically with shared x-axis at bottom
combined_plot <- plot1 / plot2 / plot3 +
plot_layout(guides = "collect", heights = c(1, 1.5, 1)) &
theme(legend.position = "bottom")
# Display the combined plot
print(combined_plot)
# Optionally save to file
# ggsave("combined_typeI_power_plots.png", combined_plot, width = 10, height = 12, dpi = 300)
