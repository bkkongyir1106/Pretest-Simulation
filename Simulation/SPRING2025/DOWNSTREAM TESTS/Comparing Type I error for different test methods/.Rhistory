}else{
as.numeric(TwoSample.test(x, y, test = "perm", alpha = alpha, effect_size = effect_size, B = n_boot) < alpha)
}
)
}
# Calculate type I error rates as the proportion of rejections for each test
error.t.test_mat[i, d]           <- mean(sim_results[, "t_test"])
error.mw_u.test_mat[i, d]        <- mean(sim_results[, "wilcox"])
error.t_mw_u.test_mat[i, d]      <- mean(sim_results[, "t_wilcox"])
error.split.test_mat[i, d]       <- mean(sim_results[, "split"])
error.permutation.test_mat[i, d] <- mean(sim_results[, "perm"])
error.bootstrap.test_mat[i, d]   <- mean(sim_results[, "boot"])
error.t.test_perm.test_mat[i, d]   <- mean(sim_results[, "t.test_perm.test"])
# Update progress bar and print a message for the current combination
current_iter <- current_iter + 1
setTxtProgressBar(pb, current_iter)
message(sprintf("Completed: sample size %d, distribution %s", n, dist_current))
}
}
# Load user-defined functions
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/Comparing Type I error for different test methods")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
# Set seed and simulation parameters
set.seed(12345)
Nsim <- 1e2
sample_size <- c(8, 10, 15, 20, 25, 30, 50)
distribution <- c("Normal", "Exponential", "LogNormal")
alpha <- 0.05
n_boot <- 1e2
effect_size = 0.0
# Preallocate matrices to store the type I error rates.
# Rows correspond to sample sizes and columns to distributions.
error.t.test_mat           <- matrix(NA, nrow = length(sample_size), ncol = length(distribution))
error.mw_u.test_mat        <- matrix(NA, nrow = length(sample_size), ncol = length(distribution))
error.t_mw_u.test_mat      <- matrix(NA, nrow = length(sample_size), ncol = length(distribution))
error.split.test_mat       <- matrix(NA, nrow = length(sample_size), ncol = length(distribution))
error.permutation.test_mat <- matrix(NA, nrow = length(sample_size), ncol = length(distribution))
error.bootstrap.test_mat   <- matrix(NA, nrow = length(sample_size), ncol = length(distribution))
error.t.test_perm.test_mat <- matrix(NA, nrow = length(sample_size), ncol = length(distribution))
# Parallel setup - use makePSOCKcluster() for both windows and mac
ncores <- parallel::detectCores() - 1
cl <- parallel::makePSOCKcluster(ncores)
registerDoSNOW(cl)
# Set up a progress bar
total_iter <- length(distribution) * length(sample_size)
current_iter <- 0
pb <- txtProgressBar(min = 0, max = total_iter, style = 3)
# Loop over distributions and sample sizes
for (d in seq_along(distribution)) {
dist_current <- distribution[d]
for (i in seq_along(sample_size)) {
n <- sample_size[i]
# Run simulation iterations in parallel for current combination
sim_results <- foreach(j = 1:Nsim, .combine = rbind,
.export = c("generate_data", "TwoSample.test", "bootstrap_two_sample_test")) %dopar% {
# Generate data for current sample size and distribution
x <- generate_data(n, dist_current)
y <- generate_data(n, dist_current)
# Perform the various tests and record 1 if p-value < alpha (or the bootstrap returns rejection indicator)
c(
t_test    = as.numeric(TwoSample.test(x, y, test = "t", alpha = alpha, effect_size = effect_size) < alpha),
wilcox    = as.numeric(TwoSample.test(x, y, test = "Wilcox", alpha = alpha, effect_size = effect_size) < alpha),
t_wilcox  = as.numeric(TwoSample.test(x, y, test = "t_Wilcox", alpha = alpha, effect_size = effect_size) < alpha),
split     = as.numeric(TwoSample.test(x, y, test = "2stage.split", alpha = alpha, effect_size = effect_size) < alpha),
perm      = as.numeric(TwoSample.test(x, y, test = "perm", alpha = alpha, effect_size = effect_size, B = n_boot) < alpha),
boot      = bootstrap_two_sample_test(x, y, effect_size = effect_size, alpha, n_bootstrap = n_boot, sample_size = n),
t.test_perm.test = if(shapiro.test(x)$p.value > alpha & shapiro.test(y)$p.value > alpha){
as.numeric(TwoSample.test(x, y, test = "t", alpha = alpha, effect_size = effect_size) < alpha)
}else{
as.numeric(TwoSample.test(x, y, test = "perm", alpha = alpha, effect_size = effect_size, B = n_boot) < alpha)
}
)
}
# Calculate type I error rates as the proportion of rejections for each test
error.t.test_mat[i, d]           <- mean(sim_results[, "t_test"])
error.mw_u.test_mat[i, d]        <- mean(sim_results[, "wilcox"])
error.t_mw_u.test_mat[i, d]      <- mean(sim_results[, "t_wilcox"])
error.split.test_mat[i, d]       <- mean(sim_results[, "split"])
error.permutation.test_mat[i, d] <- mean(sim_results[, "perm"])
error.bootstrap.test_mat[i, d]   <- mean(sim_results[, "boot"])
error.t.test_perm.test_mat[i, d]   <- mean(sim_results[, "t.test_perm.test"])
# Update progress bar and print a message for the current combination
current_iter <- current_iter + 1
setTxtProgressBar(pb, current_iter)
message(sprintf("Completed: sample size %d, distribution %s", n, dist_current))
}
}
# Clean up the progress bar and stop the cluster
close(pb)
stopCluster(cl)
# Name the rows and columns of each result matrix
rownames(error.t.test_mat)           <- sample_size
colnames(error.t.test_mat)            <- distribution
rownames(error.mw_u.test_mat)         <- sample_size
colnames(error.mw_u.test_mat)          <- distribution
rownames(error.t_mw_u.test_mat)       <- sample_size
colnames(error.t_mw_u.test_mat)        <- distribution
rownames(error.split.test_mat)        <- sample_size
colnames(error.split.test_mat)         <- distribution
rownames(error.permutation.test_mat)  <- sample_size
colnames(error.permutation.test_mat)   <- distribution
rownames(error.bootstrap.test_mat)    <- sample_size
colnames(error.bootstrap.test_mat)     <- distribution
rownames(error.t.test_perm.test_mat)    <- sample_size
colnames(error.t.test_perm.test_mat)     <- distribution
# Save the results
save(error.t.test_mat, error.mw_u.test_mat, error.t_mw_u.test_mat,
error.split.test_mat, error.permutation.test_mat, error.bootstrap.test_mat, error.t.test_perm.test_mat,
file = "two_sample.compare_type_I_error_results.RData")
error.t.test_mat
error.mw_u.test_mat
error.t.test_perm.test_mat
error.bootstrap.test_mat
# Load required libraries
library(doParallel)
library(foreach)
library(progressr)
# Set working directory and source user-defined functions
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/Comparing Type I error for different test methods")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
# Set seed and simulation parameters
set.seed(12345)
Nsim <- 100
sample_size_vec <- c(8, 10, 15, 20, 25, 30)
distribution_vec <- c("Normal", "Exponential", "LogNormal")
alpha <- 0.05
n_boot <- 100
effect_size <- 0.0  # Type I error = Null is true
# Initialize result matrices
t_test_mat     <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
wilcox_mat     <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
split_mat      <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
perm_mat       <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
boot_mat       <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
t_perm_mat     <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
t_boot_mat     <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
rownames(t_test_mat) <- sample_size_vec
colnames(t_test_mat) <- distribution_vec
rownames(wilcox_mat) <- rownames(split_mat) <- rownames(perm_mat) <- rownames(boot_mat) <- rownames(t_perm_mat) <- rownames(t_boot_mat) <- sample_size_vec
colnames(wilcox_mat) <- colnames(split_mat) <- colnames(perm_mat) <- colnames(boot_mat) <- colnames(t_perm_mat) <- colnames(t_boot_mat) <- distribution_vec
# Detect available cores and register parallel backend
num_cores <- detectCores() - 1  # Use all but one core
cl <- makeCluster(num_cores)
registerDoParallel(cl)
# Enable progress tracking and choose a handler
handlers(global = TRUE)
handlers(handler_txtprogressbar)  # This enables the text progress bar
with_progress({
p <- progressor(steps = length(distribution_vec) * length(sample_size_vec))
results <- foreach(d = seq_along(distribution_vec), .combine = 'cbind', .packages = c("stats", "progressr")) %:%
foreach(s = seq_along(sample_size_vec), .combine = 'rbind') %dopar% {
dist_current <- distribution_vec[d]
n <- sample_size_vec[s]
# Storage for p-values for each test method
pval.t_test <- numeric(Nsim)
pval.wilcox.test <- numeric(Nsim)
pval.split.test <- numeric(Nsim)
pval.perm.test <- numeric(Nsim)
pval.boot.test <- numeric(Nsim)
pval_t_perm.test <- numeric(Nsim)
pval_t_boot.test <- numeric(Nsim)
for (i in 1:Nsim) {
x <- generate_data(n, dist_current)
y <- generate_data(n, dist_current)
pval.t_test[i]     <- TwoSample.test(x, y, test = "t", alpha = alpha, effect_size = effect_size)
pval.wilcox.test[i]<- TwoSample.test(x, y, test = "Wilcox", alpha = alpha, effect_size = effect_size)
pval.split.test[i] <- TwoSample.test(x, y, test = "2stage.split", alpha = alpha, effect_size = effect_size)
pval.perm.test[i]  <- TwoSample.test(x, y, test = "perm", alpha = alpha, effect_size = effect_size, B = n_boot)
pval.boot.test[i]  <- two_sample_bootstrap_p_value(x, y, effect_size = effect_size, n_bootstrap = n_boot)
# Adaptive t/permutation
if (shapiro.test(x)$p.value > alpha & shapiro.test(y)$p.value > alpha) {
pval_t_perm.test[i] <- TwoSample.test(x, y, test = "t", alpha = alpha, effect_size = effect_size)
} else {
pval_t_perm.test[i] <- TwoSample.test(x, y, test = "perm", alpha = alpha, effect_size = effect_size, B = n_boot)
}
# Adaptive t/bootstrap
if (shapiro.test(x)$p.value > alpha & shapiro.test(y)$p.value > alpha) {
pval_t_boot.test[i] <- TwoSample.test(x, y, test = "t", alpha = alpha, effect_size = effect_size)
} else {
pval_t_boot.test[i] <- two_sample_bootstrap_p_value(x, y, effect_size = effect_size, n_bootstrap = n_boot)
}
}
# Increment progress bar
p()
# Compute Type I error rates
c(mean(pval.t_test < alpha),
mean(pval.wilcox.test < alpha),
mean(pval.split.test < alpha),
mean(pval.perm.test < alpha),
mean(pval.boot.test < alpha),
mean(pval_t_perm.test < alpha),
mean(pval_t_boot.test < alpha))
}
})
# Stop parallel backend
stopCluster(cl)
# Extract results into matrices
results <- matrix(results, ncol = 7, byrow = TRUE)
t_test_mat[]   <- results[, 1]
wilcox_mat[]   <- results[, 2]
split_mat[]    <- results[, 3]
perm_mat[]     <- results[, 4]
boot_mat[]     <- results[, 5]
t_perm_mat[]   <- results[, 6]
t_boot_mat[]   <- results[, 7]
# Print the results nicely
cat("\nType I Error - t-test:\n")
print(round(t_test_mat, 3))
cat("\nType I Error - Wilcoxon test:\n")
print(round(wilcox_mat, 3))
cat("\nType I Error - 2-stage split test:\n")
print(round(split_mat, 3))
cat("\nType I Error - Permutation test:\n")
print(round(perm_mat, 3))
cat("\nType I Error - Bootstrap test:\n")
print(round(boot_mat, 3))
cat("\nType I Error - Adaptive t/perm test:\n")
print(round(t_perm_mat, 3))
cat("\nType I Error - Adaptive t/bootstrap test:\n")
print(round(t_boot_mat, 3))
cat("\nType I Error - t-test:\n")
print(round(t_test_mat, 3))
# Load user-defined functions
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/Comparing Type I error for different test methods")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
# Set seed and simulation parameters
set.seed(12345)
Nsim <- 100
sample_size_vec <- c(8, 10, 15, 20, 25, 30)
distribution_vec <- c("Normal", "Exponential", "LogNormal")
alpha <- 0.05
n_boot <- 100
effect_size <- 0.0  # Type I error = Null is true
# Initialize result matrices
t_test_mat     <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
wilcox_mat     <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
split_mat      <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
perm_mat       <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
boot_mat       <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
t_perm_mat     <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
t_boot_mat     <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
rownames(t_test_mat) <- sample_size_vec
colnames(t_test_mat) <- distribution_vec
rownames(wilcox_mat) <- rownames(split_mat) <- rownames(perm_mat) <- rownames(boot_mat) <- rownames(t_perm_mat) <- rownames(t_boot_mat) <- sample_size_vec
colnames(wilcox_mat) <- colnames(split_mat) <- colnames(perm_mat) <- colnames(boot_mat) <- colnames(t_perm_mat) <- colnames(t_boot_mat) <- distribution_vec
handlers(global = TRUE)
handlers("txtprogressbar")  # Ensure progress bar works in non-parallel runs
with_progress({
p <- progressor(steps = length(distribution_vec) * length(sample_size_vec))
# Start simulation
for (d in seq_along(distribution_vec)) {
dist_current <- distribution_vec[d]
for (s in seq_along(sample_size_vec)) {
n <- sample_size_vec[s]
# Storage for p-values for each test method
pval.t_test <- numeric(Nsim)
pval.wilcox.test <- numeric(Nsim)
pval.split.test <- numeric(Nsim)
pval.perm.test <- numeric(Nsim)
pval.boot.test <- numeric(Nsim)
pval_t_perm.test <- numeric(Nsim)
pval_t_boot.test <- numeric(Nsim)
for (i in 1:Nsim) {
x <- generate_data(n, dist_current)
y <- generate_data(n, dist_current)
pval.t_test[i]     <- TwoSample.test(x, y, test = "t", alpha = alpha, effect_size = effect_size)
pval.wilcox.test[i]<- TwoSample.test(x, y, test = "Wilcox", alpha = alpha, effect_size = effect_size)
pval.split.test[i] <- TwoSample.test(x, y, test = "2stage.split", alpha = alpha, effect_size = effect_size)
pval.perm.test[i]  <- TwoSample.test(x, y, test = "perm", alpha = alpha, effect_size = effect_size, B = n_boot)
pval.boot.test[i]  <- two_sample_bootstrap_p_value(x, y, effect_size = effect_size, n_bootstrap = n_boot)
# Adaptive t/permutation
if (shapiro.test(x)$p.value > alpha & shapiro.test(y)$p.value > alpha) {
pval_t_perm.test[i] <- TwoSample.test(x, y, test = "t", alpha = alpha, effect_size = effect_size)
} else {
pval_t_perm.test[i] <- TwoSample.test(x, y, test = "perm", alpha = alpha, effect_size = effect_size, B = n_boot)
}
# Adaptive t/bootstrap
if (shapiro.test(x)$p.value > alpha & shapiro.test(y)$p.value > alpha) {
pval_t_boot.test[i] <- TwoSample.test(x, y, test = "t", alpha = alpha, effect_size = effect_size)
} else {
pval_t_boot.test[i] <- two_sample_bootstrap_p_value(x, y, effect_size = effect_size, n_bootstrap = n_boot)
}
}
# Fill in the type I error matrices
t_test_mat[s, d]   <- mean(pval.t_test < alpha)
wilcox_mat[s, d]   <- mean(pval.wilcox.test < alpha)
split_mat[s, d]    <- mean(pval.split.test < alpha)
perm_mat[s, d]     <- mean(pval.perm.test < alpha)
boot_mat[s, d]     <- mean(pval.boot.test < alpha)
t_perm_mat[s, d]   <- mean(pval_t_perm.test < alpha)
t_boot_mat[s, d]   <- mean(pval_t_boot.test < alpha)
# Simulated computations (Replace with actual test code)
Sys.sleep(0.1)  # Simulates computation time
p()  # Increment progress bar
}
}
})
# Print the results nicely
cat("\nType I Error - t-test:\n")
print(round(t_test_mat, 3))
cat("\nType I Error - Wilcoxon test:\n")
print(round(wilcox_mat, 3))
cat("\nType I Error - 2-stage split test:\n")
print(round(split_mat, 3))
cat("\nType I Error - Permutation test:\n")
print(round(perm_mat, 3))
cat("\nType I Error - Bootstrap test:\n")
print(round(boot_mat, 3))
cat("\nType I Error - Adaptive t/perm test:\n")
print(round(t_perm_mat, 3))
cat("\nType I Error - Adaptive t/bootstrap test:\n")
print(round(t_boot_mat, 3))
cat("\nType I Error - t-test:\n")
print(round(t_test_mat, 3))
# Print the results nicely
cat("\nType I Error - t-test:\n")
print(round(t_test_mat, 3))
cat("\nType I Error - Wilcoxon test:\n")
print(round(wilcox_mat, 3))
cat("\nType I Error - 2-stage split test:\n")
print(round(split_mat, 3))
cat("\nType I Error - Permutation test:\n")
print(round(perm_mat, 3))
cat("\nType I Error - Bootstrap test:\n")
print(round(boot_mat, 3))
cat("\nType I Error - Adaptive t/perm test:\n")
print(round(t_perm_mat, 3))
cat("\nType I Error - Adaptive t/bootstrap test:\n")
print(round(t_boot_mat, 3))
print(round(t_boot_mat, 3))
cat("\nType I Error - Adaptive t/bootstrap test:\n")
# Load user-defined functions
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/Comparing Type I error for different test methods")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
# Set seed and simulation parameters
set.seed(12345)
Nsim <- 100
sample_size_vec <- c(8, 10)#, 15, 20, 25, 30)
distribution_vec <- c("Normal", "Exponential", "LogNormal")
alpha <- 0.05
n_boot <- 100
effect_size <- 0.0  # Type I error = Null is true
# Initialize result matrices
t_test_mat     <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
wilcox_mat     <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
split_mat      <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
perm_mat       <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
boot_mat       <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
t_perm_mat     <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
t_boot_mat     <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
rownames(t_test_mat) <- sample_size_vec
colnames(t_test_mat) <- distribution_vec
rownames(wilcox_mat) <- rownames(split_mat) <- rownames(perm_mat) <- rownames(boot_mat) <- rownames(t_perm_mat) <- rownames(t_boot_mat) <- sample_size_vec
colnames(wilcox_mat) <- colnames(split_mat) <- colnames(perm_mat) <- colnames(boot_mat) <- colnames(t_perm_mat) <- colnames(t_boot_mat) <- distribution_vec
handlers(global = TRUE)
handlers("txtprogressbar")  # Ensure progress bar works in non-parallel runs
with_progress({
p <- progressor(steps = length(distribution_vec) * length(sample_size_vec))
# Start simulation
for (d in seq_along(distribution_vec)) {
dist_current <- distribution_vec[d]
for (s in seq_along(sample_size_vec)) {
n <- sample_size_vec[s]
# Storage for p-values for each test method
pval.t_test <- numeric(Nsim)
pval.wilcox.test <- numeric(Nsim)
pval.split.test <- numeric(Nsim)
pval.perm.test <- numeric(Nsim)
pval.boot.test <- numeric(Nsim)
pval_t_perm.test <- numeric(Nsim)
pval_t_boot.test <- numeric(Nsim)
for (i in 1:Nsim) {
x <- generate_data(n, dist_current)
y <- generate_data(n, dist_current)
pval.t_test[i]     <- TwoSample.test(x, y, test = "t", alpha = alpha, effect_size = effect_size)
pval.wilcox.test[i]<- TwoSample.test(x, y, test = "Wilcox", alpha = alpha, effect_size = effect_size)
pval.split.test[i] <- TwoSample.test(x, y, test = "2stage.split", alpha = alpha, effect_size = effect_size)
pval.perm.test[i]  <- TwoSample.test(x, y, test = "perm", alpha = alpha, effect_size = effect_size, B = n_boot)
pval.boot.test[i]  <- two_sample_bootstrap_p_value(x, y, effect_size = effect_size, n_bootstrap = n_boot)
# Adaptive t/permutation
if (shapiro.test(x)$p.value > alpha & shapiro.test(y)$p.value > alpha) {
pval_t_perm.test[i] <- TwoSample.test(x, y, test = "t", alpha = alpha, effect_size = effect_size)
} else {
pval_t_perm.test[i] <- TwoSample.test(x, y, test = "perm", alpha = alpha, effect_size = effect_size, B = n_boot)
}
# Adaptive t/bootstrap
if (shapiro.test(x)$p.value > alpha & shapiro.test(y)$p.value > alpha) {
pval_t_boot.test[i] <- TwoSample.test(x, y, test = "t", alpha = alpha, effect_size = effect_size)
} else {
pval_t_boot.test[i] <- two_sample_bootstrap_p_value(x, y, effect_size = effect_size, n_bootstrap = n_boot)
}
}
# Fill in the type I error matrices
t_test_mat[s, d]   <- mean(pval.t_test < alpha)
wilcox_mat[s, d]   <- mean(pval.wilcox.test < alpha)
split_mat[s, d]    <- mean(pval.split.test < alpha)
perm_mat[s, d]     <- mean(pval.perm.test < alpha)
boot_mat[s, d]     <- mean(pval.boot.test < alpha)
t_perm_mat[s, d]   <- mean(pval_t_perm.test < alpha)
t_boot_mat[s, d]   <- mean(pval_t_boot.test < alpha)
# Simulated computations (Replace with actual test code)
Sys.sleep(0.1)  # Simulates computation time
p()  # Increment progress bar
}
}
})
# Print the results nicely
cat("\nType I Error - t-test:\n")
print(round(t_test_mat, 3))
cat("\nType I Error - Wilcoxon test:\n")
print(round(wilcox_mat, 3))
cat("\nType I Error - 2-stage split test:\n")
print(round(split_mat, 3))
cat("\nType I Error - Permutation test:\n")
print(round(perm_mat, 3))
cat("\nType I Error - Bootstrap test:\n")
print(round(boot_mat, 3))
cat("\nType I Error - Adaptive t/perm test:\n")
print(round(t_perm_mat, 3))
cat("\nType I Error - Adaptive t/bootstrap test:\n")
print(round(t_boot_mat, 3))
cat("\nType I Error - t-test:\n")
print(round(t_test_mat, 3))
# Load required libraries
library(parallel)
# Load user-defined functions
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/SPRING2025/DOWNSTREAM TESTS/Comparing Type I error for different test methods")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
# Set seed and simulation parameters
set.seed(12345)
Nsim <- 100
sample_size_vec <- c(8, 10, 15, 20, 25, 30)
distribution_vec <- c("Normal", "Exponential", "LogNormal")
alpha <- 0.05
n_boot <- 100
effect_size <- 0.0  # Type I error = Null is true
# Initialize result matrices
t_test_mat     <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
wilcox_mat     <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
split_mat      <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
perm_mat       <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
boot_mat       <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
t_perm_mat     <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
t_boot_mat     <- matrix(NA, nrow = length(sample_size_vec), ncol = length(distribution_vec))
rownames(t_test_mat) <- sample_size_vec
colnames(t_test_mat) <- distribution_vec
rownames(wilcox_mat) <- rownames(split_mat) <- rownames(perm_mat) <- rownames(boot_mat) <- rownames(t_perm_mat) <- rownames(t_boot_mat) <- sample_size_vec
colnames(wilcox_mat) <- colnames(split_mat) <- colnames(perm_mat) <- colnames(boot_mat) <- colnames(t_perm_mat) <- colnames(t_boot_mat) <- distribution_vec
# Start simulation
for (d in seq_along(distribution_vec)) {
dist_current <- distribution_vec[d]
for (s in seq_along(sample_size_vec)) {
n <- sample_size_vec[s]
# Run simulations in parallel
results <- mclapply(1:Nsim, function(i) {
set.seed(12345 + i)  # Ensure unique seed for each iteration
x <- generate_data(n, dist_current)
y <- generate_data(n, dist_current)
# Compute p-values for all tests
pval.t_test <- TwoSample.test(x, y, test = "t", alpha = alpha, effect_size = effect_size)
pval.wilcox.test <- TwoSample.test(x, y, test = "Wilcox", alpha = alpha, effect_size = effect_size)
pval.split.test <- TwoSample.test(x, y, test = "2stage.split", alpha = alpha, effect_size = effect_size)
pval.perm.test <- TwoSample.test(x, y, test = "perm", alpha = alpha, effect_size = effect_size, B = n_boot)
pval.boot.test <- two_sample_bootstrap_p_value(x, y, effect_size = effect_size, n_bootstrap = n_boot)
# Adaptive t/permutation
if (shapiro.test(x)$p.value > alpha & shapiro.test(y)$p.value > alpha) {
pval_t_perm <- TwoSample.test(x, y, test = "t", alpha = alpha, effect_size = effect_size)
} else {
pval_t_perm <- TwoSample.test(x, y, test = "perm", alpha = alpha, effect_size = effect_size, B = n_boot)
}
# Adaptive t/bootstrap
if (shapiro.test(x)$p.value > alpha & shapiro.test(y)$p.value > alpha) {
pval_t_boot <- TwoSample.test(x, y, test = "t", alpha = alpha, effect_size = effect_size)
} else {
pval_t_boot <- two_sample_bootstrap_p_value(x, y, effect_size = effect_size, n_bootstrap = n_boot)
}
# Return results as a list
list(
t_test = pval.t_test,
wilcox = pval.wilcox.test,
split = pval.split.test,
perm = pval.perm.test,
boot = pval.boot.test,
t_perm = pval_t_perm,
t_boot = pval_t_boot
)
}, mc.cores = detectCores() - 1)  # Adjust cores as needed
# Extract p-values and compute Type I error rates
t_test_mat[s, d]   <- mean(sapply(results, function(res) res$t_test) < alpha)
wilcox_mat[s, d]   <- mean(sapply(results, function(res) res$wilcox) < alpha)
split_mat[s, d]    <- mean(sapply(results, function(res) res$split) < alpha)
perm_mat[s, d]     <- mean(sapply(results, function(res) res$perm) < alpha)
boot_mat[s, d]     <- mean(sapply(results, function(res) res$boot) < alpha)
t_perm_mat[s, d]   <- mean(sapply(results, function(res) res$t_perm) < alpha)
t_boot_mat[s, d]   <- mean(sapply(results, function(res) res$t_boot) < alpha)
}
}
# Print the results (unchanged)
cat("\nType I Error - t-test:\n")
print(round(t_test_mat, 3))
cat("\nType I Error - Wilcoxon test:\n")
print(round(wilcox_mat, 3))
cat("\nType I Error - 2-stage split test:\n")
print(round(split_mat, 3))
cat("\nType I Error - Permutation test:\n")
print(round(perm_mat, 3))
cat("\nType I Error - Bootstrap test:\n")
print(round(boot_mat, 3))
cat("\nType I Error - Adaptive t/perm test:\n")
print(round(t_perm_mat, 3))
cat("\nType I Error - Adaptive t/bootstrap test:\n")
print(round(t_boot_mat, 3))
