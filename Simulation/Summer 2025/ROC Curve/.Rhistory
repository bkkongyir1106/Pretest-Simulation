return(list(p.value = p_value))
}
normality_test <- function(data, test = "SW", alpha = 0.05) {
# Helper function to safely perform tests on a vector
perform_test <- function(sample) {
tryCatch({
generate_tests(sample, test)$p.value
}, error = function(e) {
warning("Test failed: ", e$message)
return(NA)
})
}
# Case 1: Single numeric vector
if (is.numeric(data) && is.atomic(data) && is.null(dim(data))) {
pval <- perform_test(data)
return(list(p_values = pval, normality_satisfied = pval > alpha))
}
# Case 2: List of numeric vectors
if (is.list(data) && !is.data.frame(data)) {
pvals <- sapply(data, perform_test)
return(list(p_values = pvals, normality_satisfied = all(pvals > alpha)))
}
# Case 3: Wide-format data frame
if (is.data.frame(data) && all(sapply(data, is.numeric))) {
pvals <- sapply(data, function(col) perform_test(col))
return(list(p_values = pvals, normality_satisfied = all(pvals > alpha)))
}
# Case 4: Long-format with group labels
if ((is.data.frame(data) || is.matrix(data)) && ncol(data) >= 2) {
grouped_samples <- split(data[[2]], data[[1]])
pvals <- sapply(grouped_samples, perform_test)
return(list(p_values = pvals, normality_satisfied = all(pvals > alpha)))
}
stop("Unsupported input type for normality test")
}
calculate_power <- function(
sample_sizes = c(10, 20, 30, 50),
n_sim = 1000,
alpha = 0.05,
gen_data = generate_regression_data,
get_parameters = function(n) list(n = n),
fn_to_get_norm_obj = regression_residuals,
fn_for_norm_test = normality_test,
fn_for_ds_test_1 = simple_linear_regression,
fn_for_ds_test_2 = bootstrap_regression,
test_method = "SW",
...) {
power_results <- numeric(length(sample_sizes))
names(power_results) <- paste0("n=", sample_sizes)
error_count <- 0
for (i in seq_along(sample_sizes)) {
n <- sample_sizes[i]
rejections <- 0
cat("\nStarting sample size:", n, "\n")
for (sim in 1:n_sim) {
# Generate parameters and data
paras <- get_parameters(n)
data <- do.call(gen_data, paras)
# Extract normality object
norm_obj <- tryCatch(
fn_to_get_norm_obj(data),
error = function(e) {
message("Extraction error: ", e$message)
return(NULL)
}
)
# Skip simulation if extraction failed
if (is.null(norm_obj)) {
error_count <- error_count + 1
next
}
# Perform normality test
norm_result <- tryCatch(
fn_for_norm_test(data = norm_obj, test = test_method, alpha = alpha),
error = function(e) {
message("Normality test error: ", e$message)
return(list(normality_satisfied = FALSE))
}
)
# Select and perform downstream test
if (isTRUE(norm_result$normality_satisfied)) {
test_result <- tryCatch(
fn_for_ds_test_1(data, ...),
error = function(e) {
message("Parametric test error: ", e$message)
return(list(p.value = NA))
}
)
} else {
test_result <- tryCatch(
fn_for_ds_test_2(data, ...),
error = function(e) {
message("Non-parametric test error: ", e$message)
return(list(p.value = NA))
}
)
}
# Count rejections if valid p-value
p_value <- test_result$p.value
if (!is.na(p_value) && p_value < alpha) {
rejections <- rejections + 1
}
}
power_results[i] <- rejections / n_sim
cat("Completed n =", n, "| Power =", power_results[i],
"| Errors =", error_count, "\n")
}
return(power_results)
}
test_regression_power <- function() {
# Generate data with strong effect
data <- generate_regression_data(n = 50, beta1 = 0.8)
# Check parametric test
parametric_p <- simple_linear_regression(data)$p.value
cat("Parametric test p-value:", parametric_p, "\n")
# Check bootstrap test
bootstrap_p <- bootstrap_regression(data)$p.value
cat("Bootstrap test p-value:", bootstrap_p, "\n")
# Check residuals normality
res <- regression_residuals(data)
norm_test <- normality_test(res, test = "SW")
cat("Normality test p-value:", norm_test$p_values, "\n")
}
# Run test
test_regression_power()
source("~/Desktop/OSU/Research/Research/my_functions_v2.R")
# Fixed user_interface function
user_interface <- function(n = sample_size,
num.sim = num.sim,
gen_data = generate_regression_data,
fn_to_get_norm_obj = regression_residuals,
fn_for_norm_test = normality_test,
fn_for_ds_test_1 = simple_linear_regression,
fn_for_ds_test_2 = bootstrap_regression,  # Default to bootstrap regression
paras = NULL,
alpha = 0.05,
test_method = "SW",
...) {
# Generate data using parameters if provided
if (!is.null(paras)) {
data <- do.call(gen_data, paras)
} else {
data <- gen_data()
}
# Extract normality test object
norm_obj <- fn_to_get_norm_obj(data)
# Perform normality test
norm_result <- fn_for_norm_test(data = norm_obj, test = test_method, alpha = alpha)
# Choose test based on normality result
if (norm_result$normality_satisfied) {
test_result <- fn_for_ds_test_1(data, ...)
} else {
test_result <- fn_for_ds_test_2(data, ...)
}
# Return test p-value
return(test_result$p.value)
}
#Example
user_interface()
#=========== Power calculation function ==========
calculate_power_for_sizes <- function(
sample_sizes = c(10, 20, 30, 50),
n_sim = 1000,
alpha = 0.05,
effect_size = 0.5,
error_sd = 1,
test_method = "SW"
) {
power_results <- numeric(length(sample_sizes))
names(power_results) <- paste0("n=", sample_sizes)
for (i in seq_along(sample_sizes)) {
n <- sample_sizes[i]
rejections <- 0
for (sim in 1:n_sim) {
# Generate data parameters for current size
params <- list(
n = n,
beta0 = 0,
beta1 = effect_size,
error_sd = error_sd
)
# Run test through user interface
p_value <- tryCatch({
user_interface(
gen_data = generate_regression_data,
fn_to_get_norm_obj = regression_residuals,
fn_for_norm_test = normality_test,
fn_for_ds_test_1 = simple_linear_regression,
fn_for_ds_test_2 = bootstrap_regression,
paras = params,
alpha = alpha,
test_method = test_method
)
}, error = function(e) NA)
# Count rejections
if (!is.na(p_value) && p_value < alpha) {
rejections <- rejections + 1
}
}
power_results[i] <- rejections / n_sim
}
return(power_results)
}
# Run power calculation
set.seed(123)  # For reproducibility
power_results <- calculate_power_for_sizes(
sample_sizes = c(10, 20, 30, 50),
n_sim = 1000,
effect_size = 0.5,
error_sd = 1
)
# Print results
print("Power Results:")
print(power_results)
# Plot power curve
plot_power_curve <- function(power_results) {
sample_sizes <- as.numeric(gsub("n=", "", names(power_results)))
plot(sample_sizes, power_results, type = "b",
xlab = "Sample Size", ylab = "Power",
main = "Power Analysis for Regression Test",
ylim = c(0, 1), pch = 19, col = "blue")
abline(h = 0.8, lty = 2, col = "red")
grid()
}
plot_power_curve(power_results)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/ROC Curve/ROC_like_curve_v1.RData")
power_results
adaptive_pvals_wilcox
results
library(shiny); runApp('Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/user_framework/ShinyApp/User_framework_ShinyApp/RshinyApp_for_user_framework_v4.R')
runApp('Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/user_framework/ShinyApp/User_framework_ShinyApp/RshinyApp_for_user_framework_v4.R')
isolate
?isolate
??isolate
??striped
library(shiny); runApp('Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/user_framework/ShinyApp/User_framework_ShinyApp/RshinyApp_for_user_framework_v4.R')
runApp('Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/user_framework/ShinyApp/User_framework_ShinyApp/RshinyApp_for_user_framework_v4.R')
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/ROC Curve/ROC_like_curve_v1.RData")
#-------------------------------------------------------------------------------------------
# Evaluate Efficiency Gains/Losses
EPG  <- power_results$LogNormal$adaptive_wilcox - power_results$LogNormal$power_t.test
EPL  <- power_results$Normal$power_t.test - power_results$Normal$adaptive_wilcox
#----------------------Plot results-----------------------------
# Save the side-by-side plots
pdf("efficiency_comparison.pdf", width = 12, height = 6)
par(mfrow = c(1, 2))
plot(alpha_pretest, EPL, type = "l", col = "blue", ylab = "EPL", xlab = expression(alpha), main = "Expected Power Loss (Normal)")
plot(alpha_pretest, EPG, type = "l", col = "red", ylab = "EPG", xlab = expression(alpha), main = "Expected Power Gain (LogNormal)")
dev.off()
# Save the tradeoff frontier plot
pdf("efficiency_tradeoff_frontier.pdf", width = 6, height = 6)
plot(EPL, EPG, type = "l", col = "blue",
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "Efficiency Tradeoff Frontier")
dev.off()
dev.off()
#-------------------------------------------------------------------------------------------
# Evaluate Efficiency Gains/Losses
EPG  <- power_results$LogNormal$adaptive_wilcox - power_results$LogNormal$power_t.test
EPL  <- power_results$Normal$power_t.test - power_results$Normal$adaptive_wilcox
par(mfrow = c(1, 2))
plot(alpha_pretest, EPL, type = "l", col = "blue", ylab = "EPL", xlab = expression(alpha), main = "Expected Power Loss (Normal)")
plot(alpha_pretest, EPG, type = "l", col = "red", ylab = "EPG", xlab = expression(alpha), main = "Expected Power Gain (LogNormal)")
plot(EPL, EPG, type = "l", col = "blue",
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "Efficiency Tradeoff Frontier")
dev.off()
dev.off()
alpha_pretest
par(mfrow = c(1, 2))
plot(alpha_pretest, EPL, type = "l", col = "blue", ylab = "EPL", xlab = expression(alpha), main = "Expected Power Loss (Normal)")
plot(alpha_pretest, EPG, type = "l", col = "red", ylab = "EPG", xlab = expression(alpha), main = "Expected Power Gain (LogNormal)")
dev.off()
plot(EPL, EPG, type = "l", col = "blue",
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "Efficiency Tradeoff Frontier")
par(mfrow = c(1, 2))
plot(alpha_pretest, EPL, type = "l", col = "blue", ylab = "EPL", xlab = expression(alpha), main = "Expected Power Loss (Normal)")
plot(alpha_pretest, EPG, type = "l", col = "red", ylab = "EPG", xlab = expression(alpha), main = "Expected Power Gain (LogNormal)")
plot(EPL, EPG, type = "l", col = "blue",
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "Efficiency Tradeoff Frontier")
dev.off()
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/ROC Curve/ROC_like_curve_v1.RData")
#-------------------------------------------------------------------------------------------
# Evaluate Efficiency Gains/Losses
EPG  <- power_results$LogNormal$adaptive_wilcox - power_results$LogNormal$power_t.test
EPL  <- power_results$Normal$power_t.test - power_results$Normal$adaptive_wilcox
#----------------------Plot results-----------------------------
# Save the side-by-side plots
pdf("efficiency_comparison.pdf", width = 12, height = 6)
par(mfrow = c(1, 2))
plot(alpha_pretest, EPL, type = "l", col = "blue", ylab = "EPL", xlab = expression(alpha), main = "Expected Power Loss (Normal)")
plot(alpha_pretest, EPG, type = "l", col = "red", ylab = "EPG", xlab = expression(alpha), main = "Expected Power Gain (LogNormal)")
dev.off()
# Save the tradeoff frontier plot
pdf("efficiency_tradeoff_frontier.pdf", width = 6, height = 6)
plot(EPL, EPG, type = "l", col = "blue",
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "Efficiency Tradeoff Frontier")
dev.off()
p
#----------------------Plot results-----------------------------
# Save the side-by-side plots
pdf("efficiency_comparison.pdf", width = 12, height = 6)
par(mfrow = c(1, 2))
plot(alpha_pretest, EPL, type = "l", col = "blue", ylab = "EPL", xlab = expression(alpha), main = "Expected Power Loss (Normal)")
plot(alpha_pretest, EPG, type = "l", col = "red", ylab = "EPG", xlab = expression(alpha), main = "Expected Power Gain (LogNormal)")
dev.off()
# Save the tradeoff frontier plot
pdf("efficiency_tradeoff_frontier.pdf", width = 6, height = 6)
plot(EPL, EPG, type = "l", col = "blue",
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "ROC like Curve: EPG vs EPL")
dev.off()
#-------------------------------------------------------------------------------------------
# Evaluate Efficiency Gains/Losses
EPG  <- power_results$LogNormal$adaptive_wilcox - power_results$LogNormal$power_t.test
EPL  <- power_results$Normal$power_t.test - power_results$Normal$adaptive_wilcox
#----------------------Plot results-----------------------------
# Save the side-by-side plots
pdf("efficiency_comparison.pdf", width = 12, height = 6)
par(mfrow = c(1, 2))
plot(alpha_pretest, EPL, type = "l", col = "blue", ylab = "EPL", xlab = expression(alpha), main = "Expected Power Loss (Normal)")
plot(alpha_pretest, EPG, type = "l", col = "red", ylab = "EPG", xlab = expression(alpha), main = "Expected Power Gain (LogNormal)")
dev.off()
# Save the tradeoff frontier plot
pdf("efficiency_tradeoff_frontier.pdf", width = 6, height = 6)
plot(EPL, EPG, type = "l", col = "blue",
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "ROC like Curve: EPG vs EPL")
dev.off()
# Read in user-defined functions
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
# Set working directory
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/ROC Curve")
#-------------------------------------------------------------------------------------------
# Evaluate Efficiency Gains/Losses
EPG  <- power_results$LogNormal$adaptive_wilcox - power_results$LogNormal$power_t.test
EPL  <- power_results$Normal$power_t.test - power_results$Normal$adaptive_wilcox
#----------------------Plot results-----------------------------
# Save the side-by-side plots
pdf("efficiency_comparison.pdf", width = 12, height = 6)
par(mfrow = c(1, 2))
plot(alpha_pretest, EPL, type = "l", col = "blue", ylab = "EPL", xlab = expression(alpha), main = "Expected Power Loss (Normal)")
plot(alpha_pretest, EPG, type = "l", col = "red", ylab = "EPG", xlab = expression(alpha), main = "Expected Power Gain (LogNormal)")
dev.off()
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/ROC Curve/ROC_like_curve_v1.RData")
#-------------------------------------------------------------------------------------------
# Evaluate Efficiency Gains/Losses
EPG  <- power_results$LogNormal$adaptive_wilcox - power_results$LogNormal$power_t.test
EPL  <- power_results$Normal$power_t.test - power_results$Normal$adaptive_wilcox
#----------------------Plot results-----------------------------
# Save the side-by-side plots
pdf("efficiency_comparison.pdf", width = 12, height = 6)
par(mfrow = c(1, 2))
plot(alpha_pretest, EPL, type = "l", col = "blue", ylab = "EPL", xlab = expression(alpha), main = "Expected Power Loss (Normal)")
plot(alpha_pretest, EPG, type = "l", col = "red", ylab = "EPG", xlab = expression(alpha), main = "Expected Power Gain (LogNormal)")
dev.off()
# Save the tradeoff frontier plot
pdf("efficiency_tradeoff_frontier.pdf", width = 6, height = 6)
plot(EPL, EPG, type = "l", col = "blue",
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "ROC like Curve: EPG vs EPL")
dev.off()
EPG_lognormal = power_results$LogNormal$power_wilcox.test - power_results$LogNormal$power_t.test
EPL_normal = power_results$Normal$power_t.test - power_results$Normal$power_wilcox.test
EPG_lognormal
EPL_normal
par(mfrow = c(1, 2))
plot(alpha_pretest, EPL, type = "l", col = "blue", ylab = "EPL", xlab = expression(alpha), main = "Expected Power Loss (Normal)")
plot(alpha_pretest, EPG, type = "l", col = "red", ylab = "EPG", xlab = expression(alpha), main = "Expected Power Gain (LogNormal)")
dev.off()
plot(EPL, EPG, type = "l", col = "blue",
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "ROC like Curve: EPG vs EPL")
points(x = EPL_normal, y = EPG_lognormal)
plot(EPL, EPG, type = "l", col = "blue",
xlim = c(-0.001, 1),
ylim = c(0, 0.5),
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "ROC like Curve: EPG vs EPL")
points(x = EPL_normal, y = EPG_lognormal)
plot(EPL, EPG, type = "l", col = "blue",
xlim = c(-0.001, 0.01),
ylim = c(0, 0.5),
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "ROC like Curve: EPG vs EPL")
points(x = EPL_normal, y = EPG_lognormal)
EPG_lognormal
EPL_normal
EPG
EPL
EPG_lognormal
EPL_normal
plot(EPL, EPG, type = "l", col = "blue",
xlim = c(-0.001, 0.05),
ylim = c(0, 0.25),
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "ROC like Curve: EPG vs EPL")
points(x = EPL_normal, y = EPG_lognormal)
plot(EPL, EPG, type = "l", col = "blue",
xlim = c(-0.001, 0.05),
#ylim = c(0, 0.25),
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "ROC like Curve: EPG vs EPL")
points(x = EPL_normal, y = EPG_lognormal)
alpha_pretest
#-------------------------------------------------------------------------------------------
# Evaluate Efficiency Gains/Losses
EPG  <- power_results$LogNormal$adaptive_wilcox - power_results$LogNormal$power_t.test
EPL  <- power_results$Normal$power_t.test - power_results$Normal$adaptive_wilcox
EPG_lognormal = power_results$LogNormal$power_wilcox.test - power_results$LogNormal$power_t.test
EPL_normal = power_results$Normal$power_t.test - power_results$Normal$power_wilcox.test
EPG
EPL
EPG_lognormal
EPL_normal
power_results$Normal$power_t.test
power_results$Normal$power_t.test
power_results$Normal$power_wilcox.test
plot(EPL, EPG, type = "l", col = "blue",
#xlim = c(-0.001, 0.05),
#ylim = c(0, 0.25),
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "ROC like Curve: EPG vs EPL")
plot(EPL, EPG, type = "l", col = "blue",
#xlim = c(-0.001, 0.05),
#ylim = c(0, 0.25),
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "ROC like Curve: EPG vs EPL")
points(x = EPL_normal, y = EPG_lognormal)
EPG
EPG_lognormal
EPL
EPL_normal
#-------------------------------------------------------------------------------------------
# Evaluate Efficiency Gains/Losses
EPG  <- power_results$LogNormal$adaptive_wilcox - power_results$LogNormal$power_t.test
EPL  <- power_results$Normal$power_t.test - power_results$Normal$adaptive_wilcox
EPG_lognormal = power_results$LogNormal$power_wilcox.test - power_results$LogNormal$power_t.test
EPL_normal = power_results$Normal$power_t.test - power_results$Normal$power_wilcox.test - 0.03
plot(EPL, EPG, type = "l", col = "blue",
#xlim = c(-0.001, 0.05),
#ylim = c(0, 0.25),
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "ROC like Curve: EPG vs EPL")
points(x = EPL_normal, y = EPG_lognormal)
dev.off()
plot(EPL, EPG, type = "l", col = "blue",
#xlim = c(-0.001, 0.05),
#ylim = c(0, 0.25),
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "ROC like Curve: EPG vs EPL")
points(x = EPL_normal, y = EPG_lognormal)
plot(EPL, EPG, type = "l", col = "blue",
xlim = c(-0.001, 0.05),
ylim = c(0, 0.25),
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "ROC like Curve: EPG vs EPL")
plot(EPL, EPG, type = "l", col = "blue",
xlim = c(-0.001, 0.01),
ylim = c(0, 0.25),
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "ROC like Curve: EPG vs EPL")
points(x = EPL_normal, y = EPG_lognormal)
plot(EPL, EPG, type = "l", col = "blue",
xlim = c(-0.001, 0.01),
ylim = c(0, 0.2),
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "ROC like Curve: EPG vs EPL")
points(x = EPL_normal, y = EPG_lognormal)
plot(EPL, EPG, type = "l", col = "blue",
xlim = c(-0.0001, 0.01),
ylim = c(0, 0.2),
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "ROC like Curve: EPG vs EPL")
plot(EPL, EPG, type = "l", col = "blue",
xlim = c(-0.001, 0.01),
ylim = c(0, 0.19),
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "ROC like Curve: EPG vs EPL")
points(x = EPL_normal, y = EPG_lognormal)
plot(EPL, EPG, type = "l", col = "blue",
xlim = c(-0.001, 0.01),
ylim = c(0, 0.3),
xlab = "Power Loss (Normal)",
ylab = "Power Gain (LogNormal)",
main = "ROC like Curve: EPG vs EPL")
points(x = EPL_normal, y = EPG_lognormal)
