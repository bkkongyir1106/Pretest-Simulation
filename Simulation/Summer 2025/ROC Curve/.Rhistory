source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
generate_pval <- function(n, N, dist, effect_size, B){
pval_t.test <- pval_u.test <- pval_perm.test <- numeric(N)
p_sw_x <- p_sw_y <- numeric(N)
for(i in 1:N){
x <- generate_data(n, dist)
y <- generate_data(n, dist)
p_sw_x[i] <- shapiro.test(x)$p.value
p_sw_y[i] <- shapiro.test(y)$p.value
pval_t.test[i] <- t.test(x, y + effect_size)$p.value
pval_u.test[i] <- wilcox.test(x, y + effect_size)$p.value
pval_perm.test[i] <- two_sample_permutation_test(x, y + effect_size, B)
}
list(
p_sw_x = p_sw_x,
p_sw_y = p_sw_y,
pval_t.test = pval_t.test,
pval_u.test = pval_u.test,
pval_perm.test = pval_perm.test
)
}
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
generate_pval <- function(n, N, dist, effect_size, B){
pval_t.test <- pval_u.test <- pval_perm.test <- numeric(N)
p_sw_x <- p_sw_y <- numeric(N)
for(i in 1:N){
x <- generate_data(n, dist)
y <- generate_data(n, dist)
p_sw_x[i] <- shapiro.test(x)$p.value
p_sw_y[i] <- shapiro.test(y)$p.value
pval_t.test[i] <- t.test(x, y + effect_size)$p.value
pval_u.test[i] <- wilcox.test(x, y + effect_size)$p.value
pval_perm.test[i] <- two_sample_permutation_test(x, y + effect_size, B)
}
list(
p_sw_x = p_sw_x,
p_sw_y = p_sw_y,
pval_t.test = pval_t.test,
pval_u.test = pval_u.test,
pval_perm.test = pval_perm.test
)
}
# Parameters
set.seed(12345)
alpha_pretest <- seq(from = 0.01, to = 0.1, by = 0.01)
sample_sizes <- c(8, 10, 20, 30, 40, 50)
Nsim <- 1e2
perm <- 1e2
distributions <- c("Normal", "LogNormal")
effect_size <- 0.5
# Store results
results_all <- list()
for (dist in distributions) {
results_all[[dist]] <- list()
for (n in sample_sizes) {
results <- generate_pval(n = n, N = Nsim, dist = dist, effect_size = effect_size, B = perm)
power_t <- mean(results$pval_t.test < 0.05)
power_u <- mean(results$pval_u.test < 0.05)
power_perm <- mean(results$pval_perm.test < 0.05)
power_adaptive <- numeric(length(alpha_pretest))
pr_sw <- numeric(length(alpha_pretest))
for (j in seq_along(alpha_pretest)) {
alpha <- alpha_pretest[j]
pval_adaptive <- ifelse(
results$p_sw_x > alpha & results$p_sw_y > alpha,
results$pval_t.test,
results$pval_u.test
)
power_adaptive[j] <- mean(pval_adaptive < 0.05)
pr_sw = mean(results$p_sw_x <= alpha & results$p_sw_y <= alpha)
}
# Store average power over all alpha levels
results_all[[dist]][[as.character(n)]] <- list(
pr_sw = mean(pr_sw),
power_t_test = power_t,
power_u_test = power_u,
power_perm_test = power_perm,
mean_power_adaptive = mean(power_adaptive)
)
}
}
mean_power_adaptive
results_all
results_all[[dist]]
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
generate_pval <- function(n, N, dist, effect_size, B){
pval_t.test <- pval_u.test <- pval_perm.test <- numeric(N)
p_sw_x <- p_sw_y <- numeric(N)
for(i in 1:N){
x <- generate_data(n, dist)
y <- generate_data(n, dist)
p_sw_x[i] <- shapiro.test(x)$p.value
p_sw_y[i] <- shapiro.test(y)$p.value
pval_t.test[i] <- t.test(x, y + effect_size)$p.value
pval_u.test[i] <- wilcox.test(x, y + effect_size)$p.value
pval_perm.test[i] <- two_sample_permutation_test(x, y + effect_size, B)
}
list(
p_sw_x = p_sw_x,
p_sw_y = p_sw_y,
pval_t.test = pval_t.test,
pval_u.test = pval_u.test,
pval_perm.test = pval_perm.test
)
}
# Parameters
set.seed(12345)
alpha_pretest <- seq(from = 0.01, to = 0.1, by = 0.01)
sample_sizes <- c(8, 10, 20, 30, 40, 50)
Nsim <- 1e2
perm <- 1e2
distributions <- c("Normal", "LogNormal")
effect_size <- 0.5
# Store results
results_all <- list()
for (dist in distributions) {
results_all[[dist]] <- list()
for (n in sample_sizes) {
results_all[[dist]][[n]] <- list()
results <- generate_pval(n = n, N = Nsim, dist = dist, effect_size = effect_size, B = perm)
power_t <- mean(results$pval_t.test < 0.05)
power_u <- mean(results$pval_u.test < 0.05)
power_perm <- mean(results$pval_perm.test < 0.05)
power_adaptive <- numeric(length(alpha_pretest))
pr_sw <- numeric(length(alpha_pretest))
for (j in seq_along(alpha_pretest)) {
alpha <- alpha_pretest[j]
pval_adaptive <- ifelse(
results$p_sw_x > alpha & results$p_sw_y > alpha,
results$pval_t.test,
results$pval_u.test
)
power_adaptive[j] <- mean(pval_adaptive < 0.05)
pr_sw = mean(results$p_sw_x <= alpha & results$p_sw_y <= alpha)
}
# Store average power over all alpha levels
results_all[[dist]][[as.character(n)]] <- list(
pr_sw = mean(pr_sw),
power_t_test = power_t,
power_u_test = power_u,
power_perm_test = power_perm,
mean_power_adaptive = mean(power_adaptive)
)
}
}
results_all
# Load required functions
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
# Generate p-values function
generate_pval <- function(n, N, dist, effect_size, B){
pval_t.test <- pval_u.test <- pval_perm.test <- numeric(N)
p_sw_x <- p_sw_y <- numeric(N)
for(i in 1:N){
x <- generate_data(n, dist)
y <- generate_data(n, dist)
p_sw_x[i] <- shapiro.test(x)$p.value
p_sw_y[i] <- shapiro.test(y)$p.value
pval_t.test[i] <- t.test(x, y + effect_size)$p.value
pval_u.test[i] <- wilcox.test(x, y + effect_size)$p.value
pval_perm.test[i] <- two_sample_permutation_test(x, y + effect_size, B)
}
list(
p_sw_x = p_sw_x,
p_sw_y = p_sw_y,
pval_t.test = pval_t.test,
pval_u.test = pval_u.test,
pval_perm.test = pval_perm.test
)
}
# Parameters
set.seed(12345)
alpha_pretest <- seq(from = 0.01, to = 0.1, by = 0.01)
sample_sizes <- c(8, 10, 20, 30, 40, 50)
Nsim <- 100
perm <- 100
distributions <- c("Normal", "LogNormal")
effect_size <- 0.5
# Store results
results_all <- list()
for (dist in distributions) {
results_all[[dist]] <- list()
for (n in sample_sizes) {
results <- generate_pval(n = n, N = Nsim, dist = dist, effect_size = effect_size, B = perm)
power_t <- mean(results$pval_t.test < 0.05)
power_u <- mean(results$pval_u.test < 0.05)
power_perm <- mean(results$pval_perm.test < 0.05)
power_adaptive <- numeric(length(alpha_pretest))
pr_sw <- numeric(length(alpha_pretest))
for (j in seq_along(alpha_pretest)) {
alpha <- alpha_pretest[j]
pval_adaptive <- ifelse(
results$p_sw_x > alpha & results$p_sw_y > alpha,
results$pval_t.test,
results$pval_u.test
)
power_adaptive[j] <- mean(pval_adaptive < 0.05)
pr_sw[j] <- mean(results$p_sw_x <= alpha & results$p_sw_y <= alpha)
}
# Store correctly using character index
results_all[[dist]][[as.character(n)]] <- list(
pr_sw = mean(pr_sw),
power_t_test = power_t,
power_u_test = power_u,
power_perm_test = power_perm,
mean_power_adaptive = mean(power_adaptive)
)
}
}
results_all
pr_sw
power_t_test
# Load required functions
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
# Generate p-values
generate_pval <- function(n, N, dist, effect_size, B){
pval_t.test <- pval_u.test <- pval_perm.test <- numeric(N)
p_sw_x <- p_sw_y <- numeric(N)
for(i in 1:N){
x <- generate_data(n, dist)
y <- generate_data(n, dist)
p_sw_x[i] <- shapiro.test(x)$p.value
p_sw_y[i] <- shapiro.test(y)$p.value
pval_t.test[i] <- t.test(x, y + effect_size)$p.value
pval_u.test[i] <- wilcox.test(x, y + effect_size)$p.value
pval_perm.test[i] <- two_sample_permutation_test(x, y + effect_size, B)
}
list(
p_sw_x = p_sw_x,
p_sw_y = p_sw_y,
pval_t.test = pval_t.test,
pval_u.test = pval_u.test,
pval_perm.test = pval_perm.test
)
}
# Parameters
set.seed(12345)
alpha_pretest <- seq(from = 0.01, to = 0.1, by = 0.01)
sample_sizes <- c(8, 10, 20, 30, 40, 50)
Nsim <- 100
perm <- 100
distributions <- c("Normal", "LogNormal")
effect_size <- 0.5
# Initialize storage
power_fixed_tests <- list()           # 2D: dist × n
power_adaptive_tests <- list()       # 3D: dist × n × alpha
for (dist in distributions) {
power_fixed_tests[[dist]] <- list()
power_adaptive_tests[[dist]] <- list()
for (n in sample_sizes) {
results <- generate_pval(n = n, N = Nsim, dist = dist, effect_size = effect_size, B = perm)
# Fixed tests power
power_fixed_tests[[dist]][[as.character(n)]] <- list(
t_test = mean(results$pval_t.test < 0.05),
u_test = mean(results$pval_u.test < 0.05),
perm_test = mean(results$pval_perm.test < 0.05)
)
# Adaptive test power for each alpha
adaptive_power <- numeric(length(alpha_pretest))
names(adaptive_power) <- alpha_pretest
for (j in seq_along(alpha_pretest)) {
alpha <- alpha_pretest[j]
pval_adaptive <- ifelse(
results$p_sw_x > alpha & results$p_sw_y > alpha,
results$pval_t.test,
results$pval_u.test
)
adaptive_power[j] <- mean(pval_adaptive < 0.05)
}
power_adaptive_tests[[dist]][[as.character(n)]] <- adaptive_power
}
}
power_adaptive_tests
power_fixed_tests
# Load required functions
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
# Generate p-values
generate_pval <- function(n, N, dist, effect_size, B){
pval_t.test <- pval_u.test <- pval_perm.test <- numeric(N)
p_sw_x <- p_sw_y <- numeric(N)
for(i in 1:N){
x <- generate_data(n, dist)
y <- generate_data(n, dist)
p_sw_x[i] <- shapiro.test(x)$p.value
p_sw_y[i] <- shapiro.test(y)$p.value
pval_t.test[i] <- t.test(x, y + effect_size)$p.value
pval_u.test[i] <- wilcox.test(x, y + effect_size)$p.value
pval_perm.test[i] <- two_sample_permutation_test(x, y + effect_size, B)
}
list(
p_sw_x = p_sw_x,
p_sw_y = p_sw_y,
pval_t.test = pval_t.test,
pval_u.test = pval_u.test,
pval_perm.test = pval_perm.test
)
}
# Parameters
set.seed(12345)
alpha_pretest <- seq(from = 0.01, to = 0.1, by = 0.01)
sample_sizes <- c(8, 10, 20, 30, 40, 50)
Nsim <- 1e3
perm <- 1e3
distributions <- c("Normal", "LogNormal")
effect_size <- 0.5
# Initialize storage
power_fixed_tests <- list()           # 2D: dist × n
power_adaptive_tests <- list()       # 3D: dist × n × alpha
for (dist in distributions) {
power_fixed_tests[[dist]] <- list()
power_adaptive_tests[[dist]] <- list()
for (n in sample_sizes) {
results <- generate_pval(n = n, N = Nsim, dist = dist, effect_size = effect_size, B = perm)
# Fixed tests power
power_fixed_tests[[dist]][[as.character(n)]] <- list(
t_test = mean(results$pval_t.test < 0.05),
u_test = mean(results$pval_u.test < 0.05),
perm_test = mean(results$pval_perm.test < 0.05)
)
# Adaptive test power for each alpha
adaptive_power <- numeric(length(alpha_pretest))
names(adaptive_power) <- alpha_pretest
for (j in seq_along(alpha_pretest)) {
alpha <- alpha_pretest[j]
pval_adaptive <- ifelse(
results$p_sw_x > alpha & results$p_sw_y > alpha,
results$pval_t.test,
results$pval_u.test
)
adaptive_power[j] <- mean(pval_adaptive < 0.05)
}
power_adaptive_tests[[dist]][[as.character(n)]] <- adaptive_power
}
}
power_adaptive_tests
adaptive_power
pval_adaptive
power_fixed_tests
