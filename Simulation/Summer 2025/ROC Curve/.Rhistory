)
# Adaptive (normality-based)
power_anova_adapt    <- calculate_power(
sample_sizes   = sample_sizes,
n_sim          = n_sim,
get_parameters = get_anova_params,
gen_data       = generate_anova_data,
fn_to_get_norm_obj = anova_residuals,
fn_for_ds_test_1   = anova_main_test,
fn_for_ds_test_2   = kruskal_wallis_test,
mode           = "adaptive"
#n_boot = 1000
)
# AUC
# --- Compute AUC for each ---
auc_param  <- compute_area(sample_sizes, power_anova_param)
auc_nonpar <- compute_area(sample_sizes, power_anova_nonpar)
auc_adapt  <- compute_area(sample_sizes, power_anova_adapt)
# create a data frame of AUC results
auc_table <- data.frame(
Test = c("Parametric", "Nonparametric", "Adaptive"),
AUC  = c(auc_param, auc_nonpar, auc_adapt)
)
# display the table
print(auc_table)
#-------------------------------------------------------
# save RData
save(
sample_sizes,
power_anova_param,
power_anova_nonpar,
power_anova_adapt,
auc_table,
file = "power_compare_anova_test.RData"
)
#------------------------------------------------------
# Plot all three curves
plot(sample_sizes, power_anova_param,    type = "b", pch = 19,
ylim = c(0,1), xlab = "Sample Size", ylab = "Power", col = "red",
main = "ANOVA Test Power Comparison")
lines(sample_sizes, power_anova_nonpar, type = "b", pch = 17, col = "blue")
lines(sample_sizes, power_anova_adapt,   type = "b", pch = 15, col = "green")
legend("bottomright",
legend_labels <- c(
paste0("Parametric (AUC=", round(auc_param, 4), ")"),
paste0("Nonparametric (AUC=", round(auc_nonpar, 4), ")"),
paste0("Adaptive (AUC=", round(auc_adapt, 4), ")")
),
pch    = c(19,17,15),col = c("red", "blue", "green"), lty = 1)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/user_framework/power_compare_t_test.RData")
knitr::opts_chunk$set(echo = TRUE, fig.height = 10, fig.width = 18, warning = FALSE, message = FALSE, verbose = FALSE)
# Source user-defined generator
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/user_framework")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/user_framework/my_functions_v2.R")
# ------------ Power Curve Plotting -----------
plot_power_curve <- function(power_results, title = "Power Analysis") {
sample_sizes <- as.numeric(sub("n=", "", names(power_results)))
plot(sample_sizes, power_results, type = "b",
xlab = "Sample Size", ylab = "Power",
main = title, ylim = c(0, 1), pch = 19)
abline(h = 0.8, lty = 2)
grid()
}
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/user_framework/power_compare_t_test.RData")
# Plot all three curves
plot(sample_sizes, power_ttest_param,    type = "b", pch = 19,
ylim = c(0,1), xlab = "Sample Size", ylab = "Power", col = "red",
main = "t-test Power Comparison")
lines(sample_sizes, power_ttest_nonpar, type = "b", pch = 17, col = "blue")
lines(sample_sizes, power_ttest_adapt,   type = "b", pch = 15, col = "green")
legend("bottomright",
legend_labels <- c(
paste0("Parametric (AUC=", round(auc_param, 4), ")"),
paste0("Nonparametric (AUC=", round(auc_nonpar, 4), ")"),
paste0("Adaptive (AUC=", round(auc_adapt, 4), ")")
),
pch    = c(19,17,15),col = c("red", "blue", "green"), lty = 1)
auc_table
auc_table$AUC
auc_table$AUC[1]
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/user_framework/power_compare_t_test.RData")
# Plot all three curves
plot(sample_sizes, power_ttest_param,    type = "b", pch = 19,
ylim = c(0,1), xlab = "Sample Size", ylab = "Power", col = "red",
main = "t-test Power Comparison")
lines(sample_sizes, power_ttest_nonpar, type = "b", pch = 17, col = "blue")
lines(sample_sizes, power_ttest_adapt,   type = "b", pch = 15, col = "green")
legend("bottomright",
legend_labels <- c(
paste0("Parametric (AUC=", round(auc_table$AUC[1], 4), ")"),
paste0("Nonparametric (AUC=", round(auc_table$AUC[2], 4), ")"),
paste0("Adaptive (AUC=", round(auc_table$AUC[3], 4), ")")
),
pch    = c(19,17,15),col = c("red", "blue", "green"), lty = 1)
# ------------ Power Curve Plotting -----------
plot_power_curve <- function(power_results, title = "Power Analysis") {
sample_sizes <- as.numeric(sub("n=", "", names(power_results)))
plot(sample_sizes, power_results, type = "b", lwd = 3,
xlab = "Sample Size", ylab = "Power",
main = title, ylim = c(0, 1), pch = 19)
abline(h = 0.8, lty = 2)
grid()
}
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/user_framework/power_compare_t_test.RData")
# Plot all three curves
plot(sample_sizes, power_ttest_param,    type = "b", pch = 19,
ylim = c(0,1), xlab = "Sample Size", ylab = "Power", col = "red",
main = "t-test Power Comparison")
lines(sample_sizes, power_ttest_nonpar, type = "b", pch = 17, col = "blue")
lines(sample_sizes, power_ttest_adapt,   type = "b", pch = 15, col = "green")
legend("bottomright",
legend_labels <- c(
paste0("Parametric (AUC=", round(auc_table$AUC[1], 4), ")"),
paste0("Nonparametric (AUC=", round(auc_table$AUC[2], 4), ")"),
paste0("Adaptive (AUC=", round(auc_table$AUC[3], 4), ")")
),
pch    = c(19,17,15),col = c("red", "blue", "green"), lty = 1)
# ------------ Power Curve Plotting -----------
plot_power_curve <- function(power_results, title = "Power Analysis") {
sample_sizes <- as.numeric(sub("n=", "", names(power_results)))
plot(sample_sizes, power_results, type = "b", lwd = 2,
xlab = "Sample Size", ylab = "Power",
main = title, cex.lab = 1.4, cex.axis = 1.2, cex.main = 1.6, ylim = c(0, 1), pch = 19)
abline(h = 0.8, lty = 2, lwd = 2)
grid(lwd = 1)
}
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/user_framework/power_compare_t_test.RData")
# Plot all three curves
plot(sample_sizes, power_ttest_param,    type = "b", pch = 19,
ylim = c(0,1), xlab = "Sample Size", ylab = "Power", col = "red",
main = "t-test Power Comparison")
lines(sample_sizes, power_ttest_nonpar, type = "b", pch = 17, col = "blue")
lines(sample_sizes, power_ttest_adapt,   type = "b", pch = 15, col = "green")
legend("bottomright",
legend_labels <- c(
paste0("Parametric (AUC=", round(auc_table$AUC[1], 4), ")"),
paste0("Nonparametric (AUC=", round(auc_table$AUC[2], 4), ")"),
paste0("Adaptive (AUC=", round(auc_table$AUC[3], 4), ")")
),
pch    = c(19,17,15),col = c("red", "blue", "green"), lty = 1)
# ------------ Power Curve Plotting -----------
plot_power_curve <- function(power_results, title = "Power Analysis") {
sample_sizes <- as.numeric(sub("n=", "", names(power_results)))
plot(sample_sizes, power_results, type = "b", lwd = 2,
xlab = "Sample Size", ylab = "Power",
main = title, cex.lab = 1.4, cex.axis = 1.2, cex.main = 1.6, ylim = c(0, 1), pch = 19)
abline(h = 0.8, lty = 2, lwd = 2)
grid(lwd = 1)
}
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/user_framework/power_compare_t_test.RData")
# Plot all three curves
plot(sample_sizes, power_ttest_param,    type = "b", pch = 19,
ylim = c(0,1), xlab = "Sample Size", ylab = "Power", col = "red",
main = "t-test Power Comparison", cex.lab = 1.4, cex.axis = 1.2, cex.main = 1.6)
lines(sample_sizes, power_ttest_nonpar, lwd = 2, type = "b", pch = 17, col = "blue")
lines(sample_sizes, power_ttest_adapt, lwd = 2, type = "b", pch = 15, col = "green")
legend("bottomright",
legend_labels <- c(
paste0("Parametric (AUC=", round(auc_table$AUC[1], 4), ")"),
paste0("Nonparametric (AUC=", round(auc_table$AUC[2], 4), ")"),
paste0("Adaptive (AUC=", round(auc_table$AUC[3], 4), ")")
),
pch    = c(19,17,15), lty = 1, lwd = 2,cex = 1.2, col = c("red", "blue", "green"), lty = 1)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/user_framework/power_compare_t_test.RData")
# Plot all three curves
plot(sample_sizes, power_ttest_param,    type = "b", pch = 19,
ylim = c(0,1), xlab = "Sample Size", ylab = "Power", col = "red",
main = "t-test Power Comparison", cex.lab = 1.4, cex.axis = 1.2, cex.main = 1.6)
lines(sample_sizes, power_ttest_nonpar, lwd = 2, type = "b", pch = 17, col = "blue")
lines(sample_sizes, power_ttest_adapt, lwd = 2, type = "b", pch = 15, col = "green")
legend("bottomright",
legend_labels <- c(
paste0("Parametric (AUC=", round(auc_table$AUC[1], 4), ")"),
paste0("Nonparametric (AUC=", round(auc_table$AUC[2], 4), ")"),
paste0("Adaptive (AUC=", round(auc_table$AUC[3], 4), ")")
),
pch    = c(19,17,15), lwd = 2,cex = 1.2, col = c("red", "blue", "green"), lty = 1)
# ------------ Power Curve Plotting -----------
plot_power_curve <- function(power_results, title = "Power Analysis") {
sample_sizes <- as.numeric(sub("n=", "", names(power_results)))
plot(sample_sizes, power_results, type = "b", lwd = 3,
xlab = "Sample Size", ylab = "Power",
main = title, cex.lab = 2.4, cex.axis = 2.2, cex.main = 1.6, ylim = c(0, 1), pch = 19)
abline(h = 0.8, lty = 2, lwd = 3)
grid(lwd = 1)
}
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/user_framework/power_compare_t_test.RData")
# Plot all three curves
plot(sample_sizes, power_ttest_param,    type = "b", pch = 19,
ylim = c(0,1), xlab = "Sample Size", ylab = "Power", col = "red", lwd = 3,
main = "t-test Power Comparison", cex.lab = 2.4, cex.axis = 2.2, cex.main = 2.6)
lines(sample_sizes, power_ttest_nonpar, lwd = 3, type = "b", pch = 17, col = "blue")
lines(sample_sizes, power_ttest_adapt, lwd = 3, type = "b", pch = 15, col = "green")
legend("bottomright",
legend_labels <- c(
paste0("Parametric (AUC=", round(auc_table$AUC[1], 4), ")"),
paste0("Nonparametric (AUC=", round(auc_table$AUC[2], 4), ")"),
paste0("Adaptive (AUC=", round(auc_table$AUC[3], 4), ")")
),
pch    = c(19,17,15), lwd = 3,cex = 2.0, col = c("red", "blue", "green"), lty = 1)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/user_framework/power_compare_reg_test.RData")
knitr::opts_chunk$set(echo = TRUE, fig.height = 8, fig.width = 12, warning = FALSE, message = FALSE, verbose = FALSE)
# Source user-defined generator
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/user_framework")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/user_framework/my_functions_v2.R")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/user_framework/power_compare_reg_test.RData")
# Plot all three curves
plot(sample_sizes, power_reg_param,    type = "b", pch = 19,
ylim = c(0,1), xlab = "Sample Size", ylab = "Power", col = "red", lwd = 3,
main = "Power Comparison for Regression Test", cex.lab = 1.7, cex.axis = 1.7, cex.main = 2.0)
lines(sample_sizes, power_reg_nonpar, lwd = 3, type = "b", pch = 17, col = "blue")
lines(sample_sizes, power_reg_adapt, lwd = 3, type = "b", pch = 15, col = "green")
legend("bottomright",
legend_labels <- c(
paste0("Parametric (AUC=", round(auc_table$AUC[1], 4), ")"),
paste0("Nonparametric (AUC=", round(auc_table$AUC[2], 4), ")"),
paste0("Adaptive (AUC=", round(auc_table$AUC[3], 4), ")")
),
pch    = c(19,17,15), lwd = 3,cex = 2.0, col = c("red", "blue", "green"), lty = 1)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/user_framework/power_compare_anova_test.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/user_framework/power_compare_anova_test.RData")
# Plot all three curves
plot(sample_sizes, power_anova_param,    type = "b", pch = 19,
ylim = c(0,1), xlab = "Sample Size", ylab = "Power", col = "red", lwd = 3,
main = "Power Comparison for One-Way ANOVA", cex.lab = 1.7, cex.axis = 1.7, cex.main = 2.0)
lines(sample_sizes, power_anova_nonpar, lwd = 3, type = "b", pch = 17, col = "blue")
lines(sample_sizes, power_anova_adapt, lwd = 3, type = "b", pch = 15, col = "green")
legend("bottomright",
legend_labels <- c(
paste0("Parametric (AUC=", round(auc_table$AUC[1], 4), ")"),
paste0("Nonparametric (AUC=", round(auc_table$AUC[2], 4), ")"),
paste0("Adaptive (AUC=", round(auc_table$AUC[3], 4), ")")
),
pch    = c(19,17,15), lwd = 3,cex = 2.0, col = c("red", "blue", "green"), lty = 1)
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/ROC Curve/ROC_like_curve_v1.RData")
EPG <- power_results$LogNormal$adaptive_wilcox - power_results$LogNormal$power_t.test
EPL <- power_results$Normal$power_t.test - power_results$Normal$adaptive_wilcox
plot(EPL, EPG, type = "l", col = "red")
par(mfrow = c(1, 2))
plot(alpha_pretest[1:10], EPL[1:10], type = "l")
plot(alpha_pretest[1:10], EPG[1:10], type = "l")
EPL
EPG
# read in defined functions
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
# set wkdr:
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/ROC Curve")
#-----------------------------------------------------------
# Parameters:
#   n          - Sample size per group
#   N          - Number of simulations
#   dist       - Data distribution ("Normal", "LogNormal")
#   effect_size- True difference between groups
#   B          - Permutation test iterations
#-----------------------------------------------------------
#----------------------------------------------------------
# Generate p-values function
generate_pval <- function(n, N, dist, effect_size, B) {
pval_t.test <- pval_u.test <- pval_perm.test <- numeric(N)
p_sw_x <- p_sw_y <- numeric(N)
for(i in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
# SW-test p-values
p_sw_x[i] <- shapiro.test(x)$p.value
p_sw_y[i] <- shapiro.test(y)$p.value
# downstream test p-values
pval_t.test[i] <- t.test(x, y + effect_size)$p.value
pval_u.test[i] <- wilcox.test(x, y + effect_size)$p.value
#pval_perm.test[i] <- two_sample_permutation_test(x, y + effect_size, B)
}
# Return all p-values
return(list(
p_sw_x = p_sw_x,
p_sw_y = p_sw_y,
pval_t.test = pval_t.test,
pval_u.test = pval_u.test
#pval_perm.test = pval_perm.test
))
}
#--------------------------------------------------------
# Parameters
alpha_pretest <- seq(from = 0.001, to = 0.1, by = 0.01)
n <- 10
Nsim <- 1e5
distributions <- c("Normal", "LogNormal")
effect_size <- 0.5
perm <- 1e3
#--------------------------------------------------------
# store power values as list
power_results <- list()
for (dist in distributions) {
results <- generate_pval(n = n, N = Nsim, dist = dist, effect_size = effect_size, B = perm)
power_results[[dist]] <- list(
power_t.test = mean(results$pval_t.test < 0.05),
power_wilcox.test = mean(results$pval_u.test < 0.05)
#power_perm.test = mean(results$pval_perm.test < 0.05)
)
for (j in seq_along(alpha_pretest)) {
alpha <- alpha_pretest[j]
adaptive_pvals_wilcox <- ifelse(
results$p_sw_x > alpha & results$p_sw_y > alpha,
results$pval_t.test,
results$pval_u.test
)
# adaptive_pvals_perm <- ifelse(
#   results$p_sw_x > alpha & results$p_sw_y > alpha,
#   results$pval_t.test,
#   results$pval_perm.test
# )
power_results[[dist]]$adaptive_wilcox[j] <- mean(adaptive_pvals_wilcox < 0.05)
#power_results[[dist]]$adaptive_perm[j] <- mean(adaptive_pvals_perm < 0.05)
power_results[[dist]]$pr_sw_vec[j] <- mean(results$p_sw_x <= alpha | results$p_sw_y <= alpha)
}
}
#-------------------------------------------------------
# save RData
save(
power_results,
n,
Nsim,
distributions,
alpha_pretest,
file = "ROC_like_curve_v1.RData"
)
#------------------------------------------------------
EPG <- power_results$LogNormal$adaptive_wilcox - power_results$LogNormal$power_t.test
EPL <- power_results$Normal$power_t.test - power_results$Normal$adaptive_wilcox
plot(EPL, EPG, type = "l", col = "red")
par(mfrow = c(1, 2))
plot(alpha_pretest[1:10], EPL[1:10], type = "l")
plot(alpha_pretest[1:10], EPG[1:10], type = "l")
# read in defined functions
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
# set wkdr:
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/ROC Curve")
#-----------------------------------------------------------
# Parameters:
#   n          - Sample size per group
#   N          - Number of simulations
#   dist       - Data distribution ("Normal", "LogNormal")
#   effect_size- True difference between groups
#   B          - Permutation test iterations
#-----------------------------------------------------------
#----------------------------------------------------------
# Generate p-values function
generate_pval <- function(n, N, dist, effect_size, B) {
pval_t.test <- pval_u.test <- pval_perm.test <- numeric(N)
p_sw_x <- p_sw_y <- numeric(N)
for(i in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
# SW-test p-values
p_sw_x[i] <- shapiro.test(x)$p.value
p_sw_y[i] <- shapiro.test(y)$p.value
# downstream test p-values
pval_t.test[i] <- t.test(x, y + effect_size)$p.value
pval_u.test[i] <- wilcox.test(x, y + effect_size)$p.value
#pval_perm.test[i] <- two_sample_permutation_test(x, y + effect_size, B)
}
# Return all p-values
return(list(
p_sw_x = p_sw_x,
p_sw_y = p_sw_y,
pval_t.test = pval_t.test,
pval_u.test = pval_u.test
#pval_perm.test = pval_perm.test
))
}
#--------------------------------------------------------
# Parameters
alpha_pretest <- seq(from = 0.001, to = 0.1, by = 0.001)
n <- 10
Nsim <- 1e5
distributions <- c("Normal", "LogNormal")
effect_size <- 0.5
perm <- 1e3
#--------------------------------------------------------
# store power values as list
power_results <- list()
for (dist in distributions) {
results <- generate_pval(n = n, N = Nsim, dist = dist, effect_size = effect_size, B = perm)
power_results[[dist]] <- list(
power_t.test = mean(results$pval_t.test < 0.05),
power_wilcox.test = mean(results$pval_u.test < 0.05)
#power_perm.test = mean(results$pval_perm.test < 0.05)
)
for (j in seq_along(alpha_pretest)) {
alpha <- alpha_pretest[j]
adaptive_pvals_wilcox <- ifelse(
results$p_sw_x > alpha & results$p_sw_y > alpha,
results$pval_t.test,
results$pval_u.test
)
# adaptive_pvals_perm <- ifelse(
#   results$p_sw_x > alpha & results$p_sw_y > alpha,
#   results$pval_t.test,
#   results$pval_perm.test
# )
power_results[[dist]]$adaptive_wilcox[j] <- mean(adaptive_pvals_wilcox < 0.05)
#power_results[[dist]]$adaptive_perm[j] <- mean(adaptive_pvals_perm < 0.05)
power_results[[dist]]$pr_sw_vec[j] <- mean(results$p_sw_x <= alpha | results$p_sw_y <= alpha)
}
}
#-------------------------------------------------------
# save RData
save(
power_results,
n,
Nsim,
distributions,
alpha_pretest,
file = "ROC_like_curve_v1.RData"
)
#------------------------------------------------------
EPG <- power_results$LogNormal$adaptive_wilcox - power_results$LogNormal$power_t.test
EPL <- power_results$Normal$power_t.test - power_results$Normal$adaptive_wilcox
plot(EPL, EPG, type = "l", col = "red")
par(mfrow = c(1, 2))
plot(alpha_pretest[1:10], EPL[1:10], type = "l")
plot(alpha_pretest[1:10], EPG[1:10], type = "l")
# read in defined functions
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
# set wkdr:
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/ROC Curve")
#-----------------------------------------------------------
# Parameters:
#   n          - Sample size per group
#   N          - Number of simulations
#   dist       - Data distribution ("Normal", "LogNormal")
#   effect_size- True difference between groups
#   B          - Permutation test iterations
#-----------------------------------------------------------
#----------------------------------------------------------
# Generate p-values function
generate_pval <- function(n, N, dist, effect_size, B) {
pval_t.test <- pval_u.test <- pval_perm.test <- numeric(N)
p_sw_x <- p_sw_y <- numeric(N)
for(i in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
# SW-test p-values
p_sw_x[i] <- shapiro.test(x)$p.value
p_sw_y[i] <- shapiro.test(y)$p.value
# downstream test p-values
pval_t.test[i] <- t.test(x, y + effect_size)$p.value
pval_u.test[i] <- wilcox.test(x, y + effect_size)$p.value
#pval_perm.test[i] <- two_sample_permutation_test(x, y + effect_size, B)
}
# Return all p-values
return(list(
p_sw_x = p_sw_x,
p_sw_y = p_sw_y,
pval_t.test = pval_t.test,
pval_u.test = pval_u.test
#pval_perm.test = pval_perm.test
))
}
#--------------------------------------------------------
# Parameters
alpha_pretest <- seq(from = 0.001, to = 0.1, by = 0.001)
n <- 10
Nsim <- 1e6
distributions <- c("Normal", "LogNormal")
effect_size <- 0.5
perm <- 1e3
#--------------------------------------------------------
# store power values as list
power_results <- list()
for (dist in distributions) {
results <- generate_pval(n = n, N = Nsim, dist = dist, effect_size = effect_size, B = perm)
power_results[[dist]] <- list(
power_t.test = mean(results$pval_t.test < 0.05),
power_wilcox.test = mean(results$pval_u.test < 0.05)
#power_perm.test = mean(results$pval_perm.test < 0.05)
)
for (j in seq_along(alpha_pretest)) {
alpha <- alpha_pretest[j]
adaptive_pvals_wilcox <- ifelse(
results$p_sw_x > alpha & results$p_sw_y > alpha,
results$pval_t.test,
results$pval_u.test
)
# adaptive_pvals_perm <- ifelse(
#   results$p_sw_x > alpha & results$p_sw_y > alpha,
#   results$pval_t.test,
#   results$pval_perm.test
# )
power_results[[dist]]$adaptive_wilcox[j] <- mean(adaptive_pvals_wilcox < 0.05)
#power_results[[dist]]$adaptive_perm[j] <- mean(adaptive_pvals_perm < 0.05)
power_results[[dist]]$pr_sw_vec[j] <- mean(results$p_sw_x <= alpha | results$p_sw_y <= alpha)
}
}
#-------------------------------------------------------
# save RData
save(
power_results,
n,
Nsim,
distributions,
alpha_pretest,
file = "ROC_like_curve_v1.RData"
)
#------------------------------------------------------
EPG <- power_results$LogNormal$adaptive_wilcox - power_results$LogNormal$power_t.test
EPL <- power_results$Normal$power_t.test - power_results$Normal$adaptive_wilcox
plot(EPL, EPG, type = "l", col = "red")
par(mfrow = c(1, 2))
plot(alpha_pretest[1:10], EPL[1:10], type = "l")
plot(alpha_pretest[1:10], EPG[1:10], type = "l")
