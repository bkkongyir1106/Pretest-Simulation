legend("bottomright", legend = methods, col = colors, lwd = 2, pch = pch_vals,
title = "Method")
}
dev.off()
# Set up plotting
par(mfrow = c(1, length(unique(roc_curve_data$Distribution))))
methods <- c("t-test", "Wilcoxon")
colors <- c("blue", "red")
pch_vals <- c(1, 2)
# Plot separately for each distribution
for (dist in unique(roc_curve_data$Distribution)) {
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "Type I Error", ylab = "Power",
main = paste("ROC-like Curve(", dist, ")", sep = ""))
for (m in seq_along(methods)) {
method <- methods[m]
data_subset <- subset(roc_curve_data, Distribution == dist & Method == method)
lines(data_subset$TypeIError, data_subset$Power, type = "l",
col = colors[m], lwd = 2, pch = pch_vals[m])
}
legend("bottomright", legend = methods, col = colors, lwd = 2, pch = pch_vals,
title = "Method")
}
# Set up plotting
par(mfrow = c(1, length(unique(roc_curve_data$Distribution))))
methods <- c("t-test", "Wilcoxon")
colors <- c("blue", "red")
pch_vals <- c(1, 2)
# Plot separately for each distribution
for (dist in unique(roc_curve_data$Distribution)) {
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "Type I Error", ylab = "Power",
main = paste("ROC-like Curve(", dist, ")", sep = ""))
for (m in seq_along(methods)) {
method <- methods[m]
data_subset <- subset(roc_curve_data, Distribution == dist & Method == method)
lines(data_subset$TypeIError, data_subset$Power, type = "b",
col = colors[m], lwd = 2, pch = pch_vals[m])
}
legend("bottomright", legend = methods, col = colors, lwd = 2, pch = pch_vals,
title = "Method")
}
# Set up plotting
par(mfrow = c(1, length(unique(roc_curve_data$Distribution))))
methods <- c("t-test", "Wilcoxon")
colors <- c("blue", "red")
pch_vals <- c(1, 2)
# Plot separately for each distribution
for (dist in unique(roc_curve_data$Distribution)) {
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "Type I Error", ylab = "Power",
main = paste("ROC-like Curve(", dist, ")", sep = ""))
for (m in seq_along(methods)) {
method <- methods[m]
data_subset <- subset(roc_curve_data, Distribution == dist & Method == method)
lines(data_subset$TypeIError, data_subset$Power, type = "b",
col = colors[m], lwd = 2, pch = pch_vals[m], cex = 0.5)
}
legend("bottomright", legend = methods, col = colors, lwd = 2, pch = pch_vals,
title = "Method")
}
dev.off()
# Set up plotting
par(mfrow = c(1, length(unique(roc_curve_data$Distribution))))
methods <- c("t-test", "Wilcoxon")
colors <- c("blue", "red")
pch_vals <- c(1, 2)
# Plot separately for each distribution
for (dist in unique(roc_curve_data$Distribution)) {
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "Type I Error", ylab = "Power",
main = paste("ROC-like Curve(", dist, ")", sep = ""))
for (m in seq_along(methods)) {
method <- methods[m]
data_subset <- subset(roc_curve_data, Distribution == dist & Method == method)
lines(data_subset$TypeIError, data_subset$Power, type = "b",
col = colors[m], lwd = 2, pch = pch_vals[m], cex = 0.5)
}
legend("bottomright", legend = methods, col = colors, lwd = 2, pch = pch_vals,
title = "Method")
}
# Set up plotting
par(mfrow = c(1, length(unique(roc_curve_data$Distribution))))
methods <- c("t-test", "Wilcoxon")
colors <- c("blue", "red")
pch_vals <- c(1, 2)
# Plot separately for each distribution
for (dist in unique(roc_curve_data$Distribution)) {
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "Type I Error", ylab = "Power",
main = paste("ROC-like Curve(", dist, ")", sep = ""))
for (m in seq_along(methods)) {
method <- methods[m]
data_subset <- subset(roc_curve_data, Distribution == dist & Method == method)
lines(data_subset$TypeIError, data_subset$Power, type = "o",
col = colors[m], lwd = 2, pch = pch_vals[m], cex = 0.5)
}
legend("bottomright", legend = methods, col = colors, lwd = 2, pch = pch_vals,
title = "Method")
}
# Set up plotting
par(mfrow = c(1, length(unique(roc_curve_data$Distribution))))
methods <- c("t-test", "Wilcoxon")
colors <- c("blue", "red")
pch_vals <- c(19, 12)
# Plot separately for each distribution
for (dist in unique(roc_curve_data$Distribution)) {
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "Type I Error", ylab = "Power",
main = paste("ROC-like Curve(", dist, ")", sep = ""))
for (m in seq_along(methods)) {
method <- methods[m]
data_subset <- subset(roc_curve_data, Distribution == dist & Method == method)
lines(data_subset$TypeIError, data_subset$Power, type = "o",
col = colors[m], lwd = 2, pch = pch_vals[m], cex = 0.5)
}
legend("bottomright", legend = methods, col = colors, lwd = 2, pch = pch_vals,
title = "Method")
}
dev.off()
# Set up plotting
par(mfrow = c(1, length(unique(roc_curve_data$Distribution))))
methods <- c("t-test", "Wilcoxon")
colors <- c("blue", "red")
pch_vals <- c(19, 12)
# Plot separately for each distribution
for (dist in unique(roc_curve_data$Distribution)) {
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "Type I Error", ylab = "Power",
main = paste("ROC-like Curve(", dist, ")", sep = ""))
for (m in seq_along(methods)) {
method <- methods[m]
data_subset <- subset(roc_curve_data, Distribution == dist & Method == method)
lines(data_subset$TypeIError, data_subset$Power, type = "o",
col = colors[m], lwd = 2, pch = pch_vals[m], cex = 0.5)
}
legend("bottomright", legend = methods, col = colors, lwd = 2, pch = pch_vals,
title = "Method")
}
# Set up plotting
par(mfrow = c(1, length(unique(roc_curve_data$Distribution))))
methods <- c("t-test", "Wilcoxon")
colors <- c("blue", "red")
pch_vals <- c(19, 17)
# Plot separately for each distribution
for (dist in unique(roc_curve_data$Distribution)) {
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "Type I Error", ylab = "Power",
main = paste("ROC-like Curve(", dist, ")", sep = ""))
for (m in seq_along(methods)) {
method <- methods[m]
data_subset <- subset(roc_curve_data, Distribution == dist & Method == method)
lines(data_subset$TypeIError, data_subset$Power, type = "o",
col = colors[m], lwd = 2, pch = pch_vals[m], cex = 0.5)
}
legend("bottomright", legend = methods, col = colors, lwd = 2, pch = pch_vals,
title = "Method")
}
dev.off()
# Set up plotting
par(mfrow = c(1, length(unique(roc_curve_data$Distribution))))
methods <- c("t-test", "Wilcoxon")
colors <- c("blue", "red")
pch_vals <- c(19, 17)
# Plot separately for each distribution
for (dist in unique(roc_curve_data$Distribution)) {
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "Type I Error", ylab = "Power",
main = paste("ROC-like Curve(", dist, ")", sep = ""))
for (m in seq_along(methods)) {
method <- methods[m]
data_subset <- subset(roc_curve_data, Distribution == dist & Method == method)
lines(data_subset$TypeIError, data_subset$Power, type = "o",
col = colors[m], lwd = 2, pch = pch_vals[m], cex = 0.5)
}
legend("bottomright", legend = methods, col = colors, lwd = 2, pch = pch_vals,
title = "Method")
}
# Set up plotting
par(mfrow = c(1, length(unique(roc_curve_data$Distribution))))
methods <- c("t-test", "Wilcoxon")
colors <- c("blue", "red")
pch_vals <- c(19, 17)
# Plot separately for each distribution
for (dist in unique(roc_curve_data$Distribution)) {
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "Type I Error", ylab = "Power",
main = paste("ROC-like Curve(", dist, ")", sep = ""))
for (m in seq_along(methods)) {
method <- methods[m]
data_subset <- subset(roc_curve_data, Distribution == dist & Method == method)
lines(data_subset$TypeIError, data_subset$Power, type = "o",
col = colors[m], lwd = 2, pch = pch_vals[m], cex = 1)
}
legend("bottomright", legend = methods, col = colors, lwd = 2, pch = pch_vals,
title = "Method")
}
dev.off()
# Set up plotting
par(mfrow = c(1, length(unique(roc_curve_data$Distribution))))
methods <- c("t-test", "Wilcoxon")
colors <- c("blue", "red")
pch_vals <- c(19, 17)
# Plot separately for each distribution
for (dist in unique(roc_curve_data$Distribution)) {
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "Type I Error", ylab = "Power",
main = paste("ROC-like Curve(", dist, ")", sep = ""))
for (m in seq_along(methods)) {
method <- methods[m]
data_subset <- subset(roc_curve_data, Distribution == dist & Method == method)
lines(data_subset$TypeIError, data_subset$Power, type = "o",
col = colors[m], lwd = 2, pch = pch_vals[m], cex = 1)
}
legend("bottomright", legend = methods, col = colors, lwd = 2, pch = pch_vals,
title = "Method")
}
# Set up plotting
par(mfrow = c(1, length(unique(roc_curve_data$Distribution))))
methods <- c("t-test", "Wilcoxon")
colors <- c("blue", "red")
pch_vals <- c(19, 17)
# Plot separately for each distribution
for (dist in unique(roc_curve_data$Distribution)) {
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "Type I Error", ylab = "Power",
main = paste("ROC-like Curve(", dist, ")", sep = ""))
for (m in seq_along(methods)) {
method <- methods[m]
data_subset <- subset(roc_curve_data, Distribution == dist & Method == method)
lines(data_subset$TypeIError, data_subset$Power, type = "o",
col = colors[m], lwd = 2, pch = pch_vals[m], cex = 0.5)
}
legend("bottomright", legend = methods, col = colors, lwd = 2, pch = pch_vals,
title = "Method")
}
dev.off()
# Set up plotting
par(mfrow = c(1, length(unique(roc_curve_data$Distribution))))
methods <- c("t-test", "Wilcoxon")
colors <- c("blue", "red")
pch_vals <- c(19, 17)
# Plot separately for each distribution
for (dist in unique(roc_curve_data$Distribution)) {
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "Type I Error", ylab = "Power",
main = paste("ROC-like Curve(", dist, ")", sep = ""))
for (m in seq_along(methods)) {
method <- methods[m]
data_subset <- subset(roc_curve_data, Distribution == dist & Method == method)
lines(data_subset$TypeIError, data_subset$Power, type = "o",
col = colors[m], lwd = 2, pch = pch_vals[m], cex = 0.5)
}
legend("bottomright", legend = methods, col = colors, lwd = 2, pch = pch_vals,
title = "Method")
}
# Run the simulation
roc_curve_data <- power_Type_I_error_function(
sample_size = 10,
Nsim = 1e4,
distributions = c("Normal", "LogNormal"),
effect_size = 0.5,
sig_levels = sig_level
)
# Optional: Save to PDF
pdf("Power_vs_TypeIError_ROC_By_Distribution.pdf", width = 10, height = 6)
# Set up plotting
par(mfrow = c(1, length(unique(roc_curve_data$Distribution))))
methods <- c("t-test", "Wilcoxon")
colors <- c("blue", "red")
pch_vals <- c(19, 17)
# Plot separately for each distribution
for (dist in unique(roc_curve_data$Distribution)) {
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "Type I Error", ylab = "Power",
main = paste("ROC-like Curve(", dist, ")", sep = ""))
for (m in seq_along(methods)) {
method <- methods[m]
data_subset <- subset(roc_curve_data, Distribution == dist & Method == method)
lines(data_subset$TypeIError, data_subset$Power, type = "o",
col = colors[m], lwd = 2, pch = pch_vals[m], cex = 0.5)
}
legend("bottomright", legend = methods, col = colors, lwd = 2, pch = pch_vals,
title = "Method")
}
dev.off()
# Optional: Save to PDF
pdf("Power_vs_TypeIError_ROC_By_Distribution.pdf", width = 10, height = 6)
# Set up plotting
par(mfrow = c(1, length(unique(roc_curve_data$Distribution))))
methods <- c("t-test", "Wilcoxon")
colors <- c("blue", "red")
pch_vals <- c(19, 17)
# Plot separately for each distribution
for (dist in unique(roc_curve_data$Distribution)) {
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "Type I Error", ylab = "Power",
main = paste("ROC-like Curve(", dist, ")", sep = ""))
for (m in seq_along(methods)) {
method <- methods[m]
data_subset <- subset(roc_curve_data, Distribution == dist & Method == method)
lines(data_subset$TypeIError, data_subset$Power, type = "o",
col = colors[m], lwd = 2, pch = pch_vals[m], cex = 0.5)
}
legend("bottomright", legend = methods, col = colors, lwd = 2, pch = pch_vals,
title = "Method")
}
dev.off()
# ------------------------ Power vs Type I Error (ROC-like Curve) ---------
# Set parameters
sig_level <- seq(from = 0.01, to = 1, by = 0.01)
power_Type_I_error_function <- function(sample_size, Nsim, distributions, effect_size, sig_levels) {
roc_data <- data.frame()
for (dist in distributions) {
cat("Simulating for:", dist, "\n")
res <- generate_pval(n = sample_size, N = Nsim, dist = dist, effect_size = effect_size, B = perm)
for (alpha in sig_levels) {
# Compute metrics
power_t <- mean(res$pval_t.test_power < alpha)
power_w <- mean(res$pval_wilcox.test_power < alpha)
error_t <- mean(res$pval_t.test_error < alpha)
error_w <- mean(res$pval_wilcox.test_error < alpha)
# Append for t-test
roc_data <- rbind(roc_data, data.frame(
Distribution = dist,
Method = "t-test",
Alpha = alpha,
Power = power_t,
TypeIError = error_t
))
# Append for Wilcoxon
roc_data <- rbind(roc_data, data.frame(
Distribution = dist,
Method = "Wilcoxon",
Alpha = alpha,
Power = power_w,
TypeIError = error_w
))
}
}
return(roc_data)
}
# Run the simulation
roc_curve_data <- power_Type_I_error_function(
sample_size = 10,
Nsim = 1e4,
distributions = c("Normal", "LogNormal"),
effect_size = 0.5,
sig_levels = sig_level
)
# Optional: Save to PDF
pdf("Power_vs_TypeIError_ROC_By_Distribution.pdf", width = 10, height = 6)
# Set up plotting
par(mfrow = c(1, length(unique(roc_curve_data$Distribution))))
methods <- c("t-test", "Wilcoxon")
colors <- c("blue", "red")
pch_vals <- c(19, 17)
# Plot separately for each distribution
for (dist in unique(roc_curve_data$Distribution)) {
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "Type I Error", ylab = "Power",
main = paste("ROC-like Curve(", dist, ")", sep = ""))
for (m in seq_along(methods)) {
method <- methods[m]
data_subset <- subset(roc_curve_data, Distribution == dist & Method == method)
lines(data_subset$TypeIError, data_subset$Power, type = "o",
col = colors[m], lwd = 2, pch = pch_vals[m], cex = 0.5)
}
legend("bottomright", legend = methods, col = colors, lwd = 2, pch = pch_vals,
title = "Method")
}
dev.off()
# Optional: Save to PDF
pdf("Power_vs_TypeIError_ROC_By_Distribution.pdf", width = 10, height = 6)
# Set up plotting
par(mfrow = c(1, length(unique(roc_curve_data$Distribution))))
methods <- c("t-test", "Wilcoxon")
colors <- c("blue", "red")
pch_vals <- c(19, 17)
# Plot separately for each distribution
for (dist in unique(roc_curve_data$Distribution)) {
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "Type I Error", ylab = "Power",
main = paste("ROC-like Curve(", dist, ")", sep = ""))
for (m in seq_along(methods)) {
method <- methods[m]
data_subset <- subset(roc_curve_data, Distribution == dist & Method == method)
lines(data_subset$TypeIError, data_subset$Power, type = "b",
col = colors[m], lwd = 2, pch = pch_vals[m], cex = 0.5)
}
legend("bottomright", legend = methods, col = colors, lwd = 2, pch = pch_vals,
title = "Method")
}
dev.off()
?type
?plot
# Optional: Save to PDF
pdf("Power_vs_TypeIError_ROC_By_Distribution.pdf", width = 10, height = 6)
# Set up plotting
par(mfrow = c(1, length(unique(roc_curve_data$Distribution))))
methods <- c("t-test", "Wilcoxon")
colors <- c("blue", "red")
pch_vals <- c(19, 17)
# Plot separately for each distribution
for (dist in unique(roc_curve_data$Distribution)) {
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "Type I Error", ylab = "Power",
main = paste("ROC-like Curve(", dist, ")", sep = ""))
for (m in seq_along(methods)) {
method <- methods[m]
data_subset <- subset(roc_curve_data, Distribution == dist & Method == method)
lines(data_subset$TypeIError, data_subset$Power, type = "l",
col = colors[m], lwd = 2, pch = pch_vals[m], cex = 0.5)
}
legend("bottomright", legend = methods, col = colors, lwd = 2, pch = pch_vals,
title = "Method")
}
dev.off()
# ---------------------------------------------------------
# -------- Power vs Type I Error (ROC-like Curve) ---------
# ---------------------------------------------------------
# Set parameters
sig_level <- seq(from = 0.01, to = 1, by = 0.01)
power_Type_I_error_function <- function(sample_size, Nsim, distributions, effect_size, sig_levels) {
roc_data <- data.frame()
for (dist in distributions) {
cat("Simulating for:", dist, "\n")
res <- generate_pval(n = sample_size, N = Nsim, dist = dist, effect_size = effect_size, B = perm)
for (alpha in sig_levels) {
# Compute metrics
power_t <- mean(res$pval_t.test_power < alpha)
power_w <- mean(res$pval_wilcox.test_power < alpha)
error_t <- mean(res$pval_t.test_error < alpha)
error_w <- mean(res$pval_wilcox.test_error < alpha)
# Append for t-test
roc_data <- rbind(roc_data, data.frame(
Distribution = dist,
Method = "t-test",
Alpha = alpha,
Power = power_t,
TypeIError = error_t
))
# Append for Wilcoxon
roc_data <- rbind(roc_data, data.frame(
Distribution = dist,
Method = "Wilcoxon",
Alpha = alpha,
Power = power_w,
TypeIError = error_w
))
}
}
return(roc_data)
}
# Run the simulation
roc_curve_data <- power_Type_I_error_function(
sample_size = 10,
Nsim = 1e5,
distributions = c("Normal", "LogNormal"),
effect_size = 0.5,
sig_levels = sig_level
)
# save RData
save(
sample_size,
Nsim,
distributions,
effect_size,
sig_level,
roc_data,
file = "Power_vs_TypeIError_ROC.RData"
)
# Define variables globally
sample_size <- 10
Nsim <- 1e5
distributions <- c("Normal", "LogNormal")
effect_size <- 0.5
sig_level <- seq(from = 0.01, to = 1, by = 0.01)
# Run and capture ROC data
roc_data <- power_Type_I_error_function(
sample_size = sample_size,
Nsim = Nsim,
distributions = distributions,
effect_size = effect_size,
sig_levels = sig_level
)
# Save results
save(
sample_size,
Nsim,
distributions,
effect_size,
sig_level,
roc_data,
file = "Power_vs_TypeIError_ROC.RData"
)
# Save to PDF
pdf("Power_vs_TypeIError_ROC_By_Distribution.pdf", width = 10, height = 6)
# Set up plotting
par(mfrow = c(1, length(unique(roc_curve_data$Distribution))))
methods <- c("t-test", "Wilcoxon")
colors <- c("blue", "red")
pch_vals <- c(19, 17)
# Plot separately for each distribution
for (dist in unique(roc_curve_data$Distribution)) {
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "Type I Error", ylab = "Power",
main = paste("ROC-like Curve(", dist, ")", sep = ""))
for (m in seq_along(methods)) {
method <- methods[m]
data_subset <- subset(roc_curve_data, Distribution == dist & Method == method)
lines(data_subset$TypeIError, data_subset$Power, type = "l",
col = colors[m], lwd = 2, pch = pch_vals[m], cex = 0.5)
}
legend("bottomright", legend = methods, col = colors, lwd = 2, pch = pch_vals,
title = "Method")
}
dev.off()
generate_data(n = 10, dist = "t", par = 3)
generate_data(n = 10, dist = "t", par = 9)
generate_data(n = 10, dist = "t", par = 1)
generate_data(n = 10, dist = "t", par = 2)
generate_data(n = 10, dist = "t", par = 20)
generate_data(n = 10, dist = "Gamma", par =c(3, 0.1))
generate_data(n = 10, dist = "Gamma", par =c(3, 9))
generate_data(n = 10, dist = "Gamma", par =c(10, 9))
generate_data(n = 10, dist = "Gamma", par =c(10, 10))
generate_data(n = 10, dist = "Gamma", par =c(100, 10))
generate_data(n = 10, dist = "Gamma", par =c(100, 100))
generate_data(n = 10, dist = "Gamma", par =c(0.1, 0.1))
generate_data(n = 10, dist = "Chi-Square", par = 19)
