cat("\n==== Distribution:", dist, "====\n")
results_all[[dist]] <- list()
for (n in sample_sizes) {
cat("Sample size:", n, "\n")
results <- generate_pval(n = n, N = Nsim, dist = dist, effect_size = effect_size)
power_t <- mean(results$pval_t.test < 0.05)
power_u <- mean(results$pval_u.test < 0.05)
power_adaptive <- numeric(length(alpha_pretest))
pr_sw <- numeric(length(alpha_pretest))
for (j in seq_along(alpha_pretest)) {
alpha <- alpha_pretest[j]
pval_adaptive <- ifelse(
results$p_sw_x > alpha & results$p_sw_y > alpha,
results$pval_t.test,
results$pval_u.test
)
power_adaptive[j] <- mean(pval_adaptive < 0.05)
pr_sw = mean(results$p_sw_x < alpha & results$p_sw_y < alpha)
}
# Store average power over all alpha levels
results_all[[dist]][[as.character(n)]] <- list(
pr_sw = mean(pr_sw),
power_t_test = power_t,
power_u_test = power_u,
mean_power_adaptive = mean(power_adaptive)
)
}
}
# data frame per distribution
test_power_dfs <- list()
for (dist in distributions) {
# Extract results for current distribution
dist_results <- results_all[[dist]]
# Initialize vectors to store power values by sample size
prob_sw <- t_powers <- u_powers <- adaptive_powers <- numeric(length(sample_sizes))
for (i in seq_along(sample_sizes)) {
n <- as.character(sample_sizes[i])
prob_sw[i] <- dist_results[[n]]$pr_sw
t_powers[i] <- dist_results[[n]]$power_t_test
u_powers[i] <- dist_results[[n]]$power_u_test
adaptive_powers[i] <- dist_results[[n]]$mean_power_adaptive
}
# Create dataframe
df <- data.frame(
SampleSize = sample_sizes,
prob_sw.test  = prob_sw,
t_test = t_powers,
wilcox_test = u_powers,
adaptive_test = adaptive_powers
)
test_power_dfs[[dist]] <- df
}
# View result for Normal distribution
print(test_power_dfs$Normal)
# View result for LogNormal distribution
print(test_power_dfs$LogNormal)
df_normal <- test_power_dfs$Normal
df_lognormal <- test_power_dfs$LogNormal
# Set up side-by-side plots
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
# Colors and symbols for consistency
cols <- c("blue", "red", "darkgreen")
pchs <- c(16, 17, 15)
legend_labels <- c("t-test", "Wilcoxon", "Adaptive")
legend_title <- "Method"
# --------- Plot 1: Normal Distribution ----------
plot(df_normal$SampleSize, df_normal$t_test, type = "b", pch = pchs[1], col = cols[1],
ylim = c(0, 1), xlab = "Sample Size", ylab = "Power", main = "Normal Distribution")
lines(df_normal$SampleSize, df_normal$wilcox_test, type = "b", pch = pchs[2], col = cols[2])
lines(df_normal$SampleSize, df_normal$adaptive_test, type = "b", pch = pchs[3], col = cols[3])
legend("bottomright", legend = legend_labels,title = legend_title , col = cols, pch = pchs, bty = "n")
# --------- Plot 2: LogNormal Distribution ----------
plot(df_lognormal$SampleSize, df_lognormal$t_test, type = "b", pch = pchs[1], col = cols[1],
ylim = c(0, 1), xlab = "Sample Size", ylab = "Power", main = "LogNormal Distribution")
lines(df_lognormal$SampleSize, df_lognormal$wilcox_test, type = "b", pch = pchs[2], col = cols[2])
lines(df_lognormal$SampleSize, df_lognormal$adaptive_test, type = "b", pch = pchs[3], col = cols[3])
legend("bottomright", legend = legend_labels, title = legend_title , col = cols, pch = pchs, bty = "n")
# ROC plot
FPR <- df_normal$prob_sw * (df_normal$adaptive_test - df_normal$t_test)
TPR <- df_lognormal$prob_sw * (df_lognormal$adaptive_test - df_lognormal$t_test)
plot(df_normal$adaptive_test, df_lognormal$adaptive_test, type = "b", col = "red", pch = pchs[3],
xlab = "Normal", ylab = "Lognormal")
# # save RData
save(
test_power_dfs,
sample_size,
alpha_pretest,
file = "power_diff_ROC_curve.RData"
)
generate_pval <- function(n, N, dist, effect_size, alpha){
pval_t.test <- pval_u.test <- numeric(N)
p_sw_x <- p_sw_y <- numeric(N)
for(i in 1:N){
x <- generate_data(n, dist)
y <- generate_data(n, dist)
p_sw_x[i] <- shapiro.test(x)$p.value
p_sw_y[i] <- shapiro.test(y)$p.value
pval_t.test[i] <- t.test(x, y + effect_size)$p.value
pval_u.test[i] <- wilcox.test(x, y + effect_size)$p.value
}
list(
p_sw_x = p_sw_x,
p_sw_y = p_sw_y,
pval_t.test = pval_t.test,
pval_u.test = pval_u.test
)
}
# Parameters
alpha_pretest <- seq(0.01, 0.1, by = 0.01)
sample_size <- c(8, 10, 20, 30, 40, 50)
Nsim <- 1e3
distributions <- c("Normal", "LogNormal")
effect_size <- 0.5
# Store results by distribution and sample size
results_all <- list()
for (dist in distributions) {
cat("\n==== Distribution:", dist, "====\n")
results_all[[dist]] <- list()
for (n in sample_size) {
cat("Sample size:", n, "\n")
results <- generate_pval(n = n, N = Nsim, dist = dist, effect_size = effect_size)
power_t <- mean(results$pval_t.test < 0.05)
power_u <- mean(results$pval_u.test < 0.05)
power_adaptive <- numeric(length(alpha_pretest))
pr_sw <- numeric(length(alpha_pretest))
for (j in seq_along(alpha_pretest)) {
alpha <- alpha_pretest[j]
pval_adaptive <- ifelse(
results$p_sw_x > alpha & results$p_sw_y > alpha,
results$pval_t.test,
results$pval_u.test
)
power_adaptive[j] <- mean(pval_adaptive < 0.05)
pr_sw = mean(results$p_sw_x < alpha & results$p_sw_y < alpha)
}
# Store average power over all alpha levels
results_all[[dist]][[as.character(n)]] <- list(
pr_sw = mean(pr_sw),
power_t_test = power_t,
power_u_test = power_u,
mean_power_adaptive = mean(power_adaptive)
)
}
}
# data frame per distribution
test_power_dfs <- list()
for (dist in distributions) {
# Extract results for current distribution
dist_results <- results_all[[dist]]
# Initialize vectors to store power values by sample size
prob_sw <- t_powers <- u_powers <- adaptive_powers <- numeric(length(sample_size))
for (i in seq_along(sample_size)) {
n <- as.character(sample_size[i])
prob_sw[i] <- dist_results[[n]]$pr_sw
t_powers[i] <- dist_results[[n]]$power_t_test
u_powers[i] <- dist_results[[n]]$power_u_test
adaptive_powers[i] <- dist_results[[n]]$mean_power_adaptive
}
# Create dataframe
df <- data.frame(
SampleSize = sample_size,
prob_sw.test  = prob_sw,
t_test = t_powers,
wilcox_test = u_powers,
adaptive_test = adaptive_powers
)
test_power_dfs[[dist]] <- df
}
# # save RData
save(
test_power_dfs,
sample_size,
alpha_pretest,
file = "power_diff_ROC_curve.RData"
)
# View result for Normal distribution
print(test_power_dfs$Normal)
# View result for LogNormal distribution
print(test_power_dfs$LogNormal)
df_normal <- test_power_dfs$Normal
df_lognormal <- test_power_dfs$LogNormal
# Set up side-by-side plots
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
# Colors and symbols for consistency
cols <- c("blue", "red", "darkgreen")
pchs <- c(16, 17, 15)
legend_labels <- c("t-test", "Wilcoxon", "Adaptive")
legend_title <- "Method"
# --------- Plot 1: Normal Distribution ----------
plot(df_normal$SampleSize, df_normal$t_test, type = "b", pch = pchs[1], col = cols[1],
ylim = c(0, 1), xlab = "Sample Size", ylab = "Power", main = "Normal Distribution")
lines(df_normal$SampleSize, df_normal$wilcox_test, type = "b", pch = pchs[2], col = cols[2])
lines(df_normal$SampleSize, df_normal$adaptive_test, type = "b", pch = pchs[3], col = cols[3])
legend("bottomright", legend = legend_labels,title = legend_title , col = cols, pch = pchs, bty = "n")
# --------- Plot 2: LogNormal Distribution ----------
plot(df_lognormal$SampleSize, df_lognormal$t_test, type = "b", pch = pchs[1], col = cols[1],
ylim = c(0, 1), xlab = "Sample Size", ylab = "Power", main = "LogNormal Distribution")
lines(df_lognormal$SampleSize, df_lognormal$wilcox_test, type = "b", pch = pchs[2], col = cols[2])
lines(df_lognormal$SampleSize, df_lognormal$adaptive_test, type = "b", pch = pchs[3], col = cols[3])
legend("bottomright", legend = legend_labels, title = legend_title , col = cols, pch = pchs, bty = "n")
# ROC plot
FPR <- df_normal$prob_sw * (df_normal$adaptive_test - df_normal$t_test)
TPR <- df_lognormal$prob_sw * (df_lognormal$adaptive_test - df_lognormal$t_test)
plot(df_normal$adaptive_test, df_lognormal$adaptive_test, type = "b", col = "red", pch = pchs[3],
xlab = "Normal", ylab = "Lognormal")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/power_diff_ROC_curve.RData")
# Print summary results
#print(results_all)
load(file = "/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/ROC_like_curve_v1.RData")
EPL =results_all$Normal$prob_sw * results_all$Normal$Powerloss
EPG =results_all$Exponential$prob_sw * results_all$Exponential$Powerloss
plot(EPL, EPG, type = "l", col = "red", lwd = 3, main = "ROC Like Curve: EPG vs. EPL")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/power_diff_ROC_curve.RData")
df_normal <- test_power_dfs$Normal
df_lognormal <- test_power_dfs$LogNormal
# Set up side-by-side plots
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
# Colors and symbols for consistency
cols <- c("blue", "red", "darkgreen")
pchs <- c(16, 17, 15)
legend_labels <- c("t-test", "Wilcoxon", "Adaptive")
legend_title <- "Method"
# --------- Plot 1: Normal Distribution ----------
plot(df_normal$SampleSize, df_normal$t_test, type = "b", pch = pchs[1], col = cols[1],
ylim = c(0, 1), xlab = "Sample Size", ylab = "Power", main = "Normal Distribution")
lines(df_normal$SampleSize, df_normal$wilcox_test, type = "b", pch = pchs[2], col = cols[2])
lines(df_normal$SampleSize, df_normal$adaptive_test, type = "b", pch = pchs[3], col = cols[3])
legend("bottomright", legend = legend_labels,title = legend_title , col = cols, pch = pchs, bty = "n")
# --------- Plot 2: LogNormal Distribution ----------
plot(df_lognormal$SampleSize, df_lognormal$t_test, type = "b", pch = pchs[1], col = cols[1],
ylim = c(0, 1), xlab = "Sample Size", ylab = "Power", main = "LogNormal Distribution")
lines(df_lognormal$SampleSize, df_lognormal$wilcox_test, type = "b", pch = pchs[2], col = cols[2])
lines(df_lognormal$SampleSize, df_lognormal$adaptive_test, type = "b", pch = pchs[3], col = cols[3])
legend("bottomright", legend = legend_labels, title = legend_title , col = cols, pch = pchs, bty = "n")
# ROC plot
FPR <- df_normal$prob_sw * (df_normal$adaptive_test - df_normal$t_test)
TPR <- df_lognormal$prob_sw * (df_lognormal$adaptive_test - df_lognormal$t_test)
plot(df_normal$adaptive_test, df_lognormal$adaptive_test, type = "b", col = "red", pch = pchs[3],
xlab = "Normal", ylab = "Lognormal")
# Print summary results
#print(results_all)
load(file = "/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/ROC_like_curve_v1.RData")
EPL =results_all$Normal$prob_sw * results_all$Normal$Powerloss
EPG =results_all$Exponential$prob_sw * results_all$Exponential$Powerloss
plot(EPL, EPG, type = "l", col = "red", lwd = 3, main = "ROC Like Curve: EPG vs. EPL")
# Print summary results
#print(results_all)
load(file = "/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/ROC_like_curve_v1.RData")
EPL =results_all$Normal$prob_sw * results_all$Normal$Powerloss
EPG =results_all$Exponential$prob_sw * results_all$Exponential$Powerloss
plot(EPL, EPG, type = "l", col = "red", lwd = 3, main = "ROC Like Curve: EPG vs. EPL")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/power_diff_ROC_curve.RData")
df_normal <- test_power_dfs$Normal
df_lognormal <- test_power_dfs$LogNormal
# Set up side-by-side plots
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
# Colors and symbols for consistency
cols <- c("blue", "red", "darkgreen")
pchs <- c(16, 17, 15)
legend_labels <- c("t-test", "Wilcoxon", "Adaptive")
legend_title <- "Method"
# --------- Plot 1: Normal Distribution ----------
plot(df_normal$SampleSize, df_normal$t_test, type = "b", pch = pchs[1], col = cols[1], lwd = 3,
ylim = c(0, 1), xlab = "Sample Size", ylab = "Power", main = "Normal Distribution")
lines(df_normal$SampleSize, df_normal$wilcox_test, type = "b", pch = pchs[2], col = cols[2], lwd = 3)
lines(df_normal$SampleSize, df_normal$adaptive_test, type = "b", pch = pchs[3], col = cols[3], lwd = 3)
legend("bottomright", legend = legend_labels,title = legend_title , col = cols, pch = pchs, bty = "n")
# --------- Plot 2: LogNormal Distribution ----------
plot(df_lognormal$SampleSize, df_lognormal$t_test, type = "b", pch = pchs[1], col = cols[1], lwd = 3,
ylim = c(0, 1), xlab = "Sample Size", ylab = "Power", main = "LogNormal Distribution")
lines(df_lognormal$SampleSize, df_lognormal$wilcox_test, type = "b", pch = pchs[2], col = cols[2], lwd = 3)
lines(df_lognormal$SampleSize, df_lognormal$adaptive_test, type = "b", pch = pchs[3], col = cols[3], lwd = 3)
legend("bottomright", legend = legend_labels, title = legend_title , col = cols, pch = pchs, bty = "n")
# ROC plot
FPR <- df_normal$prob_sw * (df_normal$adaptive_test - df_normal$t_test)
TPR <- df_lognormal$prob_sw * (df_lognormal$adaptive_test - df_lognormal$t_test)
plot(df_normal$adaptive_test, df_lognormal$adaptive_test, type = "b", col = "red", pch = pchs[3], lwd = 3,
xlab = "Normal", ylab = "Lognormal")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/Summer 2025/Powerloss.RData")
# # View results
# cat("\n=====Type I error rates=======\n")
# print(error_results)
#
# cat("\n=====Power=======\n")
# print(power_results)
#
power_diff <- power_results$LogNormal$power_perm - power_results$LogNormal$power_t
powerloss <- power_results$LogNormal$power_adaptive_perm - power_results$LogNormal$power_t
powerloss_wilcox <- power_results$LogNormal$power_adaptive_wilcox - power_results$LogNormal$power_t
#Expected_powerloss <- round(powerloss * prob_sw, 5)
# Set up side-by-side plots
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
# Colors and symbols for consistency
cols <- c("blue", "red", "darkgreen", "green", "orange")
pchs <- c(16, 17, 15, 18, 21)
legend_labels <- c("t-test", "Wilcoxon","permutation", "Adaptive_wilcoxon", "Adaptive_perm")
legend_title <- "Method"
# normal
plot(sample_size, power_results$Normal$power_t, type = "b", lwd = 3,  pch = pchs[1], col = cols[1], ylim = c(0, 1))
lines(sample_size, power_results$Normal$power_wilcox, type = "b",  pch = pchs[2], col = cols[2])
lines(sample_size, power_results$Normal$power_permutation, type = "b", lwd = 3, pch = pchs[3], col = cols[3])
lines(sample_size, power_results$Normal$power_adaptive_wilcox, type = "b",  lwd = 3, pch = pchs[4], col = cols[4])
lines(sample_size, power_results$Normal$power_adaptive_perm, type = "b", lwd = 3, pch = pchs[5], col = cols[5])
legend("bottomright", legend = legend_labels, title = legend_title, pch = pchs, col = cols)
title(main = "Power comparison of downstream tests")
# Lognormal
plot(sample_size, power_results$LogNormal$power_t, type = "b", lwd = 3, pch = pchs[1], col = cols[1], ylim = c(0, 1))
lines(sample_size, power_results$LogNormal$power_wilcox, type = "b",  lwd = 3, pch = pchs[2], col = cols[2])
lines(sample_size, power_results$LogNormal$power_permutation, type = "b",  lwd = 3, pch = pchs[3], col = cols[3])
lines(sample_size, power_results$LogNormal$power_adaptive_wilcox, type = "b",  lwd = 3, pch = pchs[4], col = cols[4])
lines(sample_size, power_results$LogNormal$power_adaptive_perm, type = "b", lwd = 3, pch = pchs[5], col = cols[5])
legend("bottomright", legend = legend_labels, title = legend_title, pch = pchs, col = cols)
title(main = "Power comparison of downstream tests")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
generate_pval <- function(n, N, dist, effect_size, alpha){
pval_t.test <- pval_u.test <- pval_perm.test <- numeric(N)
p_sw_x <- p_sw_y <- numeric(N)
for(i in 1:N){
x <- generate_data(n, dist)
y <- generate_data(n, dist)
p_sw_x[i] = shapiro.test(x)$p.value
p_sw_y[i] = shapiro.test(y)$p.value
pval_t.test[i] <- t.test(x, y + effect_size)$p.value
pval_u.test[i] <- wilcox.test(x, y + effect_size)$p.value
}
pval_results <- list(
p_sw_x = p_sw_x,
p_sw_y = p_sw_y,
pval_t.test = pval_t.test,
pval_u.test = pval_u.test
)
return(pval_results)
}
alpha_pretest <- seq(from = 0.001, to = 0.07, by = 0.01)
n <- 10
Nsim <- 1e3
distributions <- c("Normal", "LogNormal")
effect_size <- 0.5
results_all <- list()
for(dist in distributions){
cat("\nRunning for distribution:", dist, "\n")
results <- generate_pval(n = n, N = Nsim, dist = dist, effect_size = effect_size)
power_t <- mean(results$pval_t.test < 0.05)
power_u <- mean(results$pval_u.test < 0.05)
power_adaptive <- pr_sw <- numeric(length(alpha_pretest))
for (j in seq_along(alpha_pretest)) {
alpha <- alpha_pretest[j]
pval_adaptive <- ifelse(
results$p_sw_x > alpha & results$p_sw_y > alpha,
results$pval_t.test,
results$pval_u.test
)
power_adaptive[j] <- mean(pval_adaptive < 0.05)
pr_sw[j] <- mean(results$p_sw_x < alpha | results$p_sw_y < alpha)
}
results_all[[dist]] <- list(
prob_sw = pr_sw,
power_t_test = power_t,
power_u_test = power_u,
power_adaptive = power_adaptive,
Powerloss = power_adaptive - power_t
)
}
# Print summary results
print(results_all)
EPL =results_all$Normal$prob_sw * results_all$Normal$Powerloss
EPG =results_all$LogNormal$prob_sw * results_all$LogNormal$Powerloss
plot(EPL, EPG, type = "l", col = "red")
# View results
print(error_results)
rm(list = ls())
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
generate_pval <- function(n, N, dist, effect_size, alpha){
error_pval_t <- error_pval_u <- error_pval_perm <- numeric(N)
power_pval_t <- power_pval_u <- power_pval_perm <- numeric(N)
p_sw_x <- p_sw_y <- numeric(N)
for(i in 1:N){
x <- generate_data(n, dist)
y <- generate_data(n, dist)
# shapiro-wilk test pvalues
p_sw_x[i] = shapiro.test(x)$p.value
p_sw_y[i] = shapiro.test(y)$p.value
# Type I error
error_pval_t[i] <- t.test(x, y )$p.value
error_pval_u[i] <- wilcox.test(x, y )$p.value
error_pval_perm[i] <- two_sample_permutation_test(x, y, B)
# power
power_pval_t[i] <- t.test(x, y + effect_size)$p.value
power_pval_u[i] <- wilcox.test(x, y + effect_size)$p.value
power_pval_perm[i] <- two_sample_permutation_test(x, y + effect_size, B)
}
# error of adaptive test
error_pval_adaptive_wilcox <- ifelse(p_sw_x > alpha & p_sw_y > alpha, error_pval_t, error_pval_u)
error_pval_adaptive_perm <- ifelse(p_sw_x > alpha & p_sw_y > alpha, error_pval_t, error_pval_perm)
# power of adaptive test
power_pval_adaptive_wilcox <- ifelse(p_sw_x > alpha & p_sw_y > alpha, power_pval_t, power_pval_u)
power_pval_adaptive_perm <- ifelse(p_sw_x > alpha & p_sw_y > alpha, power_pval_t, power_pval_perm)
list(
# prob of sw test
prob_sw = mean(p_sw_x <= alpha | p_sw_y <= alpha),
#error
error_t = mean(error_pval_t < alpha),
error_wilcox = mean(error_pval_u < alpha),
error_perm = mean(error_pval_perm < alpha),
error_adaptive_wilcox = mean(error_pval_adaptive_wilcox < alpha),
error_adaptive_perm = mean(error_pval_adaptive_perm < alpha),
#power
power_t = mean(power_pval_t < alpha),
power_wilcox = mean(power_pval_u < alpha),
power_perm = mean(power_pval_perm < alpha),
power_adaptive_wilcox = mean(power_pval_adaptive_wilcox < alpha),
power_adaptive_perm = mean(power_pval_adaptive_perm < alpha)
)
}
# example
Nsim <- 1e3
B = 1e3
effect_size <- 0.5
alpha <- 0.05
distributions <- c("Normal", "LogNormal")
sample_size <- c(8, 10, 20, 30, 40, 50)
# Output container
error_results <- list()
power_results <- list()
for(dist in distributions){
error_t <- error_wilcox <- error_perm <- error_adaptive_wilcox <- error_adaptive_perm <- numeric(length(sample_size))
power_t <- power_wilcox <- power_perm <- power_adaptive_wilcox <- power_adaptive_perm <- numeric(length(sample_size))
prob_sw <- numeric(length(sample_size))
for(j in seq_along(sample_size)){
results <- generate_pval(n = sample_size[j], N = Nsim, dist = dist, effect_size = effect_size, alpha = alpha)
# error
error_t[j] <- results$error_t
error_wilcox[j] <- results$error_wilcox
error_perm[j] <- results$error_perm
error_adaptive_wilcox[j] <- results$error_adaptive_wilcox
error_adaptive_perm[j] <- results$error_adaptive_perm
# power
power_t[j] <- results$power_t
power_wilcox[j] <- results$power_wilcox
power_perm[j] <- results$power_perm
power_adaptive_wilcox[j] <- results$power_adaptive_wilcox
power_adaptive_perm[j] <- results$power_adaptive_perm
prob_sw[j] <- results$prob_sw
}
# Combine into a data frame
error_results[[dist]] <- data.frame(
n = sample_size,
prob_sw = prob_sw,
error_t = error_t,
error_wilcox = error_wilcox,
error_permutation = error_perm,
error_adaptive_wilcox = error_adaptive_wilcox,
error_adaptive_perm = error_adaptive_perm
)
power_results[[dist]] <- data.frame(
n = sample_size,
prob_sw = prob_sw,
power_t = power_t,
power_wilcox = power_wilcox,
power_permutation = power_perm,
power_adaptive_wilcox = power_adaptive_wilcox,
power_adaptive_perm = power_adaptive_perm
)
}
# View results
print(error_results)
print(power_results)
power_diff <- power_results$LogNormal$power_perm - power_results$LogNormal$power_t
powerloss_perm <- power_results$LogNormal$power_adaptive_perm - power_results$LogNormal$power_t
powerloss_wilcox <- power_results$LogNormal$power_adaptive_wilcox - power_results$LogNormal$power_t
Expected_powerloss_perm <- round(powerloss_perm * prob_sw, 5)
Expected_powerloss_wilcox <- round(powerloss_wilcox * prob_sw, 5)
# create a 1x2 plot
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
cols <- c("blue", "red", "darkgreen", "green", "orange")
pchs <- c(16, 17, 15, 18, 21)
legend_labels <- c("t-test", "Wilcoxon","permutation", "Adaptive_wilcoxon", "Adaptive_perm")
legend_title <- "Method"
# normal
plot(sample_size, power_results$Normal$power_t, type = "b", lty = 1, lwd = 3,  pch = pchs[1], col = cols[1], ylim = c(0, 1))
lines(sample_size, power_results$Normal$power_wilcox, type = "b", lty = 2, pch = pchs[2], col = cols[2])
lines(sample_size, power_results$Normal$power_permutation, type = "b", lty = 3,lwd = 3, pch = pchs[3], col = cols[3])
lines(sample_size, power_results$Normal$power_adaptive_wilcox, type = "b", lty = 4, lwd = 3, pch = pchs[4], col = cols[4])
lines(sample_size, power_results$Normal$power_adaptive_perm, type = "b", lty = 4, lwd = 3, pch = pchs[5], col = cols[5])
legend("bottomright", legend = legend_labels, title = legend_title, pch = pchs, col = cols)
title(main = "Power comparison of downstream tests")
# Lognormal
plot(sample_size, power_results$LogNormal$power_t, type = "b", lty = 1, lwd = 3, pch = pchs[1], col = cols[1], ylim = c(0, 1))
lines(sample_size, power_results$LogNormal$power_wilcox, type = "b", lty = 2, lwd = 3, pch = pchs[2], col = cols[2])
lines(sample_size, power_results$LogNormal$power_permutation, type = "b", lty = 3, lwd = 3, pch = pchs[3], col = cols[3])
lines(sample_size, power_results$LogNormal$power_adaptive_wilcox, type = "b", lty = 4, lwd = 3, pch = pchs[4], col = cols[4])
lines(sample_size, power_results$LogNormal$power_adaptive_perm, type = "b", lty = 4, lwd = 3, pch = pchs[5], col = cols[5])
legend("bottomright", legend = legend_labels, title = legend_title, pch = pchs, col = cols)
title(main = "Power comparison of downstream tests")
plot(sample_size, Expected_powerloss_wilcox, type = "b", col = "red")
plot(sample_size, Expected_powerloss_wilcox, type = "b", col = "red")
lines(sample_size, Expected_powerloss_perm, type = "b", col = "blue")
Expected_powerloss_perm
plot(sample_size, Expected_powerloss_wilcox, type = "b", col = "red", ylim = c(0, 0.75))
lines(sample_size, Expected_powerloss_perm, type = "b", col = "blue")
Expected_powerloss_perm <- round(powerloss_perm * (1 - prob_sw), 5)
Expected_powerloss_wilcox <- round(powerloss_wilcox * (1-prob_sw), 5)
# create a 1x2 plot
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
plot(sample_size, Expected_powerloss_wilcox, type = "b", col = "red", ylim = c(0, 0.75))
lines(sample_size, Expected_powerloss_perm, type = "b", col = "blue")
plot(sample_size, Expected_powerloss_wilcox, type = "b", col = "red", ylim = c(0, 0.5))
lines(sample_size, Expected_powerloss_perm, type = "b", col = "blue")
plot(sample_size, Expected_powerloss_wilcox, type = "b", col = "red", ylim = c(0, 0.1))
lines(sample_size, Expected_powerloss_perm, type = "b", col = "blue")
plot(sample_size, Expected_powerloss_wilcox, type = "b", col = "red", ylim = c(0, 0.1))
lines(sample_size, Expected_powerloss_perm, type = "b", col = "blue")
