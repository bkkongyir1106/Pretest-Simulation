))
}
normality_test(test = "AD", alpha = 0.05)
normality_test(test = "AD", alpha = 0.05)
normality_test(test = "AD", alpha = 0.05)
# Load necessary utilities
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
# ---------------------------------------------------------------
# Helper: Load a user-defined function from a file
load_user_test_function <- function() {
file_path <- file.choose()
env <- new.env()
source(file = file_path, local = env)
fun_names <- ls(env)
funs_only <- fun_names[sapply(fun_names, function(x) is.function(env[[x]]))]
if (length(funs_only) == 0) {
stop("No function found in the file.")
}
cat("Functions found:\n")
for (i in seq_along(funs_only)) {
cat(i, ":", funs_only[i], "\n")
}
if (length(funs_only) == 1) {
cat("Only one function found. Using it by default.\n")
return(env[[funs_only[1]]])
} else {
repeat {
choice <- as.integer(readline("Enter the number of the function to use: "))
if (!is.na(choice) && choice >= 1 && choice <= length(funs_only)) {
cat(funs_only[choice], "function loaded successfully.\n")
return(env[[funs_only[choice]]])
} else {
cat("Invalid input. Please enter a number between 1 and", length(funs_only), "\n")
}
}
}
}
# ----------------------------------------------------------------
# Main function to perform normality test using user-loaded functions
normality_test <- function(test = "SW", alpha = 0.05) {
# Step 1: Load data-generating function
cat("Please load your data generation function\n")
generate_function <- load_user_test_function()
# Generate data
generated_data <- generate_function()
# Step 2: Load function that structures/extracts data for testing
cat("\nChoose a function to extract part of model/data to test for normality\n")
extractor_function <- load_user_test_function()
# Extract target structure (e.g., residuals, list of samples, etc.)
data <- extractor_function(generated_data)
# Step 3: Perform the normality test
pvals <- NULL
# Case 1: Single numeric vector
if (is.numeric(data) && is.atomic(data) && is.null(dim(data))) {
pval <- generate_tests(data, test = test)$p.value
cat("\np-value for", test, "test for normality:\n")
return(list(
p_values = pval,
normality_satisfied = pval > alpha
))
}
# Case 2: List of numeric vectors
else if (is.list(data) && !is.data.frame(data)) {
pvals <- sapply(data, function(sample) {
if (!is.numeric(sample))
stop("All elements in the list must be numeric vectors.")
generate_tests(sample, test = test)$p.value
})
names(pvals) <- names(data) %||% paste0("Sample", seq_along(pvals))
}
# Case 3: Wide-format data frame
else if (is.data.frame(data) && all(sapply(data, is.numeric))) {
pvals <- sapply(as.list(data), function(x) generate_tests(x, test = test)$p.value)
names(pvals) <- names(data)
}
# Case 4: Long-format with group labels
else if ((is.data.frame(data) || is.matrix(data)) && ncol(data) >= 2) {
grouped_samples <- split(data[[1]], data[[2]])
pvals <- sapply(grouped_samples, function(sample) {
generate_tests(sample, test = test)$p.value
})
}
# Unsupported format
else {
stop("Unsupported input type: must be numeric vector, list of vectors, or grouped data.")
}
# Final output
cat("\np-values for", test, "test for normality:\n")
return(list(
p_values = pvals,
normality_satisfied = all(pvals > alpha)
))
}
normality_test(test = "AD", alpha = 0.05)
normality_test(test = "AD", alpha = 0.05)
all_data <- function(){
list(a = generate_data(n = 50, dist = "Gamma"),
b = generate_data(n = 50, dist = "Uniform"),
c = generate_data(n = 50, dist = "Normal"),
d = generate_data(n = 50, dist = "Normal"),
x = generate_data(n = 50, dist = "Normal"),
y = generate_data(n = 50, dist = "Exponential"),
z = generate_data(n = 50, dist = "LogNormal"))
# Combine into a data frame for anova
group <- factor(rep(c("a","b" ,"x", "y", "z"), each = 50))
value <- c(data$a, data$b, data$x, data$y, data$z)
anova_data <- data.frame(group, value)
}
all_data <- function(){
list(a = generate_data(n = 50, dist = "Gamma"),
b = generate_data(n = 50, dist = "Uniform"),
c = generate_data(n = 50, dist = "Normal"),
d = generate_data(n = 50, dist = "Normal"),
x = generate_data(n = 50, dist = "Normal"),
y = generate_data(n = 50, dist = "Exponential"),
z = generate_data(n = 50, dist = "LogNormal"))
# Combine into a data frame for anova
group <- factor(rep(c("a","b" ,"x", "y", "z"), each = 50))
value <- c(data$a, data$b, data$x, data$y, data$z)
anova_data <- data.frame(group, value)
}
all_data()
all_data <- function(){
list(a = generate_data(n = 50, dist = "Gamma"),
b = generate_data(n = 50, dist = "Uniform"),
c = generate_data(n = 50, dist = "Normal"),
d = generate_data(n = 50, dist = "Normal"),
x = generate_data(n = 50, dist = "Normal"),
y = generate_data(n = 50, dist = "Exponential"),
z = generate_data(n = 50, dist = "LogNormal"))
# Combine into a data frame for anova
group <- factor(rep(c("a","b" ,"x", "y", "z"), each = 50))
value <- c(data$a, data$b, data$x, data$y, data$z)
return(data.frame(group, value))
}
all_data()
all_data <- function(){
data <- list(a = generate_data(n = 50, dist = "Gamma"),
b = generate_data(n = 50, dist = "Uniform"),
c = generate_data(n = 50, dist = "Normal"),
d = generate_data(n = 50, dist = "Normal"),
x = generate_data(n = 50, dist = "Normal"),
y = generate_data(n = 50, dist = "Exponential"),
z = generate_data(n = 50, dist = "LogNormal"))
# Combine into a data frame for anova
group <- factor(rep(c("a","b" ,"x", "y", "z"), each = 50))
value <- c(data$a, data$b, data$x, data$y, data$z)
return(data.frame(group, value))
}
all_data()
data.frame(group, value)
# Create dataset
set.seed(12345)
data <- list(a = generate_data(n = 50, dist = "Gamma"),
b = generate_data(n = 50, dist = "Uniform"),
c = generate_data(n = 50, dist = "Normal"),
d = generate_data(n = 50, dist = "Normal"),
x = generate_data(n = 50, dist = "Normal"),
y = generate_data(n = 50, dist = "Exponential"),
z = generate_data(n = 50, dist = "LogNormal"))
# Combine into a data frame for anova
group <- factor(rep(c("a","b" ,"x", "y", "z"), each = 50))
value <- c(data$a, data$b, data$x, data$y, data$z)
anova_data <- data.frame(group, value)
anova_data
# ANOVA
anova_test <- function(formula, data){
return(residuals(aov(formula = value ~ group, data = all_data())))
}
# ANOVA
anova_test <- function(){
return(residuals(aov(formula = value ~ group, data = all_data())))
}
anova_test()
# ANOVA
anova_test <- function(data){
return(residuals(aov(formula = value ~ group, data = all_data())))
}
# Identify what needs to be tested for normality
calculate_residuals <- function(data){
return(residuals(lm(z ~ x + y, data = data)))
}
calculate_samples <- function(data) {
if (is.data.frame(data) || is.matrix(data)) {
return(as.list(as.data.frame(data)))
} else if (is.list(data)) {
return(data)
} else {
return(list(data))
}
}
# -----------------------------------
# This function performs normality
# -----------------------------------
normality_test <- function(data, test = "SW") {
# Single numeric vector
if (is.numeric(data) && is.atomic(data) && is.null(dim(data))) {
return(generate_tests(data, test = test)$p.value)
}
# List of numeric vectors
if (is.list(data) && !is.data.frame(data)) {
pvals <- sapply(data, function(sample) {
if (!is.numeric(sample))
stop("All elements in the list must be numeric vectors.")
generate_tests(sample, test = test)$p.value
})
names(pvals) <- paste0("Sample", seq_along(pvals))
return(pvals)
}
# Wide-format data frame (each column is a numeric sample)
if (is.data.frame(data) && all(sapply(data, is.numeric))) {
sample_list <- as.list(data)
pvals <- sapply(sample_list, function(x) generate_tests(x, test = test)$p.value)
return(pvals)
}
# Long-format data frame/matrix with 2 columns
if (is.data.frame(data) || is.matrix(data)) {
if (ncol(data) < 2) {
stop("Input must have at least two columns: values and group labels.")
}
grouped_samples <- split(data[[1]], data[[2]])
pvals <- sapply(grouped_samples, function(sample) {
generate_tests(sample, test = test)$p.value
})
return(pvals)
}
norm_ok <- all(pvals > alpha)
stop("Unsupported input type: must be numeric vector, list of vectors, or 2-column data.frame/matrix.")
}
# -------------------test for normality -------------
normality_test_from_function <- function(f, input, test = "SW") {
result <- f(input)
if (is.numeric(result) && is.atomic(result)) {
return(generate_tests(result, test = test)$p.value)
}
if (is.list(result)) {
pvals <- sapply(result, function(x)
generate_tests(x, test = test)$p.value)
names(pvals) <- paste0("Sample", seq_along(pvals))
return(pvals)
}
stop("Unsupported result type returned from function.")
}
# -------------------------------------------------
# generate_data_function <- function(n,
#                                    para = list(beta0 = 0, beta1 = 1),
#                                    error_generator = rnorm,
#                                    error_args = list(mean = 0, sd = 6),
#                                    f = calculate_residuals) {
#
#   error <- do.call(error_generator, c(list(n = n), error_args))
#
#   y <- para$beta0 + para$beta1 * x + error
#   df <- data.frame(x = x, y = y, z = z, a = a)
#   model <- lm(y ~ x + z, data = df)
#
#   return(f(df))
# }
# # --------------- Example ------------------
# # return the specified components for normality
# set.seed(12345)
# generate_data_function(
#   n = 10,
#   para = list(beta0 = 3, beta1 = 7),
#   error_generator = rnorm,
#   error_args = list(mean = 50, sd = 15),
#   f = calculate_samples
# )
# # -------- test for normality ----------
# normality_test_from_function(
#   f = function(df) generate_data_function(
#     n = 30,
#     para = list(beta0 = 3, beta1 = 7),
#     error_generator = rexp,
#     error_args = list(rate = 3),
#     f = calculate_samples
#   ),
#   input = NULL,
#   test = "SW"
# )
# ------------------------------------------------
# -----------------Downstream test ---------------
# two-sample t-test
two_ind_t_test <- function(x, y = NULL, mu = 0) {
return(t.test(x = x, y = y, mu = mu, paired = FALSE))
}
two_dep_t_test <- function(x, y = NULL, mu = 0) {
return(t.test(x = x, y = y, mu = mu, paired = TRUE))
}
one_sample_t_test <- function(x, mu = 0) {
return(t.test(x = x, mu = mu))
}
# linear regression
simple_linear_regression <- function(formula, data) {
return(summary(lm(formula, data = data)))
}
# Mann Whitney U test
Mann_Whitney_U_test <- function(x, y = NULL, mu = 0){
return(wilcox.test(x, y, mu = mu))
}
# ANOVA
anova_test <- function(data){
return(residuals(aov(formula = value ~ group, data = all_data())))
}
data_gen <- function(){
data <- data.frame(x = rnorm(10, mean = 0, sd = 1),
y = rexp(10, rate = 1),
z = rchisq(10, df = 3))
return(data)
}
all_data <- function(){
data <- list(a = generate_data(n = 50, dist = "Gamma"),
b = generate_data(n = 50, dist = "Uniform"),
c = generate_data(n = 50, dist = "Normal"),
d = generate_data(n = 50, dist = "Normal"),
x = generate_data(n = 50, dist = "Normal"),
y = generate_data(n = 50, dist = "Exponential"),
z = generate_data(n = 50, dist = "LogNormal"))
# Combine into a data frame for anova
group <- factor(rep(c("a","b" ,"x", "y", "z"), each = 50))
value <- c(data$a, data$b, data$x, data$y, data$z)
return(data.frame(group, value))
}
normality_test(test = "AD", alpha = 0.05)
# Load necessary utilities
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
# ---------------------------------------------------------------
# Helper: Load a user-defined function from a file
load_user_test_function <- function() {
file_path <- file.choose()
env <- new.env()
source(file = file_path, local = env)
fun_names <- ls(env)
funs_only <- fun_names[sapply(fun_names, function(x) is.function(env[[x]]))]
if (length(funs_only) == 0) {
stop("No function found in the file.")
}
cat("Functions found:\n")
for (i in seq_along(funs_only)) {
cat(i, ":", funs_only[i], "\n")
}
if (length(funs_only) == 1) {
cat("Only one function found. Using it by default.\n")
return(env[[funs_only[1]]])
} else {
repeat {
choice <- as.integer(readline("Enter the number of the function to use: "))
if (!is.na(choice) && choice >= 1 && choice <= length(funs_only)) {
cat(funs_only[choice], "function loaded successfully.\n")
return(env[[funs_only[choice]]])
} else {
cat("Invalid input. Please enter a number between 1 and", length(funs_only), "\n")
}
}
}
}
# ----------------------------------------------------------------
# Main function to perform normality test using user-loaded functions
normality_test <- function(test = "SW", alpha = 0.05) {
# Step 1: Load data-generating function
cat("Please load your data generation function\n")
generate_function <- load_user_test_function()
# Generate data
generated_data <- generate_function()
# Step 2: Load function that structures/extracts data for testing
cat("\nChoose a function to extract part of model/data to test for normality\n")
extractor_function <- load_user_test_function()
# Extract target structure (e.g., residuals, list of samples, etc.)
data <- extractor_function(generated_data)
# Step 3: Perform the normality test
pvals <- NULL
# Case 1: Single numeric vector
if (is.numeric(data) && is.atomic(data) && is.null(dim(data))) {
pval <- generate_tests(data, test = test)$p.value
cat("\np-value for", test, "test for normality:\n")
return(list(
p_values = pval,
normality_satisfied = pval > alpha
))
}
# Case 2: List of numeric vectors
else if (is.list(data) && !is.data.frame(data)) {
pvals <- sapply(data, function(sample) {
if (!is.numeric(sample))
stop("All elements in the list must be numeric vectors.")
generate_tests(sample, test = test)$p.value
})
names(pvals) <- names(data) %||% paste0("Sample", seq_along(pvals))
}
# Case 3: Wide-format data frame
else if (is.data.frame(data) && all(sapply(data, is.numeric))) {
pvals <- sapply(as.list(data), function(x) generate_tests(x, test = test)$p.value)
names(pvals) <- names(data)
}
# Case 4: Long-format with group labels
else if ((is.data.frame(data) || is.matrix(data)) && ncol(data) >= 2) {
grouped_samples <- split(data[[1]], data[[2]])
pvals <- sapply(grouped_samples, function(sample) {
generate_tests(sample, test = test)$p.value
})
}
# Unsupported format
else {
stop("Unsupported input type: must be numeric vector, list of vectors, or grouped data.")
}
# Final output
cat("\np-values for", test, "test for normality:\n")
return(list(
p_values = pvals,
normality_satisfied = all(pvals > alpha)
))
}
normality_test(test = "AD", alpha = 0.05)
normality_test(test = "AD", alpha = 0.05)
normality_test(test = "AD", alpha = 0.05)
set.seed(12345)
normality_test(test = "AD", alpha = 0.05)
normality_test(test = "AD", alpha = 0.05)
# Load necessary utilities
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
# ---------------------------------------------------------------
# Load a user-defined function from a file
load_user_test_function <- function() {
file_path <- file.choose()
env <- new.env()
source(file = file_path, local = env)
fun_names <- ls(env)
funs_only <- fun_names[sapply(fun_names, function(x) is.function(env[[x]]))]
if (length(funs_only) == 0) {
stop("No function found in the file.")
}
cat("Functions found:\n")
for (i in seq_along(funs_only)) {
cat(i, ":", funs_only[i], "\n")
}
if (length(funs_only) == 1) {
cat("Only one function found. Using it by default.\n")
return(env[[funs_only[1]]])
} else {
repeat {
choice <- as.integer(readline("Enter the number of the function to use: "))
if (!is.na(choice) && choice >= 1 && choice <= length(funs_only)) {
cat(funs_only[choice], "function loaded successfully.\n")
return(env[[funs_only[choice]]])
} else {
cat("Invalid input. Please enter a number between 1 and", length(funs_only), "\n")
}
}
}
}
# ----------------------------------------------------------------
# Main function to perform normality test using user-loaded functions
normality_test <- function(test = "SW", alpha = 0.05) {
# Step 1: Load data-generating function
cat("Please load your data generation function\n")
generate_function <- load_user_test_function()
# Generate data
generated_data <- generate_function()
# Step 2: Load function that structures/extracts data for testing
cat("\nChoose a function to extract part of model/data to test for normality\n")
extractor_function <- load_user_test_function()
# Extract target structure
data <- extractor_function(generated_data)
# Step 3: Perform the normality test
pvals <- NULL
# Case 1: Single numeric vector
if (is.numeric(data) && is.atomic(data) && is.null(dim(data))) {
pval <- generate_tests(data, test = test)$p.value
cat("\np-value for", test, "test for normality:\n")
return(list(
p_values = pval,
normality_satisfied = pval > alpha
))
}
# Case 2: List of numeric vectors
else if (is.list(data) && !is.data.frame(data)) {
pvals <- sapply(data, function(sample) {
if (!is.numeric(sample))
stop("All elements in the list must be numeric vectors.")
generate_tests(sample, test = test)$p.value
})
names(pvals) <- names(data) %||% paste0("Sample", seq_along(pvals))
}
# Case 3: Wide-format data frame
else if (is.data.frame(data) && all(sapply(data, is.numeric))) {
pvals <- sapply(as.list(data), function(x) generate_tests(x, test = test)$p.value)
names(pvals) <- names(data)
}
# Case 4: Long-format with group labels
else if ((is.data.frame(data) || is.matrix(data)) && ncol(data) >= 2) {
grouped_samples <- split(data[[1]], data[[2]])
pvals <- sapply(grouped_samples, function(sample) {
generate_tests(sample, test = test)$p.value
})
}
# Unsupported format
else {
stop("Unsupported input type: must be numeric vector, list of vectors, or grouped data.")
}
# Final output
cat("\np-values for", test, "test for normality:\n")
return(list(
p_values = pvals,
normality_satisfied = all(pvals > alpha)
))
}
set.seed(12345)
normality_test(test = "AD", alpha = 0.05)
normality_test(test = "AD", alpha = 0.05)
normality_test(test = "AD", alpha = 0.05)
normality_test(test = "AD", alpha = 0.05)
normality_test(test = "AD", alpha = 0.05)
