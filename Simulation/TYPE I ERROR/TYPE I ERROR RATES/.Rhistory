# Extract the Bayes factor for the alternative hypothesis
bf <- exp(bf_result@bayesFactor$bf)
# Check if BF > 3 (strong evidence for the alternative hypothesis)
if (bf > 1) {
type1_errors <- type1_errors + 1  # Increment the Type I error counter
}
}
# Calculate the Type I error rate
type1_error_rate <- type1_errors / n_sim
# Display the result
cat("Estimated Type I Error Rate:", type1_error_rate, "\n")
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% UTILS %%%%%%%%%%%%%%%%%%%%%%%%%-----
# clear working environment
rm(list = ls())
# # set directories in cluster
# source("/home/kongyir/spring2024/User_defined_functions.R")
# source("/home/kongyir/spring2024/utility.R")
# set directories in local computer
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/TYPE I ERROR RATES/Selective Inference Type I error")
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/TYPE I ERROR/TYPE I ERROR RATES")
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% UTILS %%%%%%%%%%%%%%%%%%%%%%%%%-----
# clear working environment
rm(list = ls())
# # set directories in cluster
# source("/home/kongyir/spring2024/User_defined_functions.R")
# source("/home/kongyir/spring2024/utility.R")
# set directories in local computer
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/TYPE I ERROR/TYPE I ERROR RATES")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# set up cores for parallel processing
par_set <- function(cores_reserve = 2)
{
cores = parallel::detectCores()
cores_use <- cores - cores_reserve
if(Sys.info()["sysname"] == "Windows"){
# make a socket for both Windows & Unix-like
cl <- parallel::makeCluster(cores_use)
doParallel::registerDoParallel(cl)
}else{
# make a socket cluster for Unix-like
cl <- snow::makeSOCKcluster(cores_use)
doSNOW::registerDoSNOW(cl)
}
foreach::getDoParWorkers()
return(cl)
}
# Function to close the cluster
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PERFORM SIMULATIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%----
## Set up the simulation parameters
{
N <- 1e1;  alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform") #, "t", "Contaminated","Laplace","Exponential", "Chi-Square", "Gamma", "Weibull", "LogNormal",  "Pareto")
nvec <- c(8, 10, 15, 20, 25, 30, 50)
sig_level <- 0.05
}
# Progress taskbar setup
{
my_cl <- par_set(cores_reserve = 2)
ntasks <- length(nvec) * length(dist_sum)
pb <- txtProgressBar(max=ntasks, style=3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress=progress)
}
## Perform simulation
system.time({
sim_out <- foreach(n = nvec,
.packages = c("LaplacesDemon", "VGAM"), # Put Difficult Packages here
.options.snow=opts) %:%
foreach(dist = dist_sum) %dopar%
{
set.seed(12345) # Set seed for resproducibility
pval<- numeric(N) # collect p values
Bayes_errors = 0
for (i in 1:N) {
x <- generate_data(n, dist)
pval[i] <- t.test(x)$p.value
# Perform the Bayesian one-sample t-test
bf_result <- ttestBF(x = data, mu = 0)
# Extract the Bayes factor for the alternative hypothesis
bf <- exp(bf_result@bayesFactor$bf)
# Check if BF > 3 (strong evidence for the alternative hypothesis)
if (bf > 1) {
Bayes_errors <- Bayes_errors + 1  # Increment the Type I error counter
}
}
error    <- mean(pval < alpha)
# Calculate the Type I error rate
Bayes_error_rate <- Bayes_errors / N
results <- list(error = error,
Bayes_error_rate = Bayes_error_rate)
}
close_cluster(my_cl)
# Organize Results in tables
errorvec <- numeric(length(nvec) * length(dist_sum))
TypeI.errorRate <- Bayes_TypeI.error_rate <- array(errorvec, dim = c(length(nvec), length(dist_sum)), dimnames = list(nvec, dist_sum))
for (t in seq_along(nvec)) {
for (j in seq_along(dist_sum)) {
TypeI.errorRate[t, j] <- (sim_out[[t]][[j]]$error)
Bayes_TypeI.error_rate[t, j] <- (sim_out[[t]][[j]]$Bayes_error_rate)
}
}
})
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% UTILS %%%%%%%%%%%%%%%%%%%%%%%%%-----
# clear working environment
rm(list = ls())
# # set directories in cluster
# source("/home/kongyir/spring2024/User_defined_functions.R")
# source("/home/kongyir/spring2024/utility.R")
# set directories in local computer
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/TYPE I ERROR/TYPE I ERROR RATES")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# Load the required package
if (!require(BayesFactor)) {
install.packages("BayesFactor", dependencies = TRUE)
}
library(BayesFactor)
# set up cores for parallel processing
par_set <- function(cores_reserve = 2)
{
cores = parallel::detectCores()
cores_use <- cores - cores_reserve
if(Sys.info()["sysname"] == "Windows"){
# make a socket for both Windows & Unix-like
cl <- parallel::makeCluster(cores_use)
doParallel::registerDoParallel(cl)
}else{
# make a socket cluster for Unix-like
cl <- snow::makeSOCKcluster(cores_use)
doSNOW::registerDoSNOW(cl)
}
foreach::getDoParWorkers()
return(cl)
}
# Function to close the cluster
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PERFORM SIMULATIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%----
## Set up the simulation parameters
{
N <- 1e1;  alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform") #, "t", "Contaminated","Laplace","Exponential", "Chi-Square", "Gamma", "Weibull", "LogNormal",  "Pareto")
nvec <- c(8, 10, 15, 20, 25, 30, 50)
sig_level <- 0.05
}
# Progress taskbar setup
{
my_cl <- par_set(cores_reserve = 2)
ntasks <- length(nvec) * length(dist_sum)
pb <- txtProgressBar(max=ntasks, style=3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress=progress)
}
## Perform simulation
system.time({
sim_out <- foreach(n = nvec,
.packages = c("LaplacesDemon", "VGAM"), # Put Difficult Packages here
.options.snow=opts) %:%
foreach(dist = dist_sum) %dopar%
{
set.seed(12345) # Set seed for resproducibility
pval<- numeric(N) # collect p values
Bayes_errors = 0
for (i in 1:N) {
x <- generate_data(n, dist)
pval[i] <- t.test(x)$p.value
# Perform the Bayesian one-sample t-test
bf_result <- ttestBF(x = data, mu = 0)
# Extract the Bayes factor for the alternative hypothesis
bf <- exp(bf_result@bayesFactor$bf)
# Check if BF > 3 (strong evidence for the alternative hypothesis)
if (bf > 1) {
Bayes_errors <- Bayes_errors + 1  # Increment the Type I error counter
}
}
error    <- mean(pval < alpha)
# Calculate the Type I error rate
Bayes_error_rate <- Bayes_errors / N
results <- list(error = error,
Bayes_error_rate = Bayes_error_rate)
}
close_cluster(my_cl)
# Organize Results in tables
errorvec <- numeric(length(nvec) * length(dist_sum))
TypeI.errorRate <- Bayes_TypeI.error_rate <- array(errorvec, dim = c(length(nvec), length(dist_sum)), dimnames = list(nvec, dist_sum))
for (t in seq_along(nvec)) {
for (j in seq_along(dist_sum)) {
TypeI.errorRate[t, j] <- (sim_out[[t]][[j]]$error)
Bayes_TypeI.error_rate[t, j] <- (sim_out[[t]][[j]]$Bayes_error_rate)
}
}
})
ttestBF()
?ttestBF
library(ttestBF)
# Load the required package
if (!require(BayesFactor)) {
install.packages("BayesFactor", dependencies = TRUE)
}
library(BayesFactor)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% UTILS %%%%%%%%%%%%%%%%%%%%%%%%%-----
# clear working environment
rm(list = ls())
# # set directories in cluster
# source("/home/kongyir/spring2024/User_defined_functions.R")
# source("/home/kongyir/spring2024/utility.R")
# set directories in local computer
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/TYPE I ERROR/TYPE I ERROR RATES")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# Load the required package
if (!require(BayesFactor)) {
install.packages("BayesFactor", dependencies = TRUE)
}
library(BayesFactor)
# set up cores for parallel processing
par_set <- function(cores_reserve = 2)
{
cores = parallel::detectCores()
cores_use <- cores - cores_reserve
if(Sys.info()["sysname"] == "Windows"){
# make a socket for both Windows & Unix-like
cl <- parallel::makeCluster(cores_use)
doParallel::registerDoParallel(cl)
}else{
# make a socket cluster for Unix-like
cl <- snow::makeSOCKcluster(cores_use)
doSNOW::registerDoSNOW(cl)
}
foreach::getDoParWorkers()
return(cl)
}
# Function to close the cluster
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PERFORM SIMULATIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%----
## Set up the simulation parameters
{
N <- 1e1;  alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform") #, "t", "Contaminated","Laplace","Exponential", "Chi-Square", "Gamma", "Weibull", "LogNormal",  "Pareto")
nvec <- c(8, 10, 15, 20, 25, 30, 50)
sig_level <- 0.05
}
# Progress taskbar setup
{
my_cl <- par_set(cores_reserve = 2)
ntasks <- length(nvec) * length(dist_sum)
pb <- txtProgressBar(max=ntasks, style=3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress=progress)
}
## Perform simulation
system.time({
sim_out <- foreach(n = nvec,
.packages = c("LaplacesDemon", "VGAM"), # Put Difficult Packages here
.options.snow=opts) %:%
foreach(dist = dist_sum) %dopar%
{
set.seed(12345) # Set seed for resproducibility
pval<- numeric(N) # collect p values
Bayes_errors = 0
for (i in 1:N) {
x <- generate_data(n, dist)
pval[i] <- t.test(x)$p.value
# Perform the Bayesian one-sample t-test
bf_result <- ttestBF(x = data, mu = 0)
# Extract the Bayes factor for the alternative hypothesis
bf <- exp(bf_result@bayesFactor$bf)
# Check if BF > 3 (strong evidence for the alternative hypothesis)
if (bf > 1) {
Bayes_errors <- Bayes_errors + 1  # Increment the Type I error counter
}
}
error    <- mean(pval < alpha)
# Calculate the Type I error rate
Bayes_error_rate <- Bayes_errors / N
results <- list(error = error,
Bayes_error_rate = Bayes_error_rate)
}
close_cluster(my_cl)
# Organize Results in tables
errorvec <- numeric(length(nvec) * length(dist_sum))
TypeI.errorRate <- Bayes_TypeI.error_rate <- array(errorvec, dim = c(length(nvec), length(dist_sum)), dimnames = list(nvec, dist_sum))
for (t in seq_along(nvec)) {
for (j in seq_along(dist_sum)) {
TypeI.errorRate[t, j] <- (sim_out[[t]][[j]]$error)
Bayes_TypeI.error_rate[t, j] <- (sim_out[[t]][[j]]$Bayes_error_rate)
}
}
})
# Load the required package
if (!require(BayesFactor)) {
install.packages("BayesFactor", dependencies = TRUE)
}
library(BayesFactor)
# Set simulation parameters
set.seed(123)           # For reproducibility
n_sim <- 1e3           # Number of simulations
n <- 10                 # Sample size per simulation
mu <- 0.5                 # True mean under the null hypothesis
sd <- 1                 # Standard deviation
# Initialize a counter for Type I errors
type1_errors <- 0
# Run the simulations
for (i in 1:n_sim) {
# Generate data under the null hypothesis (mean = 0)
#data <- rnorm(n, mean = mu, sd = sd)
data <- rexp(n, rate = 1)
# Perform the Bayesian one-sample t-test
bf_result <- ttestBF(x = data, mu = 0)
# Extract the Bayes factor for the alternative hypothesis
bf <- exp(bf_result@bayesFactor$bf)
# Check if BF > 3 (strong evidence for the alternative hypothesis)
if (bf > 1) {
type1_errors <- type1_errors + 1  # Increment the Type I error counter
}
}
# Calculate the Type I error rate
type1_error_rate <- type1_errors / n_sim
# Display the result
cat("Estimated Type I Error Rate:", type1_error_rate, "\n")
install.packages(ttestBF)
library(BayesFactor)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% UTILS %%%%%%%%%%%%%%%%%%%%%%%%%-----
# clear working environment
rm(list = ls())
# # set directories in cluster
# source("/home/kongyir/spring2024/User_defined_functions.R")
# source("/home/kongyir/spring2024/utility.R")
# set directories in local computer
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/TYPE I ERROR/TYPE I ERROR RATES")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# Load the required package
if (!require(BayesFactor)) {
install.packages("BayesFactor", dependencies = TRUE)
}
library(BayesFactor)
# set up cores for parallel processing
par_set <- function(cores_reserve = 2)
{
cores = parallel::detectCores()
cores_use <- cores - cores_reserve
if(Sys.info()["sysname"] == "Windows"){
# make a socket for both Windows & Unix-like
cl <- parallel::makeCluster(cores_use)
doParallel::registerDoParallel(cl)
}else{
# make a socket cluster for Unix-like
cl <- snow::makeSOCKcluster(cores_use)
doSNOW::registerDoSNOW(cl)
}
foreach::getDoParWorkers()
return(cl)
}
# Function to close the cluster
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PERFORM SIMULATIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%----
## Set up the simulation parameters
{
N <- 1e1;  alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform") #, "t", "Contaminated","Laplace","Exponential", "Chi-Square", "Gamma", "Weibull", "LogNormal",  "Pareto")
nvec <- c(8, 10, 15, 20, 25, 30, 50)
sig_level <- 0.05
}
# Progress taskbar setup
{
my_cl <- par_set(cores_reserve = 2)
ntasks <- length(nvec) * length(dist_sum)
pb <- txtProgressBar(max=ntasks, style=3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress=progress)
}
## Perform simulation
system.time({
sim_out <- foreach(n = nvec,
.packages = c("LaplacesDemon", "VGAM", "BayesFactor"), # Put Difficult Packages here
.options.snow=opts) %:%
foreach(dist = dist_sum) %dopar%
{
set.seed(12345) # Set seed for resproducibility
pval<- numeric(N) # collect p values
Bayes_errors = 0
for (i in 1:N) {
x <- generate_data(n, dist)
pval[i] <- t.test(x)$p.value
# Perform the Bayesian one-sample t-test
bf_result <- ttestBF(x = data, mu = 0)
# Extract the Bayes factor for the alternative hypothesis
bf <- exp(bf_result@bayesFactor$bf)
# Check if BF > 3 (strong evidence for the alternative hypothesis)
if (bf > 1) {
Bayes_errors <- Bayes_errors + 1  # Increment the Type I error counter
}
}
error    <- mean(pval < alpha)
# Calculate the Type I error rate
Bayes_error_rate <- Bayes_errors / N
results <- list(error = error,
Bayes_error_rate = Bayes_error_rate)
}
close_cluster(my_cl)
# Organize Results in tables
errorvec <- numeric(length(nvec) * length(dist_sum))
TypeI.errorRate <- Bayes_TypeI.error_rate <- array(errorvec, dim = c(length(nvec), length(dist_sum)), dimnames = list(nvec, dist_sum))
for (t in seq_along(nvec)) {
for (j in seq_along(dist_sum)) {
TypeI.errorRate[t, j] <- (sim_out[[t]][[j]]$error)
Bayes_TypeI.error_rate[t, j] <- (sim_out[[t]][[j]]$Bayes_error_rate)
}
}
})
ttestBF(rexp(10, 1))
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% UTILS %%%%%%%%%%%%%%%%%%%%%%%%%-----
# clear working environment
rm(list = ls())
# # set directories in cluster
# source("/home/kongyir/spring2024/User_defined_functions.R")
# source("/home/kongyir/spring2024/utility.R")
# set directories in local computer
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation/TYPE I ERROR/TYPE I ERROR RATES")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/utility.R")
# Load the required package
if (!require(BayesFactor)) {
install.packages("BayesFactor", dependencies = TRUE)
}
library(BayesFactor)
# set up cores for parallel processing
par_set <- function(cores_reserve = 2)
{
cores = parallel::detectCores()
cores_use <- cores - cores_reserve
if(Sys.info()["sysname"] == "Windows"){
# make a socket for both Windows & Unix-like
cl <- parallel::makeCluster(cores_use)
doParallel::registerDoParallel(cl)
}else{
# make a socket cluster for Unix-like
cl <- snow::makeSOCKcluster(cores_use)
doSNOW::registerDoSNOW(cl)
}
foreach::getDoParWorkers()
return(cl)
}
# Function to close the cluster
close_cluster <- function(cl) {
parallel::stopCluster(cl)
}
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PERFORM SIMULATIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%----
## Set up the simulation parameters
{
N <- 1e1;  alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform") #, "t", "Contaminated","Laplace","Exponential", "Chi-Square", "Gamma", "Weibull", "LogNormal",  "Pareto")
nvec <- c(8, 10, 15, 20, 25, 30, 50)
sig_level <- 0.05
}
# Progress taskbar setup
{
my_cl <- par_set(cores_reserve = 2)
ntasks <- length(nvec) * length(dist_sum)
pb <- txtProgressBar(max=ntasks, style=3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress=progress)
}
## Perform simulation
system.time({
sim_out <- foreach(n = nvec,
.packages = c("LaplacesDemon", "VGAM", "BayesFactor"), # Put Difficult Packages here
.options.snow=opts) %:%
foreach(dist = dist_sum) %dopar%
{
set.seed(12345) # Set seed for resproducibility
pval<- numeric(N) # collect p values
Bayes_errors = 0
for (i in 1:N) {
x <- generate_data(n, dist)
pval[i] <- t.test(x)$p.value
# Perform the Bayesian one-sample t-test
bf_result <- ttestBF(x = data, mu = 0)
# Extract the Bayes factor for the alternative hypothesis
bf <- exp(bf_result@bayesFactor$bf)
# Check if BF > 3 (strong evidence for the alternative hypothesis)
if (bf > 1) {
Bayes_errors <- Bayes_errors + 1  # Increment the Type I error counter
}
}
error    <- mean(pval < alpha)
# Calculate the Type I error rate
Bayes_error_rate <- Bayes_errors / N
results <- list(error = error,
Bayes_error_rate = Bayes_error_rate)
}
close_cluster(my_cl)
# Organize Results in tables
errorvec <- numeric(length(nvec) * length(dist_sum))
TypeI.errorRate <- Bayes_TypeI.error_rate <- array(errorvec, dim = c(length(nvec), length(dist_sum)), dimnames = list(nvec, dist_sum))
for (t in seq_along(nvec)) {
for (j in seq_along(dist_sum)) {
TypeI.errorRate[t, j] <- (sim_out[[t]][[j]]$error)
Bayes_TypeI.error_rate[t, j] <- (sim_out[[t]][[j]]$Bayes_error_rate)
}
}
})
