pb <- txtProgressBar(max = ntasks, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
}
## Perform simulation
system.time({
sim_out <- foreach(n = nvec,
.packages = c("LaplacesDemon", "VGAM"),  # Put difficult packages here
.options.snow = opts) %:%
foreach(dist = dist_sum) %dopar% {
set.seed(12345)  # Set seed for reproducibility
pval <- pval.powr <- numeric(N)  # Collect p-values
cond_pval <- cond_pval.powr <- numeric(N)  # Collect conditional p-values
SamplePast <- 0  # Counter for number of samples passing SW test
TotalSim <- 0    # Counter for total number of samples generated
while (SamplePast < N) {
x <- generate_data(n, dist)  # Generate data
TotalSim <- TotalSim + 1
# Apply Shapiro-Wilk test
sw_test <- shapiro.test(x)$p.value
# Proceed only if the sample passes the SW test
if (sw_test > alpha) {
SamplePast <- SamplePast + 1
pval[SamplePast] <- t.test(x)$p.value  # T-test p-value
pval.powr[SamplePast] <- t.test(x + d)$p.value
cond_pval[SamplePast] <- pval[SamplePast] / sw_test  # Conditional p-value adjustment
cond_pval.powr[SamplePast] <- pval.powr[SamplePast]/sw_test
}
}
# Compute probabilities and error rates
prob_sw <- SamplePast / TotalSim  # Probability of passing SW test
error_uncond <- mean(pval < alpha)  # Unconditional Type I error rate
error_cond <- mean(cond_pval < alpha)  # Conditional Type I error rate
powr_cond <- mean(cond_pval.powr < alpha)  # Conditional Type I error rate
# Return results
results <- list(error_uncond = error_uncond,
error_cond = error_cond,
prob_sw = prob_sw,
powr_cond = powr_cond)
}
close_cluster(my_cl)
# Organize Results into tables
errorvec <- numeric(length(nvec) * length(dist_sum))
TypeI.errorRate <- TypeI.condErrorRate <- ProbFail_to_Reject0h <- power_cond.test <-
array(errorvec, dim = c(length(nvec), length(dist_sum)), dimnames = list(nvec, dist_sum))
for (t in seq_along(nvec)) {
for (j in seq_along(dist_sum)) {
TypeI.errorRate[t, j] <- sim_out[[t]][[j]]$error_uncond
TypeI.condErrorRate[t, j] <- sim_out[[t]][[j]]$error_cond
ProbFail_to_Reject0h[t, j] <- sim_out[[t]][[j]]$prob_sw
power_cond.test[t, j] <- sim_out[[t]][[j]]$powr_cond
}
}
})
# Print results
TypeI.errorRate  # Unconditional Type I error rates
TypeI.condErrorRate  # Conditional Type I error rates
ProbFail_to_Reject0h  # Probability of passing SW test
power_cond.test
# # Save results to Excel
# library(writexl)
# error_dataframe <- data.frame(TypeI.errorRate, TypeI.condErrorRate, ProbFail_to_Reject0h)
# write_xlsx(error_dataframe, path = "OneConditionalTypeI_error_rates.xlsx")
plot(density(rexp(100, rate = 1)))
plot(density(rexp(100, rate = 1)))
plot(density(rexp(10000, rate = 1)))
plot(density(rexp(10000000, rate = 1)))
plot(density(rchisq(10000, df = 3)))
plot(density(rchisq(1000000, df = 3)))
plot(density(rchisq(10000000, df = 3)))
plot(density(c(rchisq(1000000, df = 3),rchisq(10000000, df = 3)))
plot(density(c(rchisq(1000000, df = 3),rchisq(10000000, df = 3)))
plot(density(c(rchisq(1000000, df = 3),rchisq(10000000, df = 3))))
plot(density(c(rchisq(1000, df = 3),rchisq(1000, df = 3))))
plot(density(c(rchisq(1e3, df = 3),rchisq(1e3, df = 3))))
plot(density(c(rchisq(1e6, df = 3),rchisq(1e6, df = 3))))
t.test(rchisq(10, df = 3))$p.value
t.test(rchisq(10, df = 3) - 3)$p.value
t.test(rchisq(10, df = 3) - 3)$p.value
t.test(rchisq(10, df = 3) - 3)$p.value
t.test(rchisq(10, df = 3) - 3)$p.value
t.test(rchisq(10, df = 3) - 3)$p.value
t.test(rchisq(100, df = 3) - 3)$p.value
t.test(rchisq(100, df = 3) - 3)$p.value
t.test(rchisq(100, df = 3) - 3)$p.value
t.test(rchisq(100, df = 3) - 3)$p.value
t.test(rchisq(100, df = 3) - 3)$p.value
t.test(rchisq(100, df = 3) - 3)$p.value
t.test(rexp(100, rate = 2) - 2)$p.value
t.test(rexp(100, rate = 2) - 0.5)$p.value
t.test(rexp(100, rate = 2) - 0.5)$p.value
t.test(rexp(100, rate = 2) - 0.5)$p.value
t.test(rexp(100, rate = 2) - 0.5)$p.value
t.test(rexp(100, rate = 2) - 0.5)$p.value
t.test(rexp(100, rate = 2))$p.value
t.test(rexp(100, rate = 2))$p.value
t.test(rexp(100, rate = 2))$p.value
t.test(rexp(100, rate = 2))$p.value
t.test(rexp(100, rate = 2))$p.value
t.test(rexp(100, rate = 2))$p.value
for(i in 1 : 1000){}
pval = c()
for(i in 1 : 1000){
pval[i] = t.test(rexp(10, rate = 2) - 1)$p.value
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = t.test(rexp(10, rate = 2) - 1)$p.value
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = t.test(rexp(10, rate = 2) - 0.5)$p.value
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = t.test(rexp(10, rate = 2) - 0.5)$p.value
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = t.test(rexp(10, rate = 2) - 0.5)$p.value
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = t.test(rexp(10, rate = 2) - 0.5)$p.value
}
mean(pval < 0.05)
pval
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(rnorm(10)$p.value, 4)
}
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 10000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 10000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 10000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 10000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 10000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 10000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 10000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 10000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 10000){
pval[i] = round(t.test(rnorm(10))$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5, mu = 0)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5, mu = 0)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5, mu = 0)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5, mu = 0)$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5, mu = 0, alternative = "two.sided")$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5, mu = 0, alternative = "two.sided")$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5, mu = 0, alternative = "two.sided")$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5, mu = 0, alternative = "two.sided")$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5, mu = 0, alternative = "two.sided")$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5, mu = 0, alternative = "two.sided")$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5, mu = 0, alternative = "two.sided")$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5, mu = 0, alternative = "two.sided")$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5, mu = 0, alternative = "two.sided")$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1000){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5, mu = 0, alternative = "two.sided")$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1e4){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5, mu = 0, alternative = "two.sided")$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1e5){
pval[i] = round(wilcox.test(rexp(10, rate = 2) - 0.5, mu = 0, alternative = "two.sided")$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1e5){
pval[i] = round(wilcox.test(rnorm(10), mu = 0, alternative = "two.sided")$p.value, 4)
}
mean(pval < 0.05)
pval = c()
for(i in 1 : 1e4){
pval[i] = round(wilcox.test(rnorm(10), mu = 0, alternative = "two.sided")$p.value, 4)
}
mean(pval < 0.05)
