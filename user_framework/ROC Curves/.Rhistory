main = paste(main_title_prefix, dist), pch = 16
)
# Add reference line
if (tolower(y_label) == "power") {
abline(h = 0.8, col = "grey", lty = 2)
} else if (tolower(y_label) == "type i error") {
abline(h = 0.05, col = "grey", lty = 2)
}
# Overlay remaining methods
for (k in 2:3) {
lines(sample_sizes,
values[k, ],
type = "o",
col = test_colors[k],
lty = test_lty[k],
lwd = 3,
pch = 16)
}
# add legend
legend("bottomright",
legend = test_names,
title = "Test Method",
col = test_colors,
lty = test_lty,
lwd = 3,
pch = 16,
bty = "o")
}
}
# power comparison
plot_test_comparison(
plot_data = list(power_t_test,
power_perm_test,
power_Adaptive_test),
sample_sizes = sample_sizes,
distributions = distributions,
main_title_prefix = "Power Comparison for",
y_label = "Power",
file_name = "Power_Comparison.pdf"
)
# Type I error
plot_test_comparison(
plot_data = list(TypeIerror_t_test,
TypeIerror_perm_test,
TypeIerror_Adaptive_test),
sample_sizes = sample_sizes,
distributions = distributions,
main_title_prefix = "Type I error Comparison for",
y_label = "Type I Error",
file_name = "TypeIError_Comparison.pdf"
)
# --------------------------------------------
plot_difference_metrics <- function(plot_data,
sample_sizes,
distributions,
y_label = "Power Loss",
main_title_prefix = "Difference Plot for",
colors = c("blue", "red"),
test_lty = rep(1, 2),
legend_labels = c("Observed", "Expected"),
ref_line = 0,
legend_pos = "topright",
file_name = NULL,
ylim = NULL) {
# Determine y-axis range if not provided
if (is.null(ylim)) {
# Automatically range from both matrices
combined <- do.call(rbind, plot_data)
ylim <- range(combined, na.rm = TRUE)
}
# Save to PDF if filename is given
if (!is.null(file_name)) {
pdf(file_name, width = 10, height = 8)
on.exit(dev.off())
}
par(mfrow = c(2, 2), cex.axis = 1.3, cex.lab = 1.5, cex.main = 1.4)
for (j in seq_along(distributions)) {
dist <- distributions[j]
# Extract the two lines for this distribution
observed <- plot_data[[1]][, j]
expected <- plot_data[[2]][, j]
plot(sample_sizes,
observed,
type = "o",
col = colors[1],
lty = lty[1],
pch = 16,
lwd = 3,
ylim = ylim,
xlab = "Sample Size (n)",
ylab = y_label,
main = paste(main_title_prefix, dist))
lines(sample_sizes,
expected,
type = "o",
col = colors[2],
lty = lty[2],
pch = 16,
lwd = 3,)
abline(h = ref_line,
col = "grey",
lty = 2)
legend(legend_pos,
legend = legend_labels,
col = colors,
lty = lty,
pch = 16,
lwd = 3,
bty = "o")
}
}
# Power Loss & Expected Power Loss
plot_difference_metrics(
plot_data = list(powerloss, Expected_power_loss),
sample_sizes = sample_sizes,
distributions = distributions,
y_label = "Power Loss",
main_title_prefix = "Power Loss vs Expected Power Loss for",
legend_pos = "topright",
legend_labels = c("Power loss", "Expected Power loss"),
file_name = "PowerLoss_vs_Expected.pdf"
)
# Inflation of Type I error vs Expected Inflation of Type I error
plot_difference_metrics(
plot_data = list(Inflation_TypeI_error, Expected_Inflation_TypeI_error),
sample_sizes = sample_sizes,
distributions = distributions,
y_label = "Inflation of Type I Error",
main_title_prefix = "Inflation vs Expected Inflation for",
legend_pos = "bottomright",
legend_labels = c("Inflation", "Expected Inflation"),
file_name = "TypeIErrorInflation_vs_Expected.pdf"
)
# ---------- function to create plots -----------------
plot_test_comparison <- function(plot_data,
sample_sizes,
distributions,
y_label = "Power",
main_title_prefix = "Power Comparison for",
ylim = NULL,
file_name = NULL) {
test_colors <- c("blue", "red", "green")
test_lty <- rep(1, 3)
test_names <- c("t-test", "perm-test", "adaptive-test")
# dynamically set y limits
if (is.null(ylim)) {
if (tolower(y_label) == "power") {
ylim <- c(0, 1)
} else if (tolower(y_label) == "type i error") {
ylim <- c(0, 0.1)
} else {
ylim <- c(0, 1)
}
}
# Save to PDF if file_name is provided
if (!is.null(file_name)) {
pdf(file_name, width = 10, height = 8)
on.exit(dev.off())
}
par(mfrow = c(2, 2), cex.axis = 1.3, cex.lab = 1.5, cex.main = 1.4)
# A plot for each distribution
for (j in seq_along(distributions)) {
dist <- distributions[j]
# Extract values for current distribution
values <- rbind(
plot_data[[1]][, j],
plot_data[[2]][, j],
plot_data[[3]][, j]
)
# Plot the first method
plot(
sample_sizes,
values[1, ],
type = "o",
col = test_colors[1],
lty = test_lty[1],
lwd = 3,
ylim = ylim,
xlab = "Sample Size (n)",
ylab = y_label,
main = paste(main_title_prefix, dist), pch = 16
)
# Add reference line
if (tolower(y_label) == "power") {
abline(h = 0.8, col = "grey", lty = 2)
} else if (tolower(y_label) == "type i error") {
abline(h = 0.05, col = "grey", lty = 2)
}
# Overlay remaining methods
for (k in 2:3) {
lines(sample_sizes,
values[k, ],
type = "o",
col = test_colors[k],
lty = test_lty[k],
lwd = 3,
pch = 16)
}
# add legend
legend("bottomright",
legend = test_names,
title = "Test Method",
col = test_colors,
lty = test_lty,
lwd = 3,
pch = 16,
bty = "o")
}
}
# power comparison
plot_test_comparison(
plot_data = list(power_t_test,
power_perm_test,
power_Adaptive_test),
sample_sizes = sample_sizes,
distributions = distributions,
main_title_prefix = "Power Comparison for",
y_label = "Power",
file_name = "Power_Comparison.pdf"
)
# Type I error
plot_test_comparison(
plot_data = list(TypeIerror_t_test,
TypeIerror_perm_test,
TypeIerror_Adaptive_test),
sample_sizes = sample_sizes,
distributions = distributions,
main_title_prefix = "Type I error Comparison for",
y_label = "Type I Error",
file_name = "TypeIError_Comparison.pdf"
)
# --------------------------------------------
plot_difference_metrics <- function(plot_data,
sample_sizes,
distributions,
y_label = "Power Loss",
main_title_prefix = "Difference Plot for",
colors = c("blue", "red"),
lty = rep(1, 2),
legend_labels = c("Observed", "Expected"),
ref_line = 0,
legend_pos = "topright",
file_name = NULL,
ylim = NULL) {
# Determine y-axis range if not provided
if (is.null(ylim)) {
# Automatically range from both matrices
combined <- do.call(rbind, plot_data)
ylim <- range(combined, na.rm = TRUE)
}
# Save to PDF if filename is given
if (!is.null(file_name)) {
pdf(file_name, width = 10, height = 8)
on.exit(dev.off())
}
par(mfrow = c(2, 2), cex.axis = 1.3, cex.lab = 1.5, cex.main = 1.4)
for (j in seq_along(distributions)) {
dist <- distributions[j]
# Extract the two lines for this distribution
observed <- plot_data[[1]][, j]
expected <- plot_data[[2]][, j]
plot(sample_sizes,
observed,
type = "o",
col = colors[1],
lty = lty[1],
pch = 16,
lwd = 3,
ylim = ylim,
xlab = "Sample Size (n)",
ylab = y_label,
main = paste(main_title_prefix, dist))
lines(sample_sizes,
expected,
type = "o",
col = colors[2],
lty = lty[2],
pch = 16,
lwd = 3,)
abline(h = ref_line,
col = "grey",
lty = 2)
legend(legend_pos,
legend = legend_labels,
col = colors,
lty = lty,
pch = 16,
lwd = 3,
bty = "o")
}
}
# Power Loss & Expected Power Loss
plot_difference_metrics(
plot_data = list(powerloss, Expected_power_loss),
sample_sizes = sample_sizes,
distributions = distributions,
y_label = "Power Loss",
main_title_prefix = "Power Loss vs Expected Power Loss for",
legend_pos = "topright",
legend_labels = c("Power loss", "Expected Power loss"),
file_name = "PowerLoss_vs_Expected.pdf"
)
# Inflation of Type I error vs Expected Inflation of Type I error
plot_difference_metrics(
plot_data = list(Inflation_TypeI_error, Expected_Inflation_TypeI_error),
sample_sizes = sample_sizes,
distributions = distributions,
y_label = "Inflation of Type I Error",
main_title_prefix = "Inflation vs Expected Inflation for",
legend_pos = "bottomright",
legend_labels = c("Inflation", "Expected Inflation"),
file_name = "TypeIErrorInflation_vs_Expected.pdf"
)
?pch
# ---------- function to create plots -----------------
plot_test_comparison <- function(plot_data,
sample_sizes,
distributions,
y_label = "Power",
main_title_prefix = "Power Comparison for",
ylim = NULL,
file_name = NULL) {
test_colors <- c("blue", "red", "green")
test_lty <- rep(1, 3)
pch_char <- c(5, 16, 17)
test_names <- c("t-test", "perm-test", "adaptive-test")
# dynamically set y limits
if (is.null(ylim)) {
if (tolower(y_label) == "power") {
ylim <- c(0, 1)
} else if (tolower(y_label) == "type i error") {
ylim <- c(0, 0.1)
} else {
ylim <- c(0, 1)
}
}
# Save to PDF if file_name is provided
if (!is.null(file_name)) {
pdf(file_name, width = 10, height = 8)
on.exit(dev.off())
}
par(mfrow = c(2, 2), cex.axis = 1.3, cex.lab = 1.5, cex.main = 1.4)
# A plot for each distribution
for (j in seq_along(distributions)) {
dist <- distributions[j]
# Extract values for current distribution
values <- rbind(
plot_data[[1]][, j],
plot_data[[2]][, j],
plot_data[[3]][, j]
)
# Plot the first method
plot(
sample_sizes,
values[1, ],
type = "o",
col = test_colors[1],
lty = test_lty[1],
lwd = 3,
ylim = ylim,
xlab = "Sample Size (n)",
ylab = y_label,
main = paste(main_title_prefix, dist),
pch = pch_char[1]
)
# Add reference line
if (tolower(y_label) == "power") {
abline(h = 0.8, col = "grey", lty = 2)
} else if (tolower(y_label) == "type i error") {
abline(h = 0.05, col = "grey", lty = 2)
}
# Overlay remaining methods
for (k in 2:3) {
lines(sample_sizes,
values[k, ],
type = "o",
col = test_colors[k],
lty = test_lty[k],
lwd = 3,
pch = pch_char[k])
}
# add legend
legend("bottomright",
legend = test_names,
title = "Test Method",
col = test_colors,
lty = test_lty,
lwd = 3,
pch = pch_char,
bty = "o")
}
}
# power comparison
plot_test_comparison(
plot_data = list(power_t_test,
power_perm_test,
power_Adaptive_test),
sample_sizes = sample_sizes,
distributions = distributions,
main_title_prefix = "Power Comparison for",
y_label = "Power",
file_name = "Power_Comparison.pdf"
)
# Type I error
plot_test_comparison(
plot_data = list(TypeIerror_t_test,
TypeIerror_perm_test,
TypeIerror_Adaptive_test),
sample_sizes = sample_sizes,
distributions = distributions,
main_title_prefix = "Type I error Comparison for",
y_label = "Type I Error",
file_name = "TypeIError_Comparison.pdf"
)
# --------------------------------------------
plot_difference_metrics <- function(plot_data,
sample_sizes,
distributions,
y_label = "Power Loss",
main_title_prefix = "Difference Plot for",
colors = c("blue", "red"),
lty = rep(1, 2),
legend_labels = c("Observed", "Expected"),
ref_line = 0,
legend_pos = "topright",
file_name = NULL,
ylim = NULL) {
lty <- c(1, 2)
pch_char <- c(2, 17)
colors <- c("blue", "red")
# Determine y-axis range if not provided
if (is.null(ylim)) {
# Automatically range from both matrices
combined <- do.call(rbind, plot_data)
ylim <- range(combined, na.rm = TRUE)
}
# Save to PDF if filename is given
if (!is.null(file_name)) {
pdf(file_name, width = 10, height = 8)
on.exit(dev.off())
}
par(mfrow = c(2, 2), cex.axis = 1.3, cex.lab = 1.5, cex.main = 1.4)
for (j in seq_along(distributions)) {
dist <- distributions[j]
# Extract the two lines for this distribution
observed <- plot_data[[1]][, j]
expected <- plot_data[[2]][, j]
plot(sample_sizes,
observed,
type = "o",
col = colors[1],
lty = lty[1],
pch = pch_char[1],
lwd = 3,
ylim = ylim,
xlab = "Sample Size (n)",
ylab = y_label,
main = paste(main_title_prefix, dist))
lines(sample_sizes,
expected,
type = "o",
col = colors[2],
lty = lty[2],
pch = pch_char[2],
lwd = 3,)
abline(h = ref_line,
col = "grey",
lty = 2)
legend(legend_pos,
legend = legend_labels,
col = colors,
lty = lty,
pch = pch_char,
lwd = 3,
bty = "o")
}
}
# Power Loss & Expected Power Loss
plot_difference_metrics(
plot_data = list(powerloss, Expected_power_loss),
sample_sizes = sample_sizes,
distributions = distributions,
y_label = "Power Loss",
main_title_prefix = "Power Loss vs Expected Power Loss for",
legend_pos = "topright",
legend_labels = c("Power loss", "Expected Power loss"),
file_name = "PowerLoss_vs_Expected.pdf"
)
# Inflation of Type I error vs Expected Inflation of Type I error
plot_difference_metrics(
plot_data = list(Inflation_TypeI_error, Expected_Inflation_TypeI_error),
sample_sizes = sample_sizes,
distributions = distributions,
y_label = "Inflation of Type I Error",
main_title_prefix = "Inflation vs Expected Inflation for",
legend_pos = "bottomright",
legend_labels = c("Inflation", "Expected Inflation"),
file_name = "TypeIErrorInflation_vs_Expected.pdf"
)
runApp('~/Desktop/OSU/Research/Pretest-Simulation/user_framework/ShinyApp/User_framework_ShinyApp_v2.R')
runApp('~/Desktop/OSU/Research/Pretest-Simulation/user_framework/ShinyApp/User_framework_ShinyApp_v2.R')
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/user_framework/ShinyApp")
runApp('User_framework_ShinyApp_v2.R')
library(shiny)
# Load helper source files
source("~/Desktop/OSU/Research/Pretest-Simulation/functions/User_defined_functions.R")
source("~/Desktop/OSU/Research/Pretest-Simulation/user_framework/ROC Curves/ROC_curves_for_ds_test_v1.R")
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/user_framework/ROC Curves")
runApp('~/Desktop/OSU/Research/Pretest-Simulation/user_framework/ShinyApp/User_framework_ShinyApp_v2.R')
runApp('~/Desktop/OSU/Research/Pretest-Simulation/user_framework/ShinyApp/User_framework_ShinyApp_v2.R')
runApp('~/Desktop/OSU/Research/Pretest-Simulation/user_framework/ShinyApp/User_framework_ShinyApp_v2.R')
runApp('~/Desktop/OSU/Research/Pretest-Simulation/user_framework/ShinyApp/User_framework_ShinyApp_v2.R')
