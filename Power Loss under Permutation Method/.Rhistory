## Return the p value
# p = the fraction of fake data that is:
#      larger than |sample mean of x|, or
#    smaller than -|sample mean of x|
pval <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
return(pval)
}
OneSample_Perm(x = rexp(10, 3), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
z <- array(, nsim)
## Run the simulation
for (i in 1:nsim) {                           # Do nsim times:
mn <- sample(c(-1, 1), n, replace = TRUE)   #  1. take n random draws from {-1, 1}, where n is the length of the data to be tested
xbardash <- mean(mn * abs(x))               #  2. assign the signs to the data and put them in a temporary variable
z[i] <- xbardash                            #  3. save the new data in an array
}
## Return the p value
# p = the fraction of fake data that is:
#      larger than |sample mean of x|, or
#    smaller than -|sample mean of x|
pval <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
return(pval)
}
OneSample_Perm(x = rexp(10, 3), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
z <- array(, nsim)
## Run the simulation
for (i in 1:nsim) {                           # Do nsim times:
mn <- sample(c(-1, 1), n, replace = TRUE)   #  1. take n random draws from {-1, 1}, where n is the length of the data to be tested
xbardash <- mean(mn * abs(x))               #  2. assign the signs to the data and put them in a temporary variable
z[i] <- xbardash                            #  3. save the new data in an array
}
## Return the p value
# p = the fraction of fake data that is:
#      larger than |sample mean of x|, or
#    smaller than -|sample mean of x|
pval <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
return(pval)
}
OneSample_Perm(x = rexp(10, 3), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
z <- array(, nsim)
## Run the simulation
for (i in 1:nsim) {                           # Do nsim times:
mn <- sample(c(-1, 1), n, replace = TRUE)   #  1. take n random draws from {-1, 1}, where n is the length of the data to be tested
xbardash <- mean(mn * abs(x))               #  2. assign the signs to the data and put them in a temporary variable
z[i] <- xbardash                            #  3. save the new data in an array
}
## Return the p value
# p = the fraction of fake data that is:
#      larger than |sample mean of x|, or
#    smaller than -|sample mean of x|
pval <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
return(pval)
}
OneSample_Perm(x = rexp(10, 3), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
z <- array(, nsim)
## Run the simulation
for (i in 1:nsim) {                           # Do nsim times:
mn <- sample(c(-1, 1), n, replace = TRUE)   #  1. take n random draws from {-1, 1}, where n is the length of the data to be tested
xbardash <- mean(mn * abs(x))               #  2. assign the signs to the data and put them in a temporary variable
z[i] <- xbardash                            #  3. save the new data in an array
}
## Return the p value
# p = the fraction of fake data that is:
#      larger than |sample mean of x|, or
#    smaller than -|sample mean of x|
pval <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
return(pval)
}
OneSample_Perm(x = rexp(10, 3), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
z <- array(, nsim)
## Run the simulation
for (i in 1:nsim) {                           # Do nsim times:
mn <- sample(c(-1, 1), n, replace = TRUE)   #  1. take n random draws from {-1, 1}, where n is the length of the data to be tested
xbardash <- mean(mn * abs(x))               #  2. assign the signs to the data and put them in a temporary variable
z[i] <- xbardash                            #  3. save the new data in an array
}
## Return the p value
# p = the fraction of fake data that is:
#      larger than |sample mean of x|, or
#    smaller than -|sample mean of x|
pval <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
return(pval)
}
OneSample_Perm(x = rexp(10, 3), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
z <- array(, nsim)
## Run the simulation
for (i in 1:nsim) {                           # Do nsim times:
mn <- sample(c(-1, 1), n, replace = TRUE)   #  1. take n random draws from {-1, 1}, where n is the length of the data to be tested
xbardash <- mean(mn * abs(x))               #  2. assign the signs to the data and put them in a temporary variable
z[i] <- xbardash                            #  3. save the new data in an array
}
## Return the p value
# p = the fraction of fake data that is:
#      larger than |sample mean of x|, or
#    smaller than -|sample mean of x|
pval <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
return(pval)
}
OneSample_Perm(x = rexp(10, 3), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
z <- array(, nsim)
## Run the simulation
for (i in 1:nsim) {                           # Do nsim times:
mn <- sample(c(-1, 1), n, replace = TRUE)   #  1. take n random draws from {-1, 1}, where n is the length of the data to be tested
xbardash <- mean(mn * abs(x))               #  2. assign the signs to the data and put them in a temporary variable
z[i] <- xbardash                            #  3. save the new data in an array
}
## Return the p value
# p = the fraction of fake data that is:
#      larger than |sample mean of x|, or
#    smaller than -|sample mean of x|
pval <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
return(pval)
}
OneSample_Perm(x = rexp(10, 3), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
z <- array(, nsim)
## Run the simulation
for (i in 1:nsim) {                           # Do nsim times:
mn <- sample(c(-1, 1), n, replace = TRUE)   #  1. take n random draws from {-1, 1}, where n is the length of the data to be tested
xbardash <- mean(mn * abs(x))               #  2. assign the signs to the data and put them in a temporary variable
z[i] <- xbardash                            #  3. save the new data in an array
}
## Return the p value
# p = the fraction of fake data that is:
#      larger than |sample mean of x|, or
#    smaller than -|sample mean of x|
pval <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
return(pval)
}
OneSample_Perm(x = rexp(10, 3), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
z <- array(, nsim)
## Run the simulation
for (i in 1:nsim) {                           # Do nsim times:
mn <- sample(c(-1, 1), n, replace = TRUE)   #  1. take n random draws from {-1, 1}, where n is the length of the data to be tested
xbardash <- mean(mn * abs(x))               #  2. assign the signs to the data and put them in a temporary variable
z[i] <- xbardash                            #  3. save the new data in an array
}
## Return the p value
# p = the fraction of fake data that is:
#      larger than |sample mean of x|, or
#    smaller than -|sample mean of x|
pval <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
return(pval)
}
OneSample_Perm(x = rexp(10, 3), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
z <- array(, nsim)
## Run the simulation
for (i in 1:nsim) {                           # Do nsim times:
mn <- sample(c(-1, 1), n, replace = TRUE)   #  1. take n random draws from {-1, 1}, where n is the length of the data to be tested
xbardash <- mean(mn * abs(x))               #  2. assign the signs to the data and put them in a temporary variable
z[i] <- xbardash                            #  3. save the new data in an array
}
## Return the p value
# p = the fraction of fake data that is:
#      larger than |sample mean of x|, or
#    smaller than -|sample mean of x|
pval <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
return(pval)
}
OneSample_Perm(x = rexp(10, 3), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
z <- array(, nsim)
## Run the simulation
for (i in 1:nsim) {                           # Do nsim times:
mn <- sample(c(-1, 1), n, replace = TRUE)   #  1. take n random draws from {-1, 1}, where n is the length of the data to be tested
xbardash <- mean(mn * abs(x))               #  2. assign the signs to the data and put them in a temporary variable
z[i] <- xbardash                            #  3. save the new data in an array
}
## Return the p value
# p = the fraction of fake data that is:
#      larger than |sample mean of x|, or
#    smaller than -|sample mean of x|
pval <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
return(pval)
}
OneSample_Perm(x = rexp(10, 3), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
z <- array(, nsim)
## Run the simulation
for (i in 1:nsim) {                           # Do nsim times:
mn <- sample(c(-1, 1), n, replace = TRUE)   #  1. take n random draws from {-1, 1}, where n is the length of the data to be tested
xbardash <- mean(mn * abs(x))               #  2. assign the signs to the data and put them in a temporary variable
z[i] <- xbardash                            #  3. save the new data in an array
}
## Return the p value
# p = the fraction of fake data that is:
#      larger than |sample mean of x|, or
#    smaller than -|sample mean of x|
pval <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
return(pval)
}
OneSample_Perm(x = rexp(10, 3), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
z <- array(, nsim)
## Run the simulation
for (i in 1:nsim) {                           # Do nsim times:
mn <- sample(c(-1, 1), n, replace = TRUE)   #  1. take n random draws from {-1, 1}, where n is the length of the data to be tested
xbardash <- mean(mn * abs(x))               #  2. assign the signs to the data and put them in a temporary variable
z[i] <- xbardash                            #  3. save the new data in an array
}
## Return the p value
# p = the fraction of fake data that is:
#      larger than |sample mean of x|, or
#    smaller than -|sample mean of x|
pval <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
return(pval)
}
OneSample_Perm(x = rexp(10, 3), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
z <- array(, nsim)
## Run the simulation
for (i in 1:nsim) {                           # Do nsim times:
mn <- sample(c(-1, 1), n, replace = TRUE)   #  1. take n random draws from {-1, 1}, where n is the length of the data to be tested
xbardash <- mean(mn * abs(x))               #  2. assign the signs to the data and put them in a temporary variable
z[i] <- xbardash                            #  3. save the new data in an array
}
## Return the p value
# p = the fraction of fake data that is:
#      larger than |sample mean of x|, or
#    smaller than -|sample mean of x|
pval <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
return(pval)
}
OneSample_Perm(x = rexp(10, 3), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
z <- array(, nsim)
## Run the simulation
for (i in 1:nsim) {                           # Do nsim times:
mn <- sample(c(-1, 1), n, replace = TRUE)   #  1. take n random draws from {-1, 1}, where n is the length of the data to be tested
xbardash <- mean(mn * abs(x))               #  2. assign the signs to the data and put them in a temporary variable
z[i] <- xbardash                            #  3. save the new data in an array
}
## Return the p value
# p = the fraction of fake data that is:
#      larger than |sample mean of x|, or
#    smaller than -|sample mean of x|
pval <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
return(pval)
}
OneSample_Perm(x = rexp(10, 3), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
z <- array(, nsim)
## Run the simulation
for (i in 1:nsim) {                           # Do nsim times:
mn <- sample(c(-1, 1), n, replace = TRUE)   #  1. take n random draws from {-1, 1}, where n is the length of the data to be tested
xbardash <- mean(mn * abs(x))               #  2. assign the signs to the data and put them in a temporary variable
z[i] <- xbardash                            #  3. save the new data in an array
}
## Return the p value
# p = the fraction of fake data that is:
#      larger than |sample mean of x|, or
#    smaller than -|sample mean of x|
pval <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
return(pval)
}
OneSample_Perm(x = rexp(10, 3), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
N <- 100
z <- array(, nsim)
## Run the simulation
pval <- numeric(N)
for(j in 1 : N){
for (i in 1:nsim) {
mn <- sample(c(-1, 1), n, replace = TRUE)
xbardash <- mean(mn * abs(x))
z[i] <- xbardash
}
pval[j] <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
return(pval)
}
power_test <- mean(pval < alpha)
}
power_test
pval
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
N <- 100
z <- array(, nsim)
## Run the simulation
power_test <- numeric(N)
for(j in 1 : N){
pval <- numeric(nsim)
for (i in 1:nsim) {
mn <- sample(c(-1, 1), n, replace = TRUE)
xbardash <- mean(mn * abs(x))
z[i] <- xbardash
}
pval[j] <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
return(pval)
}
power_test <- mean(pval < alpha)
}
pval
OneSample_Perm(x = rexp(10, 3), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
N <- 100
z <- array(, nsim)
## Run the simulation
power_test <- numeric(N)
for(j in 1 : N){
pval <- numeric(nsim)
for (i in 1:nsim) {
mn <- sample(c(-1, 1), n, replace = TRUE)
xbardash <- mean(mn * abs(x))
z[i] <- xbardash
}
pval[j] <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
}
power_test <- mean(pval < alpha)
return(power_test)
}
OneSample_Perm(x = rexp(10, 3), 1e3)
OneSample_Perm
OneSample_Perm(x = rexp(10, 3), 1e3)
power_test
power_test
power_test <- numeric(N)
power_test
mn
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
N <- 100
z <- array(, nsim)
## Run the simulation
power_test <- numeric(N)
for(j in 1 : N){
pval <- numeric(nsim)
for (i in 1:nsim) {
mn <- sample(c(-1, 1), n, replace = TRUE)
xbardash <- mean(mn * abs(x))
z[i] <- xbardash
}
pval[j] <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
}
power_test <- mean(pval < alpha)
return(power_test)
}
OneSample_Perm(x = rexp(10, 5), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
N <- 100
z <- array(, nsim)
## Run the simulation
power_test <- numeric(N)
for(j in 1 : N){
pval <- numeric(nsim)
for (i in 1:nsim) {
mn <- sample(c(-1, 1), n, replace = TRUE)
xbardash <- mean(mn * abs(x))
z[i] <- xbardash
}
pval[j] <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
}
power_test <- mean(pval < alpha)
return(power_test)
}
OneSample_Perm(x = rexp(10, 5), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
N <- 100
z <- array(, nsim)
## Run the simulation
power_test <- numeric(N)
for(j in 1 : N){
pval <- numeric(nsim)
for (i in 1:nsim) {
mn <- sample(c(-1, 1), n, replace = TRUE)
xbardash <- mean(mn * abs(x))
z[i] <- xbardash
}
pval[j] <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
}
power_test <- mean(pval < alpha)
return(power_test)
}
OneSample_Perm(x = rexp(10, 5), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
N <- 100
z <- array(, nsim)
## Run the simulation
power_test <- numeric(N)
for(j in 1 : N){
pval <- numeric(nsim)
for (i in 1:nsim) {
mn <- sample(c(-1, 1), n, replace = TRUE)
xbardash <- mean(mn * abs(x))
z[i] <- xbardash
}
pval[j] <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
}
power_test <- mean(pval < alpha)
return(power_test)
}
OneSample_Perm(x = rexp(10, 5), 1e3)
OneSample_Perm <- function (x, nsim) {
## Initialize and pre-allocate
n <- length(x)
dbar <- mean(x)
absx <- abs(x)
N <- 100
z <- array(, nsim)
## Run the simulation
power_test <- numeric(N)
for(j in 1 : N){
pval <- numeric(nsim)
for (i in 1:nsim) {
mn <- sample(c(-1, 1), n, replace = TRUE)
xbardash <- mean(mn * abs(x))
z[i] <- xbardash
}
pval[j] <- (sum(z >= abs(dbar)) + sum(z <= -abs(dbar)))/nsim
}
power_test <- mean(pval < alpha)
return(power_test)
}
OneSample_Perm(x = rexp(10, 5), 1e3)
