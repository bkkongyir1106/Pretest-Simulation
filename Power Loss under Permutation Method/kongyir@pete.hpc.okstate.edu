alpha <- 0.05; N= 1e4; P = 1e5;  d = 0.5
n.vec = c(10, 20, 30, 40, 50)
set.seed(2024)

# t test approach
n.pwer.t.test <- e.pwer.t.test <- t.pwer.t.test <- logn.pwer.t.test <-gamma.pwer.t.test <- numeric(length(n.vec))
for(k in 1 : length(n.vec)){
  n = n.vec[k]
  powr_ttest_n <-powr_ttest_e <- powr_ttest_t <- powr_ttest_logn <- powr_ttest_gamma <- numeric(N)
  for(j in 1 : N){
    # normal distn
    n1 <- rnorm(n, mean = 0, sd = 1)
    n2 <- rnorm(n, mean = 0, sd = 1) + d
    if(t.test(n1, n2, var.equal = T)$p.value < alpha){
      powr_ttest_n[j] <- 1
    }
    # exp distn
    e1 <- rexp(n, rate = 1)
    e2 <- rexp(n, rate = 1) + d
    if(t.test(e1, e2, var.equal = T)$p.value < alpha){
      powr_ttest_e[j] <- 1
    }
    # t distn
    t1 <-rt(n, df = 3) 
    t2 <-rt(n, df = 3) + d
    if(t.test((t1)/sqrt(3), (t2)/sqrt(3), var.equal = T)$p.value <= alpha){
      powr_ttest_t[j] <- 1
    }
    # lognormal distn
    l1 <- rlnorm(n, meanlog = 0, sdlog = 1)
    l2 <- rlnorm(n, meanlog = 0, sdlog = 1) 
    z1 <- (l1- exp(0+1/2))/sqrt(sqrt((exp(1)-1)*exp(2*0 + 1)))
    z2 <- (l2- exp(0+1/2))/sqrt(sqrt((exp(1)-1)*exp(2*0 + 1))) + d
    if(t.test(z1, z2, var.equal = T)$p.value <= alpha){
      powr_ttest_logn[j] <- 1
    }
    # gamma distn
    g1 <- rgamma(n, shape = 3, rate = 0.1) 
    g2 <- rgamma(n, shape = 3, rate = 0.1) + d
    if(t.test((g1-30)/sqrt(300), (g2-30)/sqrt(300) ,var.equal = T)$p.value <= alpha){
      powr_ttest_gamma[j] <- 1
    }
    
  }
  n.pwer.t.test[k] <-round(mean(powr_ttest_n),3)
  e.pwer.t.test[k] <-round(mean(powr_ttest_e),3)
  t.pwer.t.test[k] <-round(mean(powr_ttest_t),3)
  logn.pwer.t.test[k] <-round(mean(powr_ttest_logn),3)
  gamma.pwer.t.test[k] <-round(mean(powr_ttest_gamma),3)
}
  # Permutation test approach
  power_perm_test_exp <- power_perm_test_t <- power_perm_test_logn <- power_perm_test_gamma <- numeric(length(n.vec))
  for(k in 1 : length(n.vec)){
    n <- n.vec[k]
    print(n)
    # exp distn
    e1 <- rexp(n, rate = 1)
    e2 <- rexp(n, rate = 1) + d
    permuted_data_exp <- c(e1,e2)
    
    # t distn
    t1 <-rt(n, df = 3) 
    t2 <-rt(n, df = 3) + d
    permuted_data_t <- c(t1,t2)
    
    # lognormal
    l1 <- rlnorm(n, meanlog = 0, sdlog = 1)
    l2 <- rlnorm(n, meanlog = 0, sdlog = 1) 
    z1 <- (l1- exp(0+1/2))/sqrt(sqrt((exp(1)-1)*exp(2*0 + 1)))
    z2 <- (l2- exp(0+1/2))/sqrt(sqrt((exp(1)-1)*exp(2*0 + 1))) + d
    permuted_data_logn <- c(z1,z2)
    # gamma disn
    g1 <- rgamma(n, shape = 3, rate = 0.1) 
    g2 <- rgamma(n, shape = 3, rate = 0.1) + d
    permuted_data_gamma <- c(g1, g2)
    
    # Function to calculate the test statistic (difference of means)
    calculate_test_statistic <- function(x, y) {
      return((mean(x) - mean(y))/sqrt(var(x)/length(x) + var(y)/length(y)))
    }
    
    pwer_exp <- pwer_t <- pwer_logn <- pwer_gamma<- rep(0, N)
    perm.test_p_value_exp <- perm.test_p_value_t <- perm.test_p_value_logn <- perm.test_p_value_gamma <- rep(0, N)
    for(j in 1 : N){
      permuted_statistics_exp <- permuted_statistics_t <- permuted_statistics_logn <- permuted_statistics_gamma <- rep(0, P)
      for(i in 1 : P){
        permuted_data_exp <- sample(permuted_data_exp)
        permuted_data_t <- sample(permuted_data_t)
        permuted_data_logn <- sample(permuted_data_logn)
        permuted_data_gamma <- sample(permuted_data_gamma)
        # Calculate the test statistic for the permuted data
        # exp
        permuted_exp1 <- permuted_data_exp[1:length(e1)]
        permuted_exp2 <- permuted_data_exp[(length(e1) + 1):(length(e1) + length(e2))]
        permuted_statistics_exp[i] <- calculate_test_statistic(permuted_exp1, permuted_exp2)
        
        # t distn
        permuted_t1 <- permuted_data_t[1:length(t1)]
        permuted_t2 <- permuted_data_t[(length(t1) + 1):(length(t1) + length(t2))]
        permuted_statistics_t[i] <- calculate_test_statistic(permuted_t1, permuted_t2)
        
        # logn distn
        permuted_logn1 <- permuted_data_logn[1:length(z1)]
        permuted_logn2 <- permuted_data_logn[(length(z1) + 1):(length(z1) + length(z2))]
        permuted_statistics_logn[i] <- calculate_test_statistic(permuted_logn1, permuted_logn2)
        
        # gamma distn
        permuted_gamma1 <- permuted_data_gamma[1:length(g1)]
        permuted_gamma2 <- permuted_data_gamma[(length(g1) + 1):(length(g1) + length(g2))]
        permuted_statistics_gamma[i] <- calculate_test_statistic(permuted_gamma1, permuted_gamma2)
      }
      # Observed test statistic
      observed_statistic_exp <- calculate_test_statistic(e1, e2)
      # Observed test statistic
      observed_statistic_t <- calculate_test_statistic(t1, t2)
      # Observed test statistic
      observed_statistic_logn <- calculate_test_statistic(z1, z2)
      # Observed test statistic
      observed_statistic_gamma <- calculate_test_statistic(g1, g2)
      
      
      # Calculate the pvalue of test
      #exp distn
      perm.test_p_value_exp[j] <- round(mean(abs(permuted_statistics_exp) >= abs(observed_statistic_exp)), 5)
      if(perm.test_p_value_exp[j] < alpha){
        pwer_exp[j] <- 1
      }
      power_perm_test_exp[k] <- round(mean(pwer_exp), 5)
      
      # t distn
      perm.test_p_value_t[j] <- round(mean(abs(permuted_statistics_t) >= abs(observed_statistic_t)), 5) 
      if(perm.test_p_value_t[j] < alpha){
        pwer_t[j] <- 1
      }
      power_perm_test_t[k] <- round(mean(pwer_t), 5)
      
      # logn distn
      perm.test_p_value_logn[j] <- round(mean(abs(permuted_statistics_logn) >= abs(observed_statistic_logn)), 5)
      if(perm.test_p_value_logn[j] < alpha){
        pwer_logn[j] <- 1
      }
      power_perm_test_logn[k] <- round(mean(pwer_logn), 5)
      
      # gamma distn
      perm.test_p_value_gamma[j] <- round(mean(abs(permuted_statistics_gamma) >= abs(observed_statistic_gamma)), 5) 
      if(perm.test_p_value_gamma[j] < alpha){
        pwer_gamma[j] <- 1
      }
      power_perm_test_gamma[k] <- round(mean(pwer_gamma), 5)
    }
    
  }
  # Power loss under permutation test
  power_loss_exp <- power_perm_test_exp - e.pwer.t.test
  power_loss_t <- power_perm_test_t - t.pwer.t.test
  power_loss_logn <- power_perm_test_logn - logn.pwer.t.test
  power_loss_gamma <- power_perm_test_gamma - gamma.pwer.t.test
  
  # power under t test
  power_t<-c(n.pwer.t.test, e.pwer.t.test, t.pwer.t.test,  logn.pwer.t.test, gamma.pwer.t.test)
  power_table_t<-array(power_t, dim = c(5, 5), dimnames = list(n.vec,c("norm_t", "exp_t", "t distn_t", "lognormal_t", "gamma_t")))
  power_table_t
  
  # power under permutation test
  power_perm<-c(power_perm_test_exp, power_perm_test_t, power_perm_test_logn,  power_perm_test_gamma)
  power_table_perm<-array(power_perm, dim = c(5, 4), dimnames = list(n.vec,c("exp_perm", "t_perm",  "lognormal_perm", "gamma_perm")))
  power_table_perm
  
  # power loss
  powerloss_data<-c(power_loss_exp,power_loss_t, power_loss_logn,power_loss_gamma)
  powerloss_table<-array(powerloss_data, dim = c(5, 4), dimnames = list(n.vec,c("exponential", "t distn", "lognormal", "gamma")))
  powerloss_table
  
  