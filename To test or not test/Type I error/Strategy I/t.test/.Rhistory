power_permutation <- mean(pval_perm < alpha)
Results <- list(
power_t_test= power_t_test,
power_permutation = power_permutation,
prob_Rejecth0_Norm = prob_Rejecth0_Norm
)
}
})
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% UTILS %%%%%%%%%%%%%%%%%%%%%%%%%----
rm(list = ls())
# source("/home/kongyir/spring2024/User_defined_functions.R")
# source("/home/kongyir/spring2024/utility.R")
source("~/Desktop/OSU/Research/Permutation Test/New Simulations/cluster/parallel_sim/User_defined_functions.R")
source("~/Desktop/OSU/Research/Permutation Test/New Simulations/cluster/parallel_sim/utility.R")
par_set <- function(cores_reserve = 2)
{
cores = parallel::detectCores()
cores_use <- cores - cores_reserve
if(Sys.info()["sysname"] == "Windows"){
cl <- parallel::makeCluster(cores_use) # make a socket cluster
doParallel::registerDoParallel(cl)     # for both Windows & Unix-like
# OR
#cl <- snow::makeSOCKcluster(cores_use) # make a socket cluster
#doSNOW::registerDoSNOW(cl)           # for  Windows only
}else{
#cl <- parallel::makeCluster(cores_use) # make a socket cluster
#doParallel::registerDoParallel(cl)     # for Windows & Unix-like
cl <- snow::makeSOCKcluster(cores_use) # make a socket cluster
doSNOW::registerDoSNOW(cl)           # for
#OR
#doMC::registerDoMC(cores = cores_use)   # make a fork cluster
}
foreach::getDoParWorkers()
return(cl)
}
close_cluster <- function(cl) {
parallel::stopCluster(cl) # close the cluster
}
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PERFORM SIMULATIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%----
# Function to calculate the test statistic (difference of means)
calculate_test_statistic <- function(x) {
return((mean(x)*sqrt(length(x))) / sqrt(var(x)))
}
## Set up
{
N <- 1e3; P <- 1e4; alpha <- 0.05
dist_sum <- c("Standard Normal",  "Uniform", "t", "Laplace", "Contaminated")
nvec <- c(8, 10, 15, 20 ,30, 40, 50)
d.vec <- c(0.5)
#set.seed(33)
}
# Parallelized simulation setup
{
my_cl <- par_set(cores_reserve = 2)
ntasks <- length(nvec) *  length(d.vec) * length(dist_sum)
pb <- txtProgressBar(max=ntasks, style=3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress=progress)
}
## Perform simulation
system.time({
sim_out <- foreach(dist = dist_sum,
.packages = c("LaplacesDemon"),
.options.snow=opts) %:%
foreach(n = nvec) %:%
foreach(d = d.vec) %dopar%
{
nsim = 0 ; Rejecth0 = 0;  pval <- pval_perm <- numeric(N)
while(Rejecth0 < N){
x = generate_data(n, dist)
nsim = nsim + 1
if(shapiro.test(x)$p.value > alpha){
Rejecth0 = Rejecth0 + 1
pval[Rejecth0] = t.test(x +  d)$p.value
data = x + d
observed_statistic <- calculate_test_statistic(data)
# permutation test
permuted_statistics <- rep(0, P)
for (l in 1:P) {
myIndex <- sample(c(-1, 1), length(x), replace = TRUE)
sample_data <- myIndex * abs(x)
permuted_statistics[l] <- calculate_test_statistic(sample_data)
}
pval_perm[Rejecth0] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
prob_Rejecth0_Norm <- Rejecth0/nsim
}
power_t_test      <- mean(pval < alpha)
power_permutation <- mean(pval_perm < alpha)
Results <- list(
power_t_test= power_t_test,
power_permutation = power_permutation,
prob_Rejecth0_Norm = prob_Rejecth0_Norm
)
}
})
close_cluster(my_cl)
## Output
powervec <- numeric(length(nvec) * length(dist_sum) * length(d.vec))
power_t_test_par <- power_permutation_par <- prob_Rejecth0_Norm_test <- array(powervec,dim = c(length(nvec), length(dist_sum),
length(d.vec)), dimnames = list(nvec, dist_sum, d.vec))
for (t in seq_along(nvec)) {
for (j in seq_along(dist_sum)) {
for (i in seq_along(d.vec)) {
power_t_test_par[t, j, i] <- (sim_out[[j]][[t]][[i]]$power_t_test)
power_permutation_par[t, j, i] <- (sim_out[[j]][[t]][[i]]$power_permutation)
prob_Rejecth0_Norm_test[t, j, i] <- (sim_out[[j]][[t]][[i]]$prob_Rejecth0_Norm)
}
}
}
power_loss_par <- power_permutation_par - power_t_test_par
print(power_t_test_par)
print(power_permutation_par)
print(power_loss_par)
print(prob_Rejecth0_Norm_test)
save.image(paste0("OneSample_powerloss_RejectH0",".RData"))
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% UTILS %%%%%%%%%%%%%%%%%%%%%%%%%----
rm(list = ls())
# source("/home/kongyir/spring2024/User_defined_functions.R")
# source("/home/kongyir/spring2024/utility.R")
source("~/Desktop/OSU/Research/Permutation Test/New Simulations/cluster/parallel_sim/User_defined_functions.R")
source("~/Desktop/OSU/Research/Permutation Test/New Simulations/cluster/parallel_sim/utility.R")
par_set <- function(cores_reserve = 2)
{
cores = parallel::detectCores()
cores_use <- cores - cores_reserve
if(Sys.info()["sysname"] == "Windows"){
cl <- parallel::makeCluster(cores_use) # make a socket cluster
doParallel::registerDoParallel(cl)     # for both Windows & Unix-like
# OR
#cl <- snow::makeSOCKcluster(cores_use) # make a socket cluster
#doSNOW::registerDoSNOW(cl)           # for  Windows only
}else{
#cl <- parallel::makeCluster(cores_use) # make a socket cluster
#doParallel::registerDoParallel(cl)     # for Windows & Unix-like
cl <- snow::makeSOCKcluster(cores_use) # make a socket cluster
doSNOW::registerDoSNOW(cl)           # for
#OR
#doMC::registerDoMC(cores = cores_use)   # make a fork cluster
}
foreach::getDoParWorkers()
return(cl)
}
close_cluster <- function(cl) {
parallel::stopCluster(cl) # close the cluster
}
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PERFORM SIMULATIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%----
# Function to calculate the test statistic (difference of means)
calculate_test_statistic <- function(x) {
return((mean(x)*sqrt(length(x))) / sqrt(var(x)))
}
## Set up
{
N <- 1e2; P <- 1e4; alpha <- 0.05
dist_sum <- c("Standard Normal",  "Uniform", "t", "Laplace", "Contaminated")
nvec <- c(8, 10, 15, 20 ,30, 40, 50)
d.vec <- c(0.5)
#set.seed(33)
}
# Parallelized simulation setup
{
my_cl <- par_set(cores_reserve = 2)
ntasks <- length(nvec) *  length(d.vec) * length(dist_sum)
pb <- txtProgressBar(max=ntasks, style=3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress=progress)
}
## Perform simulation
system.time({
sim_out <- foreach(dist = dist_sum,
.packages = c("LaplacesDemon"),
.options.snow=opts) %:%
foreach(n = nvec) %:%
foreach(d = d.vec) %dopar%
{
nsim = 0 ; Rejecth0 = 0;  pval <- pval_perm <- numeric(N)
while(Rejecth0 < N){
x = generate_data(n, dist)
nsim = nsim + 1
if(shapiro.test(x)$p.value > alpha){
Rejecth0 = Rejecth0 + 1
pval[Rejecth0] = t.test(x +  d)$p.value
data = x + d
observed_statistic <- calculate_test_statistic(data)
# permutation test
permuted_statistics <- rep(0, P)
for (l in 1:P) {
myIndex <- sample(c(-1, 1), length(x), replace = TRUE)
sample_data <- myIndex * abs(x)
permuted_statistics[l] <- calculate_test_statistic(sample_data)
}
pval_perm[Rejecth0] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
prob_Rejecth0_Norm <- Rejecth0/nsim
}
power_t_test      <- mean(pval < alpha)
power_permutation <- mean(pval_perm < alpha)
Results <- list(
power_t_test= power_t_test,
power_permutation = power_permutation,
prob_Rejecth0_Norm = prob_Rejecth0_Norm
)
}
})
close_cluster(my_cl)
## Output
powervec <- numeric(length(nvec) * length(dist_sum) * length(d.vec))
power_t_test_par <- power_permutation_par <- prob_Rejecth0_Norm_test <- array(powervec,dim = c(length(nvec), length(dist_sum),
length(d.vec)), dimnames = list(nvec, dist_sum, d.vec))
for (t in seq_along(nvec)) {
for (j in seq_along(dist_sum)) {
for (i in seq_along(d.vec)) {
power_t_test_par[t, j, i] <- (sim_out[[j]][[t]][[i]]$power_t_test)
power_permutation_par[t, j, i] <- (sim_out[[j]][[t]][[i]]$power_permutation)
prob_Rejecth0_Norm_test[t, j, i] <- (sim_out[[j]][[t]][[i]]$prob_Rejecth0_Norm)
}
}
}
power_loss_par <- power_permutation_par - power_t_test_par
print(power_t_test_par)
print(power_permutation_par)
print(power_loss_par)
print(prob_Rejecth0_Norm_test)
#save.image(paste0("OneSample_powerloss_DoNotRectSW",".RData"))
load("/Users/benedictkongyir/Downloads/Re_ Re_  (2)/Expected_TypeI_error_SW_failed_toReject(xORy).RData")
rm(list = ls())
#load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Parallel processing/parallel_sim/Powerloss/TwoSamples/TwoSamples_powerloss__SW_failed_to_Reject(x&y).RData")
load("/Users/benedictkongyir/Downloads/Re_ Re_  (2)/Expected_TypeI_error_SW_failed_toReject(xORy).RData")
probFail_SW.test
Inflation_error
load("/Users/benedictkongyir/Downloads/Re_ Re_  (7)/Expected_TypeI_error_SW_failed_toReject(xORy).RData")
Inflation_error
N
P
prob_SW<- data.frame(probFail_SW.test)
data_powerloss <-data.frame(power_loss_par)
#data_error <-data.frame(TypeI_error_inflation_par)
Expected_powerloss <- prob_SW * data_powerloss
par(mar = c(4.5, 4.1, 4.1, 8.0), xpd = TRUE)
plot(nvec, Expected_powerloss$Standard.Normal, type="l", lwd= 2, col = "red", xlim = c(5, 50),
ylim = c(-0.01, 0.03),xlab = "Sample Size", ylab = "Expected Inflation of Type I error Rate")
lines(nvec, Expected_powerloss$Uniform, lwd= 2, col = "blue")
lines(nvec, Expected_powerloss$t,lwd= 2, col = "pink")
lines(nvec, Expected_powerloss$Laplace,lwd= 2, col = "green")
lines(nvec, Expected_powerloss$Contaminated, col = "coral4")
lines(nvec, Expected_powerloss$Exponential.0.05, lwd= 2, col = "darkviolet")
lines(nvec, Expected_powerloss$Chi.Square.0.05,lwd= 2, col = "grey")
lines(nvec, Expected_powerloss$Gamma.0.05,lwd= 2, col = "cyan")
lines(nvec, Expected_powerloss$Weibull.0.05, col = "gold")
lines(nvec, Expected_powerloss$LogNormal.0.05, col = "salmon2")
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Expected Inflation of Type I error Rates")
legend("topright", inset = c(-0.25, 0), legend=c("Std Normal", "Uniform", "t", "Laplace", "Contaminated", "Exponential", "Chi-square", "Gamma", "Weibull", "LogNormal"),
col=c( "red","blue", "pink", "green", "coral4", "darkviolet", "grey", "cyan", "gold", "salmon2"), lty =1,cex = 0.8, title = "Distribution")
par(mar = c(4.5, 4.1, 4.1, 8.0), xpd = TRUE)
plot(nvec, Expected_powerloss$Standard.Normal, type="l", lwd= 2, col = "red", xlim = c(5, 50),
ylim = c(-0.01, 0.05),xlab = "Sample Size", ylab = "Expected Inflation of Type I error Rate")
lines(nvec, Expected_powerloss$Uniform, lwd= 2, col = "blue")
lines(nvec, Expected_powerloss$t,lwd= 2, col = "pink")
lines(nvec, Expected_powerloss$Laplace,lwd= 2, col = "green")
lines(nvec, Expected_powerloss$Contaminated, col = "coral4")
lines(nvec, Expected_powerloss$Exponential.0.05, lwd= 2, col = "darkviolet")
lines(nvec, Expected_powerloss$Chi.Square.0.05,lwd= 2, col = "grey")
lines(nvec, Expected_powerloss$Gamma.0.05,lwd= 2, col = "cyan")
lines(nvec, Expected_powerloss$Weibull.0.05, col = "gold")
lines(nvec, Expected_powerloss$LogNormal.0.05, col = "salmon2")
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Expected Inflation of Type I error Rates")
legend("topright", inset = c(-0.25, 0), legend=c("Std Normal", "Uniform", "t", "Laplace", "Contaminated", "Exponential", "Chi-square", "Gamma", "Weibull", "LogNormal"),
col=c( "red","blue", "pink", "green", "coral4", "darkviolet", "grey", "cyan", "gold", "salmon2"), lty =1,cex = 0.8, title = "Distribution")
par(mar = c(4.5, 4.1, 4.1, 8.0), xpd = TRUE)
plot(nvec, Expected_powerloss$Standard.Normal, type="l", lwd= 2, col = "red", xlim = c(5, 50),
ylim = c(-0.01, 0.1),xlab = "Sample Size", ylab = "Expected Inflation of Type I error Rate")
lines(nvec, Expected_powerloss$Uniform, lwd= 2, col = "blue")
lines(nvec, Expected_powerloss$t,lwd= 2, col = "pink")
lines(nvec, Expected_powerloss$Laplace,lwd= 2, col = "green")
lines(nvec, Expected_powerloss$Contaminated, col = "coral4")
lines(nvec, Expected_powerloss$Exponential.0.05, lwd= 2, col = "darkviolet")
lines(nvec, Expected_powerloss$Chi.Square.0.05,lwd= 2, col = "grey")
lines(nvec, Expected_powerloss$Gamma.0.05,lwd= 2, col = "cyan")
lines(nvec, Expected_powerloss$Weibull.0.05, col = "gold")
lines(nvec, Expected_powerloss$LogNormal.0.05, col = "salmon2")
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Expected Inflation of Type I error Rates")
legend("topright", inset = c(-0.25, 0), legend=c("Std Normal", "Uniform", "t", "Laplace", "Contaminated", "Exponential", "Chi-square", "Gamma", "Weibull", "LogNormal"),
col=c( "red","blue", "pink", "green", "coral4", "darkviolet", "grey", "cyan", "gold", "salmon2"), lty =1,cex = 0.8, title = "Distribution")
power_loss_par
N
P
N
P
power_loss_par
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Parallel processing/parallel_sim/Powerloss/TwoSamples/TwoSamples_powerloss__SW_failed_to_Reject(x&y).RData")
power_loss_par
load("/Users/benedictkongyir/Downloads/Re_ Re_ /TwoSamples_powerloss__SW_failed_to_Reject(xORy).RData")
power_loss_par
power_loss_par
prob_SW<- data.frame(probFail_SW.test)
data_powerloss <-data.frame(power_loss_par)
#data_error <-data.frame(TypeI_error_inflation_par)
Expected_powerloss <- prob_SW * data_powerloss
par(mar = c(4.5, 4.1, 4.1, 8.0), xpd = TRUE)
plot(nvec, Expected_powerloss$Standard.Normal, type="l", lwd= 2, col = "red", xlim = c(5, 50),
ylim = c(-0.01, 0.1),xlab = "Sample Size", ylab = "Expected Inflation of Type I error Rate")
lines(nvec, Expected_powerloss$Uniform, lwd= 2, col = "blue")
lines(nvec, Expected_powerloss$t,lwd= 2, col = "pink")
lines(nvec, Expected_powerloss$Laplace,lwd= 2, col = "green")
lines(nvec, Expected_powerloss$Contaminated, col = "coral4")
lines(nvec, Expected_powerloss$Exponential.0.05, lwd= 2, col = "darkviolet")
lines(nvec, Expected_powerloss$Chi.Square.0.05,lwd= 2, col = "grey")
lines(nvec, Expected_powerloss$Gamma.0.05,lwd= 2, col = "cyan")
lines(nvec, Expected_powerloss$Weibull.0.05, col = "gold")
lines(nvec, Expected_powerloss$LogNormal.0.05, col = "salmon2")
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Expected Inflation of Type I error Rates")
legend("topright", inset = c(-0.25, 0), legend=c("Std Normal", "Uniform", "t", "Laplace", "Contaminated", "Exponential", "Chi-square", "Gamma", "Weibull", "LogNormal"),
col=c( "red","blue", "pink", "green", "coral4", "darkviolet", "grey", "cyan", "gold", "salmon2"), lty =1,cex = 0.8, title = "Distribution")
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Parallel processing/parallel_sim/Powerloss/TwoSamples/TwoSamples_powerloss__SW_failed_to_Reject(x&y).RData")
power_loss_par
rm(list = ls())
#load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Parallel processing/parallel_sim/Powerloss/TwoSamples/TwoSamples_powerloss__SW_failed_to_Reject(x&y).RData")
load("/Users/benedictkongyir/Downloads/Re_ Re_  (2)/Expected_TypeI_error_SW_failed_toReject(xORy).RData")
prob_SW<- data.frame(probFail_SW.test)
data_powerloss <-data.frame(power_loss_par)
#data_error <-data.frame(TypeI_error_inflation_par)
Expected_powerloss <- prob_SW * data_powerloss
par(mar = c(4.5, 4.1, 4.1, 8.0), xpd = TRUE)
plot(nvec, Expected_powerloss$Standard.Normal, type="l", lwd= 2, col = "red", xlim = c(5, 50),
ylim = c(-0.01, 0.1),xlab = "Sample Size", ylab = "Expected Inflation of Type I error Rate")
lines(nvec, Expected_powerloss$Uniform, lwd= 2, col = "blue")
lines(nvec, Expected_powerloss$t,lwd= 2, col = "pink")
lines(nvec, Expected_powerloss$Laplace,lwd= 2, col = "green")
lines(nvec, Expected_powerloss$Contaminated, col = "coral4")
lines(nvec, Expected_powerloss$Exponential.0.05, lwd= 2, col = "darkviolet")
lines(nvec, Expected_powerloss$Chi.Square.0.05,lwd= 2, col = "grey")
lines(nvec, Expected_powerloss$Gamma.0.05,lwd= 2, col = "cyan")
lines(nvec, Expected_powerloss$Weibull.0.05, col = "gold")
lines(nvec, Expected_powerloss$LogNormal.0.05, col = "salmon2")
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Expected Inflation of Type I error Rates")
legend("topright", inset = c(-0.25, 0), legend=c("Std Normal", "Uniform", "t", "Laplace", "Contaminated", "Exponential", "Chi-square", "Gamma", "Weibull", "LogNormal"),
col=c( "red","blue", "pink", "green", "coral4", "darkviolet", "grey", "cyan", "gold", "salmon2"), lty =1,cex = 0.8, title = "Distribution")
par(mar = c(4.5, 4.1, 4.1, 8.0), xpd = TRUE)
plot(nvec, Expected_powerloss$Standard.Normal, type="l", lwd= 2, col = "red", xlim = c(5, 50),
ylim = c(-0.01, 0.1),xlab = "Sample Size", ylab = "Expected Inflation of Type I error Rate")
lines(nvec, Expected_powerloss$Uniform, lwd= 2, col = "blue")
lines(nvec, Expected_powerloss$t,lwd= 2, col = "pink")
lines(nvec, Expected_powerloss$Laplace,lwd= 2, col = "green")
lines(nvec, Expected_powerloss$Contaminated, col = "coral4")
lines(nvec, Expected_powerloss$Exponential.0.05, lwd= 2, col = "darkviolet")
lines(nvec, Expected_powerloss$Chi.Square.0.05,lwd= 2, col = "grey")
lines(nvec, Expected_powerloss$Gamma.0.05,lwd= 2, col = "cyan")
lines(nvec, Expected_powerloss$Weibull.0.05, col = "gold")
lines(nvec, Expected_powerloss$LogNormal.0.05, col = "salmon2")
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Expected Inflation of Type I error Rates")
legend("topright", inset = c(-0.25, 0), legend=c("Std Normal", "Uniform", "t", "Laplace", "Contaminated", "Exponential", "Chi-square", "Gamma", "Weibull", "LogNormal"),
col=c( "red","blue", "pink", "green", "coral4", "darkviolet", "grey", "cyan", "gold", "salmon2"), lty =1,cex = 0.8, title = "Distribution")
load("/Users/benedictkongyir/Downloads/Re_ Re_  (7)/Expected_TypeI_error_SW_failed_toReject(xORy).RData")
load("/Users/benedictkongyir/Downloads/Re_ Re_  (7)/Expected_TypeI_error_DoNotRejectSW.RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Test codes/Expected_TypeI_error_DoNotRejectSW.RData")
rm(list = ls())
#load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Parallel processing/parallel_sim/Powerloss/TwoSamples/TwoSamples_powerloss__SW_failed_to_Reject(x&y).RData")
load("/Users/benedictkongyir/Desktop/OSU/Research/Test codes/Expected_TypeI_error_DoNotRejectSW.RData")
prob_SW<- data.frame(probFail_SW.test)
data_powerloss <-data.frame(Inflation_error)
#data_error <-data.frame(TypeI_error_inflation_par)
Expected_powerloss <- prob_SW * data_powerloss
par(mar = c(4.5, 4.1, 4.1, 8.0), xpd = TRUE)
plot(nvec, Expected_powerloss$Standard.Normal, type="l", lwd= 2, col = "red", xlim = c(5, 50),
ylim = c(-0.01, 0.1),xlab = "Sample Size", ylab = "Expected Inflation of Type I error Rate")
lines(nvec, Expected_powerloss$Uniform, lwd= 2, col = "blue")
lines(nvec, Expected_powerloss$t,lwd= 2, col = "pink")
lines(nvec, Expected_powerloss$Laplace,lwd= 2, col = "green")
lines(nvec, Expected_powerloss$Contaminated, col = "coral4")
lines(nvec, Expected_powerloss$Exponential.0.05, lwd= 2, col = "darkviolet")
lines(nvec, Expected_powerloss$Chi.Square.0.05,lwd= 2, col = "grey")
lines(nvec, Expected_powerloss$Gamma.0.05,lwd= 2, col = "cyan")
lines(nvec, Expected_powerloss$Weibull.0.05, col = "gold")
lines(nvec, Expected_powerloss$LogNormal.0.05, col = "salmon2")
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Expected Inflation of Type I error Rates")
legend("topright", inset = c(-0.25, 0), legend=c("Std Normal", "Uniform", "t", "Laplace", "Contaminated", "Exponential", "Chi-square", "Gamma", "Weibull", "LogNormal"),
col=c( "red","blue", "pink", "green", "coral4", "darkviolet", "grey", "cyan", "gold", "salmon2"), lty =1,cex = 0.8, title = "Distribution")
par(mar = c(4.5, 4.1, 4.1, 8.0), xpd = TRUE)
plot(nvec, Expected_powerloss$Standard.Normal, type="l", lwd= 2, col = "red", xlim = c(5, 50),
ylim = c(-0.01, 0.01),xlab = "Sample Size", ylab = "Expected Inflation of Type I error Rate")
lines(nvec, Expected_powerloss$Uniform, lwd= 2, col = "blue")
lines(nvec, Expected_powerloss$t,lwd= 2, col = "pink")
lines(nvec, Expected_powerloss$Laplace,lwd= 2, col = "green")
lines(nvec, Expected_powerloss$Contaminated, col = "coral4")
lines(nvec, Expected_powerloss$Exponential.0.05, lwd= 2, col = "darkviolet")
lines(nvec, Expected_powerloss$Chi.Square.0.05,lwd= 2, col = "grey")
lines(nvec, Expected_powerloss$Gamma.0.05,lwd= 2, col = "cyan")
lines(nvec, Expected_powerloss$Weibull.0.05, col = "gold")
lines(nvec, Expected_powerloss$LogNormal.0.05, col = "salmon2")
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Expected Inflation of Type I error Rates")
legend("topright", inset = c(-0.25, 0), legend=c("Std Normal", "Uniform", "t", "Laplace", "Contaminated", "Exponential", "Chi-square", "Gamma", "Weibull", "LogNormal"),
col=c( "red","blue", "pink", "green", "coral4", "darkviolet", "grey", "cyan", "gold", "salmon2"), lty =1,cex = 0.8, title = "Distribution")
par(mar = c(4.5, 4.1, 4.1, 8.0), xpd = TRUE)
plot(nvec, Expected_powerloss$Standard.Normal, type="l", lwd= 2, col = "red", xlim = c(5, 50),
ylim = c(-0.01, 0.05),xlab = "Sample Size", ylab = "Expected Inflation of Type I error Rate")
lines(nvec, Expected_powerloss$Uniform, lwd= 2, col = "blue")
lines(nvec, Expected_powerloss$t,lwd= 2, col = "pink")
lines(nvec, Expected_powerloss$Laplace,lwd= 2, col = "green")
lines(nvec, Expected_powerloss$Contaminated, col = "coral4")
lines(nvec, Expected_powerloss$Exponential.0.05, lwd= 2, col = "darkviolet")
lines(nvec, Expected_powerloss$Chi.Square.0.05,lwd= 2, col = "grey")
lines(nvec, Expected_powerloss$Gamma.0.05,lwd= 2, col = "cyan")
lines(nvec, Expected_powerloss$Weibull.0.05, col = "gold")
lines(nvec, Expected_powerloss$LogNormal.0.05, col = "salmon2")
abline(h = 0, lwd = 2, col = "black", xpd = F)
title(main = "Expected Inflation of Type I error Rates")
legend("topright", inset = c(-0.25, 0), legend=c("Std Normal", "Uniform", "t", "Laplace", "Contaminated", "Exponential", "Chi-square", "Gamma", "Weibull", "LogNormal"),
col=c( "red","blue", "pink", "green", "coral4", "darkviolet", "grey", "cyan", "gold", "salmon2"), lty =1,cex = 0.8, title = "Distribution")
setwd("D:/OSU/Research_Fall2023")
set.seed(1)
alpha<-0.05
N<-10000
shapiro_alpha <- c(0.1,0.05,0.01, 0.005,0.000)
sample_size<-c(10,20,30,40,50)
pval<- numeric(length(shapiro_alpha)*length(sample_size))
error<-array(pval, dim = c(length(sample_size), length(shapiro_alpha)),
dimnames = list(sample_size,shapiro_alpha))
for( i in 1 : length(sample_size)){
n <-sample_size[i]
print(n)
for( j in 1 : length(shapiro_alpha)){
pre_alpha <- shapiro_alpha[j]
t_reject_h0 <-0
sample_passed <- 0
while(sample_passed < N){
x1 <- rexp(n, rate = 1)
x2 <- rexp(n, rate = 1)
if(shapiro.test(x1)$p.value > pre_alpha & shapiro.test(x2)$p.value > pre_alpha){
sample_passed <- sample_passed + 1
if(t.test(x1,x2)$p.value < alpha){
t_reject_h0 <- t_reject_h0 + 1
}
}
}
error[i,j]<- round(t_reject_h0/N, 3)
}
}
error
setwd("~/Desktop/OSU/Research/Pretest-Simulation/Simulation on paper/Type I error/Strategy I/t.test/error_exp.R")
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation on paper/Type I error/Strategy I/t.test")
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Simulation on paper/Type I error/Strategy I/t.test")
set.seed(1)
alpha<-0.05
N<-100
shapiro_alpha <- c(0.1,0.05,0.01, 0.005,0.000)
sample_size<-c(10,20,30,40,50)
pval<- numeric(length(shapiro_alpha)*length(sample_size))
error<-array(pval, dim = c(length(sample_size), length(shapiro_alpha)),
dimnames = list(sample_size,shapiro_alpha))
for( i in 1 : length(sample_size)){
n <-sample_size[i]
print(n)
for( j in 1 : length(shapiro_alpha)){
pre_alpha <- shapiro_alpha[j]
t_reject_h0 <-0
sample_passed <- 0
while(sample_passed < N){
x1 <- rexp(n, rate = 1)
x2 <- rexp(n, rate = 1)
if(shapiro.test(x1)$p.value > pre_alpha & shapiro.test(x2)$p.value > pre_alpha){
sample_passed <- sample_passed + 1
if(t.test(x1,x2)$p.value < alpha){
t_reject_h0 <- t_reject_h0 + 1
}
}
}
error[i,j]<- round(t_reject_h0/N, 3)
}
}
error
load("/Users/benedictkongyir/Desktop/OSU/Research/Test codes/OneSample_powerloss_par_New.RData")
power_loss_par
load("/Users/benedictkongyir/Desktop/OSU/Research/Test codes/OneSample_powerloss_RejectH0.RData")
power_loss_par
load("/Users/benedictkongyir/Desktop/OSU/Research/Test codes/OneSample_powerloss_RejectH02.RData")
power_loss_par
load("/Users/benedictkongyir/Desktop/OSU/Research/Test codes/OneSample_powerloss_par.RData")
power_loss_par
load("/Users/benedictkongyir/Desktop/OSU/Research/Test codes/OneSample_TypeI_error_inflation_par.RData")
Inflation_error
rm(list = ls())
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Parallel processing/parallel_sim/Type I error/OneSample/OneSample_Expected_Inflation_error_DoNotRejectH0.RData")
Inflation_error
load("/Users/benedictkongyir/Desktop/OSU/Research/Test codes/Expected_TypeI_error_DoNotRejectSW.RData")
Inflation_error
N
P
rm(list = ls())
load("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Parallel processing/parallel_sim/Type I error/OneSample/OneSample_Expected_Inflation_error_DoNotRejectH0.RData")
N
P
load("/Users/benedictkongyir/Desktop/OSU/Research/Test codes/OneSample_powerloss_DoNotRejectH01.RData")
power_loss_par
P
N
load("/Users/benedictkongyir/Desktop/OSU/Research/Test codes/OneSample_powerloss_DoNotRejectH01.RData")
power_loss_par
rm(list = ls())
load("/Users/benedictkongyir/Desktop/OSU/Research/Test codes/OneSample_powerloss_DoNotRejectH01.RData")
power_loss_par
prob_SW<- data.frame(prob_Rejecth0_Norm_test)
data_powerloss <-data.frame(power_loss_par)
#data_error <-data.frame(TypeI_error_inflation_par)
Expected_error_powerloss <- prob_SW * data_powerloss
