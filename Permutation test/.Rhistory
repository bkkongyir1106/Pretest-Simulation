}
if(test == "JB"){
output <- jarque.test(x)
}
if(test == "DAP"){
output <- agostino.test(x)
}
if(test == "AD"){
output <- ad.test(x)
}
if(test == "SF"){
output <- sf.test(x)
}
return(output)
}
y
generate_tests("AD")
generate_tests(y, "AD")
generate_tests(y, "KS")
generate_tests(y, "SW")
generate_tests(y, "AD")
generate_tests(y, "SF")
generate_tests(y, "DAP")
k = generate_data(100, "Contaminated")
k
sd(k)
# load necessary libraries
library("nortest")
library("dgof")
library("dplyr")
library(moments)
library(tseries)
#Generate data from different distribution but located similarly
generate_data <- function(n, dist){
if(dist == "Standard Normal"){
x <- rnorm(n, mean = 0, sd = 1)
}
if(dist == "Chi-Square"){
x <- (rchisq(n, df = 3) - 3)/sqrt(6)
}
if(dist == "Gamma"){
x <- (rgamma(n, shape = 3, rate = 0.1) - 30)/sqrt(300)
}
if(dist == "Exponential"){
x <- rexp(n, rate = 1) - 1
}
if(dist == "t"){
x <- (rt(n, df = 7))/sqrt(7/5)
}
if(dist == "Uniform"){
x <- (runif(n, min = 0, max = 1) - 0.5)*sqrt(12)
}
if(dist == "Weibull"){
x <- (rweibull(n, shape = 1, scale = 2) - 2*gamma(51/50))/sqrt(4*(gamma(3) - gamma(2)))
}
if(dist == "LogNormal"){
x <- (rlnorm(n, meanlog = 0, sdlog = 1) - exp(0 + 1/2))/sqrt((exp(1)-1)*exp(2*0 + 1))
}
if(dist == "Contaminated"){
br <- rbinom(n , size = 1 , prob = 0.7)
sd_br <- sqrt(1 + br * 25)
x <- rnorm(n, mean = 0, sd = sd_br)
}
return(x)
}
#Apply different tests
generate_tests <- function(x, test){
if(test == "KS"){
output <- lillie.test(x)
}
if(test == "SW"){
output <- shapiro.test(x)
}
if(test == "JB"){
output <- jarque.test(x)
}
if(test == "DAP"){
output <- agostino.test(x)
}
if(test == "AD"){
output <- ad.test(x)
}
if(test == "SF"){
output <- sf.test(x)
}
return(output)
}
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Permutation Test/New Simulations")
source("OneSample functions.R")
N <- 1e2;  alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t", "Exponential", "Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
testvec <- c("KS", "SW", "JB", "DAP",  "AD", "SF")
nvec <- c(8, 10, 15, 20, 30, 50, 80)
d.vec <- c(0.01, 0.5, 0.75)
set.seed(33)
powervec <- numeric(length(nvec) * length(dist_sum) * length(testvec))
power_t_test <- power_permutation <- power_pretest <- array(powervec, dim = c(7, 9, 6),
dimnames = list(nvec, dist_sum, testvec))
calculate_test_statistic <- function(x) {
return(mean(x) / sqrt(var(x) / length(x)))
}
system.time({
for (i in 1:length(nvec)) {
n <- nvec[i]
print(n)
for (m in 1:length(testvec)) {
test_type <- testvec[m]
for (j in 1:length(dist_sum)) {
dist <- dist_sum[j]
pval_test<- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
pval_test[k] <- generate_tests(x, test_type)$p.value
}
power_pretest[i, j, m] <- mean(pval_test < alpha)
}
}
}
})
power_pretest
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Permutation Test/New Simulations")
source("OneSample functions.R")
N <- 1e3;  alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t", "Exponential", "Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
testvec <- c("KS", "SW", "JB", "DAP",  "AD", "SF")
nvec <- c(8, 10, 15, 20, 30, 50, 80)
d.vec <- c(0.01, 0.5, 0.75)
set.seed(33)
powervec <- numeric(length(nvec) * length(dist_sum) * length(testvec))
power_t_test <- power_permutation <- power_pretest <- array(powervec, dim = c(7, 9, 6),
dimnames = list(nvec, dist_sum, testvec))
calculate_test_statistic <- function(x) {
return(mean(x) / sqrt(var(x) / length(x)))
}
system.time({
for (i in 1:length(nvec)) {
n <- nvec[i]
print(n)
for (m in 1:length(testvec)) {
test_type <- testvec[m]
for (j in 1:length(dist_sum)) {
dist <- dist_sum[j]
pval_test<- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
pval_test[k] <- generate_tests(x, test_type)$p.value
}
power_pretest[i, j, m] <- mean(pval_test < alpha)
}
}
}
})
power_pretest
# Function to calculate the test statistic (difference of means)
calculate_test_statistic <- function(x, y) {
return((mean(x) - mean(y))/sqrt(var(x)/length(x) + var(y)/length(y)))
}
permutation_fun <- function(x, y){
observed_statistic <- calculate_test_statistic(x, y)
permuted_statistics <- rep(0, P)
for (l in 1:P) {
sampled_data <- sample(permuted_data)
permuted_data1 <- sampled_data[1:length(x)]
permuted_data2 <- sampled_data[(length(x) + 1):(length(x) + length(y))]
permuted_statistics[l] <- calculate_test_statistic(permuted_data1, permuted_data2)
}
}
# Function to calculate the test statistic (difference of means)
calculate_test_statistic <- function(x, y) {
return((mean(x) - mean(y))/sqrt(var(x)/length(x) + var(y)/length(y)))
}
permutation_fun <- function(x, y){
observed_statistic <- calculate_test_statistic(x, y)
permuted_statistics <- rep(0, P)
for (l in 1:P) {
sampled_data <- sample(permuted_data)
permuted_data1 <- sampled_data[1:length(x)]
permuted_data2 <- sampled_data[(length(x) + 1):(length(x) + length(y))]
permuted_statistics[l] <- calculate_test_statistic(permuted_data1, permuted_data2)
}
return(permuted_statistics)
}
generate_data(100, "Gamma")
# Function to calculate the test statistic (difference of means)
calculate_test_statistic <- function(x, y) {
return((mean(x) - mean(y))/sqrt(var(x)/length(x) + var(y)/length(y)))
}
permutation_fun <- function(x, y){
observed_statistic <- calculate_test_statistic(x, y)
permuted_statistics <- rep(0, P)
for (l in 1:P) {
sampled_data <- sample(permuted_data)
permuted_data1 <- sampled_data[1:length(x)]
permuted_data2 <- sampled_data[(length(x) + 1):(length(x) + length(y))]
permuted_statistics[l] <- calculate_test_statistic(permuted_data1, permuted_data2)
}
return(permuted_statistics)
}
permuted_statistics
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Permutation functions")
getwd()
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Permutation Test/New Simulations")
source("OneSample functions.R")
N <- 1e4; P <- 1e4; alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t", "Exponential", "Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
nvec <- c(5, 8, 10, 20, 50, 80)
d.vec <- c(0.25, 0.5, 0.75)
set.seed(33)
powervec <- numeric(length(nvec) * length(dist_sum) * length(d.vec))
power_t_test <- power_permutation <- array(powervec, dim = c(6, 9, 3),
dimnames = list(nvec, dist_sum, d.vec))
# Function to calculate the test statistic (difference of means)
calculate_test_statistic <- function(x, y) {
return((mean(x) - mean(y))/sqrt(var(x)/length(x) + var(y)/length(y)))
}
system.time({
for (i in 1:length(nvec)) {
n <- nvec[i]
print(n)
for (m in 1:length(d.vec)) {
d <- d.vec[m]
for (j in 1:length(dist_sum)) {
dist <- dist_sum[j]
pval <- pval_perm <- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist) + d
permuted_data <- c(x, y)
pval[k] <- t.test(x, y, var.equal = F)$p.value
observed_statistic <- calculate_test_statistic(x, y)
permuted_statistics <- rep(0, P)
for (l in 1:P) {
sampled_data <- sample(permuted_data)
permuted_data1 <- sampled_data[1:length(x)]
permuted_data2 <- sampled_data[(length(x) + 1):(length(x) + length(y))]
permuted_statistics[l] <- calculate_test_statistic(permuted_data1, permuted_data2)
}
pval_perm[k] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
power_t_test[i, j, m] <- mean(pval < alpha)
power_permutation[i, j, m] <- mean(pval_perm < alpha)
}
}
}
powerloss <- power_permutation - power_t_test
})
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Permutation Test/New Simulations")
source("OneSample functions.R")
N <- 1e2; P <- 1e2; alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t", "Exponential", "Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
nvec <- c(5, 8, 10, 20, 50, 80)
d.vec <- c(0.25, 0.5, 0.75)
set.seed(33)
powervec <- numeric(length(nvec) * length(dist_sum) * length(d.vec))
power_t_test <- power_permutation <- array(powervec, dim = c(6, 9, 3),
dimnames = list(nvec, dist_sum, d.vec))
# Function to calculate the test statistic (difference of means)
calculate_test_statistic <- function(x, y) {
return((mean(x) - mean(y))/sqrt(var(x)/length(x) + var(y)/length(y)))
}
system.time({
for (i in 1:length(nvec)) {
n <- nvec[i]
print(n)
for (m in 1:length(d.vec)) {
d <- d.vec[m]
for (j in 1:length(dist_sum)) {
dist <- dist_sum[j]
pval <- pval_perm <- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist) + d
permuted_data <- c(x, y)
pval[k] <- t.test(x, y, var.equal = F)$p.value
observed_statistic <- calculate_test_statistic(x, y)
permuted_statistics <- rep(0, P)
for (l in 1:P) {
sampled_data <- sample(permuted_data)
permuted_data1 <- sampled_data[1:length(x)]
permuted_data2 <- sampled_data[(length(x) + 1):(length(x) + length(y))]
permuted_statistics[l] <- calculate_test_statistic(permuted_data1, permuted_data2)
}
pval_perm[k] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
power_t_test[i, j, m] <- mean(pval < alpha)
power_permutation[i, j, m] <- mean(pval_perm < alpha)
}
}
}
powerloss <- power_permutation - power_t_test
})
power_t_test
power_permutation
powerloss
save.image(paste0("TwoSamples_powerloss",".RData"))
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Permutation Test/New Simulations")
source("OneSample functions.R")
N <- 1e3; P <- 1e3; alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t", "Exponential", "Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
nvec <- c(5, 8, 10, 20, 50, 80)
d.vec <- c(0.25, 0.5, 0.75)
set.seed(33)
powervec <- numeric(length(nvec) * length(dist_sum) * length(d.vec))
power_t_test <- power_permutation <- array(powervec, dim = c(6, 9, 3),
dimnames = list(nvec, dist_sum, d.vec))
# Function to calculate the test statistic (difference of means)
calculate_test_statistic <- function(x, y) {
return((mean(x) - mean(y))/sqrt(var(x)/length(x) + var(y)/length(y)))
}
system.time({
for (i in 1:length(nvec)) {
n <- nvec[i]
print(n)
for (m in 1:length(d.vec)) {
d <- d.vec[m]
for (j in 1:length(dist_sum)) {
dist <- dist_sum[j]
pval <- pval_perm <- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist) + d
permuted_data <- c(x, y)
pval[k] <- t.test(x, y, var.equal = F)$p.value
observed_statistic <- calculate_test_statistic(x, y)
permuted_statistics <- rep(0, P)
for (l in 1:P) {
sampled_data <- sample(permuted_data)
permuted_data1 <- sampled_data[1:length(x)]
permuted_data2 <- sampled_data[(length(x) + 1):(length(x) + length(y))]
permuted_statistics[l] <- calculate_test_statistic(permuted_data1, permuted_data2)
}
pval_perm[k] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
power_t_test[i, j, m] <- mean(pval < alpha)
power_permutation[i, j, m] <- mean(pval_perm < alpha)
}
}
}
powerloss <- power_permutation - power_t_test
})
power_t_test
power_permutation
powerloss
save.image(paste0("TwoSamples_powerloss",".RData"))
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Permutation Test/New Simulations")
source("OneSample functions.R")
N <- 1e2; P <- 1e2
dist_sum <- c("Standard Normal", "Uniform", "t", "Exponential", "Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
nvec <- c(5, 8, 10, 20, 50, 80)
sig_level <- c(0.01, 0.05, 0.075)
set.seed(33)
powervec <- numeric(length(nvec) * length(dist_sum) * length(d.vec))
TypeI_error_t.test <- TypeI_error_perm.test <- array(powervec, dim = c(6, 9, 3),
dimnames = list(nvec, dist_sum, d.vec))
# Function to calculate the test statistic (difference of means)
calculate_test_statistic <- function(x, y) {
return((mean(x) - mean(y))/sqrt(var(x)/length(x) + var(y)/length(y)))
}
system.time({
for (i in 1:length(nvec)) {
n <- nvec[i]
print(n)
for (m in 1:length(sig_level)) {
alpha <- sig_level[m]
for (j in 1:length(dist_sum)) {
dist <- dist_sum[j]
pval <- pval_perm <- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
data <- c(x, y)
pval[k] <- t.test(x, y, var.equal = F)$p.value
observed_statistic <- calculate_test_statistic(x, y)
permuted_statistics <- rep(0, P)
for (l in 1:P) {
sampled_data <- sample(data)
permuted_data1 <- sampled_data[1:length(x)]
permuted_data2 <- sampled_data[(length(x) + 1):(length(x) + length(y))]
permuted_statistics[l] <- calculate_test_statistic(permuted_data1, permuted_data2)
}
pval_perm[k] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
TypeI_error_t.test[i, j, m] <- mean(pval < alpha)
TypeI_error_perm.test[i, j, m] <- mean(pval_perm < alpha)
}
}
}
inflation_error <- TypeI_error_t.test - TypeI_error_perm.test
})
TypeI_error_t.test
TypeI_error_perm.test
inflation_error
save.image(paste0("TwoSamples_powerloss",".RData"))
powervec <- numeric(length(nvec) * length(sig_level) * length(dist_sum))
TypeI_error_t.test <- TypeI_error_perm.test <- array(powervec, dim = c(6, 9, 3),
dimnames = list(nvec, dist_sum, sig_level))
powervec
TypeI_error_t.test
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Permutation Test/New Simulations")
source("OneSample functions.R")
N <- 1e2; P <- 1e2
dist_sum <- c("Standard Normal", "Uniform", "t", "Exponential", "Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
nvec <- c(5, 8, 10, 20, 50, 80)
sig_level <- c(0.01, 0.05, 0.075)
set.seed(33)
powervec <- numeric(length(nvec) * length(sig_level) * length(dist_sum))
TypeI_error_t.test <- TypeI_error_perm.test <- array(powervec, dim = c(6, 9, 3),
dimnames = list(nvec, dist_sum, sig_level))
# Function to calculate the test statistic (difference of means)
calculate_test_statistic <- function(x, y) {
return((mean(x) - mean(y))/sqrt(var(x)/length(x) + var(y)/length(y)))
}
system.time({
for (i in 1:length(nvec)) {
n <- nvec[i]
print(n)
for (m in 1:length(sig_level)) {
alpha <- sig_level[m]
for (j in 1:length(dist_sum)) {
dist <- dist_sum[j]
pval <- pval_perm <- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
data <- c(x, y)
pval[k] <- t.test(x, y, var.equal = F)$p.value
observed_statistic <- calculate_test_statistic(x, y)
permuted_statistics <- rep(0, P)
for (l in 1:P) {
sampled_data <- sample(data)
permuted_data1 <- sampled_data[1:length(x)]
permuted_data2 <- sampled_data[(length(x) + 1):(length(x) + length(y))]
permuted_statistics[l] <- calculate_test_statistic(permuted_data1, permuted_data2)
}
pval_perm[k] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
TypeI_error_t.test[i, j, m] <- mean(pval < alpha)
TypeI_error_perm.test[i, j, m] <- mean(pval_perm < alpha)
}
}
}
inflation_error <- TypeI_error_t.test - TypeI_error_perm.test
})
TypeI_error_t.test
TypeI_error_perm.test
inflation_error
save.image(paste0("TwoSamples_powerloss",".RData"))
y
x
pval_perm
pval
pval < alpha
pval_perm < alpha
mean(pval_perm < alpha)
mean(pval < alpha)
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Permutation Test/New Simulations")
source("OneSample functions.R")
N <- 1e3; P <- 1e3
dist_sum <- c("Standard Normal", "Uniform", "t", "Exponential", "Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
nvec <- c(5, 8, 10, 20, 50, 80)
sig_level <- c(0.01, 0.05, 0.075)
set.seed(33)
powervec <- numeric(length(nvec) * length(sig_level) * length(dist_sum))
TypeI_error_t.test <- TypeI_error_perm.test <- array(powervec, dim = c(6, 9, 3),
dimnames = list(nvec, dist_sum, sig_level))
# Function to calculate the test statistic (difference of means)
calculate_test_statistic <- function(x, y) {
return((mean(x) - mean(y))/sqrt(var(x)/length(x) + var(y)/length(y)))
}
system.time({
for (i in 1:length(nvec)) {
n <- nvec[i]
print(n)
for (m in 1:length(sig_level)) {
alpha <- sig_level[m]
for (j in 1:length(dist_sum)) {
dist <- dist_sum[j]
pval <- pval_perm <- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
data <- c(x, y)
pval[k] <- t.test(x, y, var.equal = F)$p.value
observed_statistic <- calculate_test_statistic(x, y)
permuted_statistics <- rep(0, P)
for (l in 1:P) {
sampled_data <- sample(data)
permuted_data1 <- sampled_data[1:length(x)]
permuted_data2 <- sampled_data[(length(x) + 1):(length(x) + length(y))]
permuted_statistics[l] <- calculate_test_statistic(permuted_data1, permuted_data2)
}
pval_perm[k] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
TypeI_error_t.test[i, j, m] <- mean(pval < alpha)
TypeI_error_perm.test[i, j, m] <- mean(pval_perm < alpha)
}
}
}
inflation_error <- TypeI_error_t.test - TypeI_error_perm.test
})
TypeI_error_t.test
TypeI_error_perm.test
inflation_error
save.image(paste0("TwoSamples_powerloss",".RData"))
