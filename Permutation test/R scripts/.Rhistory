l2 <- (rlnorm(n, meanlog = 0, sdlog = 1) - exp(0 + 1/2))/sqrt((exp(1)-1)*exp(2*0 + 1)) + d
permuted_data_logn <- c(l1, l2)
# Observed test statistic
observed_statistic_norm <- calculate_test_statistic(n1, n2)
observed_statistic_exp <- calculate_test_statistic(e1, e2)
observed_statistic_t <- calculate_test_statistic(t1, t2)
observed_statistic_chisq <- calculate_test_statistic(k1, k2)
observed_statistic_gamma <- calculate_test_statistic(g1, g2)
observed_statistic_weibul <- calculate_test_statistic(w1, w2)
observed_statistic_logn <- calculate_test_statistic(l1, l2)
permuted_statistics_norm <- permuted_statistics_exp <- permuted_statistics_t <-permuted_statistics_logn <-
permuted_statistics_chisq <- permuted_statistics_gamma <- permuted_statistics_weibul<- rep(0, P)
for(i in 1 : P){
permuted_data_norm <- sample(permuted_data_norm)
permuted_data_exp <- sample(permuted_data_exp)
permuted_data_t <- sample(permuted_data_t)
permuted_data_chisq <- sample(permuted_data_chisq)
permuted_data_gamma <- sample(permuted_data_gamma)
permuted_data_weibull <- sample(permuted_data_weibull)
permuted_data_logn <- sample(permuted_data_logn)
# Calculate the test statistic for the permuted data
# normal
permuted_norm1 <- permuted_data_norm[1:length(n1)]
permuted_norm2 <- permuted_data_norm[(length(n1) + 1):(length(n1) + length(n2))]
permuted_statistics_norm[i] <- calculate_test_statistic(permuted_norm1, permuted_norm2)
# exp
permuted_exp1 <- permuted_data_exp[1:length(e1)]
permuted_exp2 <- permuted_data_exp[(length(e1) + 1):(length(e1) + length(e2))]
permuted_statistics_exp[i] <- calculate_test_statistic(permuted_exp1, permuted_exp2)
# t distn
permuted_t1 <- permuted_data_t[1:length(t1)]
permuted_t2 <- permuted_data_t[(length(t1) + 1):(length(t1) + length(t2))]
permuted_statistics_t[i] <- calculate_test_statistic(permuted_t1, permuted_t2)
# chisq distn
permuted_chisq1 <- permuted_data_chisq[1:length(k1)]
permuted_chisq2 <- permuted_data_chisq[(length(k1) + 1):(length(k1) + length(k2))]
permuted_statistics_chisq[i] <- calculate_test_statistic(permuted_chisq1, permuted_chisq2)
# gamma
permuted_gamma1 <- permuted_data_gamma[1:length(g1)]
permuted_gamma2 <- permuted_data_gamma[(length(g1) + 1):(length(g1) + length(g2))]
permuted_statistics_gamma[i] <- calculate_test_statistic(permuted_gamma1, permuted_gamma2)
# weibul distn
permuted_weibul1 <- permuted_data_weibull[1:length(w1)]
permuted_weibul2 <- permuted_data_weibull[(length(w1) + 1):(length(w1) + length(w2))]
permuted_statistics_weibul[i] <- calculate_test_statistic(permuted_weibul1, permuted_weibul2)
# logn distn
permuted_logn1 <- permuted_data_logn[1:length(l1)]
permuted_logn2 <- permuted_data_chisq[(length(l1) + 1):(length(l1) + length(l2))]
permuted_statistics_logn[i] <- calculate_test_statistic(permuted_logn1, permuted_logn2)
}
# Calculate the pvalue of test
pval_perm_norm[j] <- round(mean(abs(permuted_statistics_norm) >= abs(observed_statistic_norm)), 5)
pval_perm_exp[j] <- round(mean(abs(permuted_statistics_exp) >= abs(observed_statistic_exp)), 5)
pval_perm_t[j] <- round(mean(abs(permuted_statistics_t) >= abs(observed_statistic_t)), 5)
pval_perm_chisq[j] <- round(mean(abs(permuted_statistics_chisq) >= abs(observed_statistic_chisq)), 5)
pval_perm_gamma[j] <- round(mean(abs(permuted_statistics_gamma) >= abs(observed_statistic_gamma)), 5)
pval_perm_weibul[j] <- round(mean(abs(permuted_statistics_weibul) >= abs(observed_statistic_weibul)), 5)
pval_perm_logn[j] <- round(mean(abs(permuted_statistics_logn) >= abs(observed_statistic_logn)), 5)
}
power_perm_test_norm[k] <- round(mean(pval_perm_norm < alpha), 5)
power_perm_test_exp[k] <- round(mean(pval_perm_exp < alpha), 5)
power_perm_test_t[k] <- round(mean(pval_perm_t < alpha), 5)
power_perm_test_chisq[k] <- round(mean(pval_perm_chisq < alpha), 5)
power_perm_test_gamma[k] <- round(mean(pval_perm_gamma < alpha), 5)
power_perm_test_weibul[k] <- round(mean(pval_perm_weibul < alpha), 5)
power_perm_test_logn[k] <- round(mean(pval_perm_logn < alpha), 5)
}
# power loss
power_loss_norm <- power_perm_test_norm - power_t_test_normal
power_loss_exp <- power_perm_test_exp - power_t_test_exp
power_loss_t <- power_perm_test_t - power_t_test_t
power_loss_chisq <- power_perm_test_chisq - power_t_test_chisq
power_loss_gamma <- power_perm_test_gamma - power_t_test_gamma
power_loss_weibul <- power_perm_test_weibul - power_t_test_weibul
power_loss_logn<- power_perm_test_logn - power_t_test_logn
# power under t test
power_t<-c(power_t_test_normal, power_t_test_exp, power_t_test_t, power_t_test_chisq,
power_t_test_gamma, power_t_test_weibul, power_t_test_logn)
power_table_t<-array(power_t, dim = c(5, 7), dimnames = list(sample_size,c("norm_t",
"exp_t", "t distn_t","chisq", "Gamma", "Weibull", "Lognormal")))
print(power_table_t)
# power under permutation test
power_perm<-c(power_perm_test_norm, power_perm_test_exp, power_perm_test_t,  power_perm_test_chisq,
power_perm_test_gamma, power_perm_test_weibul, power_perm_test_logn)
power_table_perm<-array(power_perm, dim = c(5, 7), dimnames = list(sample_size, c("Normal",
"exp_perm", "t_perm", "chisq", "Gamma", "Weibull", "Lognormal")))
print(power_table_perm)
# power loss
powerloss_data<-c(power_loss_norm, power_loss_exp,power_loss_t, power_loss_chisq,
power_loss_gamma, power_loss_weibul, power_loss_logn)
powerloss_table<-array(powerloss_data, dim = c(5, 7), dimnames = list(sample_size, c("Normal", "exp_perm",
"t_perm", "chisq", "Gamma", "Weibull", "Lognormal")))
print(powerloss_table)
save.image(paste0("result2.0",".RData"))
#Generate data from different distribution but located similarly
generate_data <- function(n, dist){
if(dist == "Standard Normal"){
x <- rnorm(n, mean = 0, sd = 1)
}
if(dist == "Chi-Square"){
x <- (rchisq(n, df = 3) - 3)/sqrt(6)
}
if(dist == "Gamma"){
x <- (rgamma(n, shape = 3, rate = 0.1) - 30)/sqrt(300)
}
if(dist == "Exponential"){
x <- rexp(n, rate = 1) - 1
}
if(dist == "t"){
x <- (rt(n, df = 7))/sqrt(7/5)
}
if(dist == "Uniform"){
x <- (runif(n, min = 0, max = 1) - 0.5)*sqrt(12)
}
if(dist == "Weibull"){
x <- (rweibull(n, shape = 1, scale = 2) - 2*gamma(51/50))/sqrt(4*(gamma(3) - gamma(2)))
}
if(dist == "LogNormal"){
x <- (rlnorm(n, meanlog = 0, sdlog = 1) - exp(0 + 1/2))/sqrt((exp(1)-1)*exp(2*0 + 1))
}
if(dist == "Contaminated"){
br <- rbinom(n , size = 1 , prob = 0.7)
sd_br <- sqrt(1 + br * 25)
x <- rnorm(n, mean = 0, sd = sd_br)
}
return(x)
}
#Apply different tests
generate_tests <- function(x, test){
if(test == "KS"){
output <- lillie.test(x)
}
if(test == "SW"){
output <- shapiro.test(x)
}
if(test == "JB"){
output <- jarque.test(x)
}
if(test == "DAP"){
output <- agostino.test(x)
}
if(test == "AD"){
output <- ad.test(x)
}
if(test == "SF"){
output <- sf.test(x)
}
return(output)
}
# Main test functions
N <- 1e1; P <- 1e1; alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t", "Exponential", "Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
nvec <- c(5, 8, 10, 20, 50, 80)
d.vec <- c(0.25, 0.5, 0.75)
set.seed(33)
powervec <- numeric(length(nvec) * length(dist_sum) * length(d.vec))
power_t_test <- power_permutation <- array(powervec, dim = c(6, 9, 3),
dimnames = list(nvec, dist_sum, d.vec))
# Function to calculate the test statistic (difference of means)
calculate_test_statistic <- function(x, y) {
return((mean(x) - mean(y))/sqrt(var(x)/length(x) + var(y)/length(y)))
}
system.time({
for (i in 1:length(nvec)) {
n <- nvec[i]
print(n)
for (m in 1:length(d.vec)) {
d <- d.vec[m]
for (j in 1:length(dist_sum)) {
dist <- dist_sum[j]
pval <- pval_perm <- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist) + d
permuted_data <- c(x, y)
pval[k] <- t.test(x, y, var.equal = F)$p.value
observed_statistic <- calculate_test_statistic(x, y)
permuted_statistics <- rep(0, P)
for (l in 1:P) {
sampled_data <- sample(permuted_data)
permuted_data1 <- sampled_data[1:length(x)]
permuted_data2 <- sampled_data[(length(x) + 1):(length(x) + length(y))]
permuted_statistics[l] <- calculate_test_statistic(permuted_data1, permuted_data2)
}
pval_perm[k] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
power_t_test[i, j, m] <- mean(pval < alpha)
power_permutation[i, j, m] <- mean(pval_perm < alpha)
}
}
}
powerloss <- power_permutation - power_t_test
})
power_t_test
power_permutation
powerloss
save.image(paste0("TwoSamples_powerloss",".RData"))
# install.packages("nortest")
# install.packages("dgof")
# install.packages("dplyr")
# install.packages("moments")
# install.packages("tseries")
# install.packages("LaplacesDemon")
library("nortest")
library("dgof")
library("dplyr")
library(moments)
library(tseries)
library(LaplacesDemon)
#Generate data from different distribution but located similarly
generate_data <- function(n, dist){
if(dist == "Standard Normal"){
x <- rnorm(n, mean = 0, sd = 1)
}
if(dist == "Chi-Square"){
x <- (rchisq(n, df = 3) - 3)/sqrt(6)
}
if(dist == "Gamma"){
x <- (rgamma(n, shape = 3, rate = 0.1) - 30)/sqrt(300)
}
if(dist == "Exponential"){
x <- rexp(n, rate = 1) - 1
}
if(dist == "t"){
x <- (rt(n, df = 7))/sqrt(7/5)
}
if(dist == "Uniform"){
x <- (runif(n, min = 0, max = 1) - 0.5)*sqrt(12)
}
if(dist == "Laplace"){
x <- rlaplace(n , location = 0, scale = 4)/sqrt(8)
}
if(dist == "Weibull"){
x <- (rweibull(n, shape = 1, scale = 2) - 2*gamma(51/50))/sqrt(4*(gamma(3) - gamma(2)))
}
if(dist == "LogNormal"){
x <- (rlnorm(n, meanlog = 0, sdlog = 1) - exp(0 + 1/2))/sqrt((exp(1)-1)*exp(2*0 + 1))
}
if(dist == "Contaminated"){
br <- rbinom(n , size = 1 , prob = 0.7)
sd_br <- sqrt(1 + br * 25)
x <- rnorm(n, mean = 0, sd = sd_br)/sqrt(25)
}
return(x)
}
#Apply different tests
generate_tests <- function(x, test){
if(test == "KS"){
output <- lillie.test(x)
}
if(test == "SW"){
output <- shapiro.test(x)
}
if(test == "JB"){
output <- jarque.test(x)
}
if(test == "DAP"){
output <- agostino.test(x)
}
if(test == "AD"){
output <- ad.test(x)
}
if(test == "SF"){
output <- sf.test(x)
}
return(output)
}
N <- 1e1;  alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t", "Laplace","Exponential", "Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
testvec <- c("KS", "SW", "JB", "DAP")
nvec <- c(8, 10, 15, 20, 30, 50)
set.seed(33)
powervec <- numeric(length(nvec) * length(dist_sum) * length(testvec))
power_t_test <- power_permutation <- power_pretest <- array(powervec, dim = c(6, 10, 4),
dimnames = list(nvec, dist_sum, testvec))
calculate_test_statistic <- function(x) {
return(mean(x) / sqrt(var(x) / length(x)))
}
system.time({
for (i in 1:length(nvec)) {
n <- nvec[i]
print(n)
for (m in 1:length(testvec)) {
test_type <- testvec[m]
for (j in 1:length(dist_sum)) {
dist <- dist_sum[j]
pval_test_x <- pval_test_y <- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
pval_test_x[k] <- generate_tests(x, test_type)$p.value
pval_test_y[k] <- generate_tests(y, test_type)$p.value
}
power_pretest[i, j, m] <- mean(pval_test_x < alpha/2 | pval_test_y <alpha/2)
}
}
}
})
power_pretest
save.image(paste0("try",".RData"))
# install.packages("nortest")
# install.packages("dgof")
# install.packages("dplyr")
# install.packages("moments")
# install.packages("tseries")
# install.packages("LaplacesDemon")
library("nortest")
library("dgof")
library("dplyr")
library(moments)
#library(tseries)
#library(LaplacesDemon)
#Generate data from different distribution but located similarly
generate_data <- function(n, dist){
if(dist == "Standard Normal"){
x <- rnorm(n, mean = 0, sd = 1)
}
if(dist == "Chi-Square"){
x <- (rchisq(n, df = 3) - 3)/sqrt(6)
}
if(dist == "Gamma"){
x <- (rgamma(n, shape = 3, rate = 0.1) - 30)/sqrt(300)
}
if(dist == "Exponential"){
x <- rexp(n, rate = 1) - 1
}
if(dist == "t"){
x <- (rt(n, df = 7))/sqrt(7/5)
}
if(dist == "Uniform"){
x <- (runif(n, min = 0, max = 1) - 0.5)*sqrt(12)
}
if(dist == "Laplace"){
x <- rlaplace(n , location = 0, scale = 4)/sqrt(8)
}
if(dist == "Weibull"){
x <- (rweibull(n, shape = 1, scale = 2) - 2*gamma(51/50))/sqrt(4*(gamma(3) - gamma(2)))
}
if(dist == "LogNormal"){
x <- (rlnorm(n, meanlog = 0, sdlog = 1) - exp(0 + 1/2))/sqrt((exp(1)-1)*exp(2*0 + 1))
}
if(dist == "Contaminated"){
br <- rbinom(n , size = 1 , prob = 0.7)
sd_br <- sqrt(1 + br * 25)
x <- rnorm(n, mean = 0, sd = sd_br)/sqrt(25)
}
return(x)
}
#Apply different tests
generate_tests <- function(x, test){
if(test == "KS"){
output <- lillie.test(x)
}
if(test == "SW"){
output <- shapiro.test(x)
}
if(test == "JB"){
output <- jarque.test(x)
}
if(test == "DAP"){
output <- agostino.test(x)
}
if(test == "AD"){
output <- ad.test(x)
}
if(test == "SF"){
output <- sf.test(x)
}
return(output)
}
N <- 1e1;  alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t", "Laplace","Exponential", "Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
testvec <- c("KS", "SW", "JB", "DAP")
nvec <- c(8, 10, 15, 20, 30, 50)
set.seed(33)
powervec <- numeric(length(nvec) * length(dist_sum) * length(testvec))
power_t_test <- power_permutation <- power_pretest <- array(powervec, dim = c(6, 10, 4),
dimnames = list(nvec, dist_sum, testvec))
calculate_test_statistic <- function(x) {
return(mean(x) / sqrt(var(x) / length(x)))
}
system.time({
for (i in 1:length(nvec)) {
n <- nvec[i]
print(n)
for (m in 1:length(testvec)) {
test_type <- testvec[m]
for (j in 1:length(dist_sum)) {
dist <- dist_sum[j]
pval_test_x <- pval_test_y <- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
pval_test_x[k] <- generate_tests(x, test_type)$p.value
pval_test_y[k] <- generate_tests(y, test_type)$p.value
}
power_pretest[i, j, m] <- mean(pval_test_x < alpha/2 | pval_test_y <alpha/2)
}
}
}
})
power_pretest
save.image(paste0("try",".RData"))
# load necessary libraries
library("nortest")
library("dgof")
library("dplyr")
library(moments)
library(tseries)
library(LaplacesDemon)
#Generate data from different distribution but located similarly
generate_data <- function(n, dist){
if(dist == "Standard Normal"){
x <- rnorm(n, mean = 0, sd = 1)
}
if(dist == "Chi-Square"){
x <- (rchisq(n, df = 3) - 3)/sqrt(6)
}
if(dist == "Gamma"){
x <- (rgamma(n, shape = 3, rate = 0.1) - 30)/sqrt(300)
}
if(dist == "Exponential"){
x <- rexp(n, rate = 1) - 1
}
if(dist == "t"){
x <- (rt(n, df = 7))/sqrt(7/5)
}
if(dist == "Uniform"){
x <- (runif(n, min = 0, max = 1) - 0.5)*sqrt(12)
}
if(dist == "Laplace"){
x <- rlaplace(n , location = 0, scale = 4)/sqrt(8)
}
if(dist == "Weibull"){
x <- (rweibull(n, shape = 1, scale = 2) - 2*gamma(51/50))/sqrt(4*(gamma(3) - gamma(2)))
}
if(dist == "LogNormal"){
x <- (rlnorm(n, meanlog = 0, sdlog = 1) - exp(0 + 1/2))/sqrt((exp(1)-1)*exp(2*0 + 1))
}
if(dist == "Contaminated"){
br <- rbinom(n , size = 1 , prob = 0.7)
sd_br <- sqrt(1 + br * 25)
x <- rnorm(n, mean = 0, sd = sd_br)/sqrt(25)
}
return(x)
}
#Apply different tests
generate_tests <- function(x, test){
if(test == "KS"){
output <- lillie.test(x)
}
if(test == "SW"){
output <- shapiro.test(x)
}
if(test == "JB"){
output <- jarque.test(x)
}
if(test == "DAP"){
output <- agostino.test(x)
}
if(test == "AD"){
output <- ad.test(x)
}
if(test == "SF"){
output <- sf.test(x)
}
return(output)
}
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Permutation Test/New Simulations/R scripts")
source("Defined functions.R")
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Permutation Test/New Simulations/R scripts")
source("User_defined_functions")
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Permutation Test/New Simulations/R scripts")
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Permutation Test/New Simulations/R scripts")
source("Defined functions.R")
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Permutation Test/New Simulations/R scripts")
source("User_defined_functions.R")
N <- 1e4;  alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t", "Laplace","Exponential", "Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
testvec <- c("KS", "SW", "JB", "DAP", "AD", "SF")
nvec <- c(8, 10, 15, 20, 30, 50, 80)
set.seed(33)
powervec <- numeric(length(nvec) * length(dist_sum) * length(testvec))
power_t_test <- power_permutation <- power_pretest <- array(powervec, dim = c(7, 10, 6),
dimnames = list(nvec, dist_sum, testvec))
calculate_test_statistic <- function(x) {
return(mean(x) / sqrt(var(x) / length(x)))
}
system.time({
for (i in 1:length(nvec)) {
n <- nvec[i]
print(n)
for (m in 1:length(testvec)) {
test_type <- testvec[m]
for (j in 1:length(dist_sum)) {
dist <- dist_sum[j]
pval_test_x <- pval_test_y <- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
pval_test_x[k] <- generate_tests(x, test_type)$p.value
pval_test_y[k] <- generate_tests(y, test_type)$p.value
}
power_pretest[i, j, m] <- mean(pval_test_x < alpha/2 | pval_test_y <alpha/2)
}
}
}
})
