n <- nvec[i]
print(n)
for (m in 1:length(d.vec)) {
d <- d.vec[m]
for (j in 1:length(dist_sum))
{
dist <- dist_sum[j]
pval <- pval_perm <- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist) + d
permuted_data <- c(x, y)
pval[k] <- t.test(x, y, var.equal = F)$p.value
observed_statistic <- calculate_test_statistic(x, y)
permuted_statistics <- rep(0, P)
for (l in 1:P) {
sampled_data <- sample(permuted_data)
permuted_data1 <- sampled_data[1:length(x)]
permuted_data2 <- sampled_data[(length(x) + 1):(length(x) + length(y))]
permuted_statistics[l] <- calculate_test_statistic(permuted_data1, permuted_data2)
}
pval_perm[k] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
power_t_test[i, j, m] <- mean(pval < alpha)
power_permutation[i, j, m] <- mean(pval_perm < alpha)
}
}
}
powerloss <- power_permutation - power_t_test
})
power_t_test
power_permutation
powerloss
for (t in seq_along(nvec)) {
for (i in seq_along(d.vec)) {
ptt <- (sim_out[[t]][[i]]$power_t_test)
ppt <- (sim_out[[t]][[i]]$power_permutation)
cat("sample size=", nvec[t], "effect size=", d.vec[i], "distribution =", mydist, "\n")
cat(sprintf("%12.4f power t test\n",          ptt ))
cat(sprintf("%12.4f power permutation\n",     ppt ))
cat(sprintf("%12.4f poer loss\n",     ptt-ppt))
}
}
power_t_test
sim_out <- foreach(i = nvec,
#.packages = c("expectreg", "stats"),
.options.snow=opts) %:%
foreach(m = d.vec) %dopar% {
set.seed(33)
dist <- mydist#dist_sum[j]
pval <- pval_perm <- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist) + d
permuted_data <- c(x, y)
pval[k] <- t.test(x, y, var.equal = F)$p.value
observed_statistic <- calculate_test_statistic(x, y)
permuted_statistics <- rep(0, P)
for (l in 1:P)
{
sampled_data <- sample(permuted_data)
permuted_data1 <- sampled_data[1:length(x)]
permuted_data2 <- sampled_data[(length(x) + 1):(length(x) + length(y))]
permuted_statistics[l] <- calculate_test_statistic(permuted_data1, permuted_data2)
}
pval_perm[k] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
power_t_test      <- mean(pval < alpha)
power_permutation <- mean(pval_perm < alpha)
Results <- list(
power_t_test= power_t_test,
power_permutation = power_permutation
)
}
#powervec <- numeric(length(nvec) * length(dist_sum) * length(d.vec))----
power_t_test <- power_permutation <- array(powervec, dim = c(2, 3, 2),
dimnames = list(nvec, dist_sum, d.vec))
system.time({
for (i in 1:length(nvec)) {
n <- nvec[i]
print(n)
for (m in 1:length(d.vec)) {
d <- d.vec[m]
for (j in 1:length(dist_sum))
{
dist <- dist_sum[j]
pval <- pval_perm <- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist) + d
permuted_data <- c(x, y)
pval[k] <- t.test(x, y, var.equal = F)$p.value
observed_statistic <- calculate_test_statistic(x, y)
permuted_statistics <- rep(0, P)
for (l in 1:P) {
sampled_data <- sample(permuted_data)
permuted_data1 <- sampled_data[1:length(x)]
permuted_data2 <- sampled_data[(length(x) + 1):(length(x) + length(y))]
permuted_statistics[l] <- calculate_test_statistic(permuted_data1, permuted_data2)
}
pval_perm[k] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
power_t_test[i, j, m] <- mean(pval < alpha)
power_permutation[i, j, m] <- mean(pval_perm < alpha)
}
}
}
powerloss <- power_permutation - power_t_test
})
powerloss
for (t in seq_along(nvec)) {
for (i in seq_along(d.vec)) {
ptt <- (sim_out[[t]][[i]]$power_t_test)
ppt <- (sim_out[[t]][[i]]$power_permutation)
cat("sample size=", nvec[t], "effect size=", d.vec[i], "distribution =", mydist, "\n")
#cat(sprintf("%12.4f power t test\n",          ptt ))
#cat(sprintf("%12.4f power permutation\n",     ppt ))
cat(sprintf("%12.4f poer loss\n",     ptt-ppt))
}
}
for (t in seq_along(nvec)) {
for (i in seq_along(d.vec)) {
ptt <- (sim_out[[t]][[i]]$power_t_test)
ppt <- (sim_out[[t]][[i]]$power_permutation)
cat("sample size=", nvec[t], "effect size=", d.vec[i], "distribution =", mydist, "\n")
cat(sprintf("%12.4f power t test\n",          ptt ))
cat(sprintf("%12.4f power permutation\n",     ppt ))
cat(sprintf("%12.4f poer loss\n",     ptt-ppt))
}
}
sim_out <- foreach(i = nvec,
#.packages = c("expectreg", "stats"),
.options.snow=opts) %:%
foreach(m = d.vec) %dopar% {
dist <- mydist#dist_sum[j]
pval <- pval_perm <- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist) + d
permuted_data <- c(x, y)
pval[k] <- t.test(x, y, var.equal = F)$p.value
observed_statistic <- calculate_test_statistic(x, y)
permuted_statistics <- rep(0, P)
for (l in 1:P)
{
sampled_data <- sample(permuted_data)
permuted_data1 <- sampled_data[1:length(x)]
permuted_data2 <- sampled_data[(length(x) + 1):(length(x) + length(y))]
permuted_statistics[l] <- calculate_test_statistic(permuted_data1, permuted_data2)
}
pval_perm[k] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
power_t_test      <- mean(pval < alpha)
power_permutation <- mean(pval_perm < alpha)
Results <- list(
power_t_test= power_t_test,
power_permutation = power_permutation
)
}
for (t in seq_along(nvec)) {
for (i in seq_along(d.vec)) {
ptt <- (sim_out[[t]][[i]]$power_t_test)
ppt <- (sim_out[[t]][[i]]$power_permutation)
cat("sample size=", nvec[t], "effect size=", d.vec[i], "distribution =", mydist, "\n")
cat(sprintf("%12.4f power t test\n",          ptt ))
cat(sprintf("%12.4f power permutation\n",     ppt ))
cat(sprintf("%12.4f poer loss\n",     ppt-ptt))
}
}
sim_out <- foreach(i = nvec,
#.packages = c("expectreg", "stats"),
.options.snow=opts) %:%
foreach(m = d.vec) %dopar% {
dist <- mydist#dist_sum[j]
pval <- pval_perm <- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist) + d
permuted_data <- c(x, y)
pval[k] <- t.test(x, y, var.equal = F)$p.value
observed_statistic <- calculate_test_statistic(x, y)
permuted_statistics <- rep(0, P)
for (l in 1:P)
{
sampled_data <- sample(permuted_data)
permuted_data1 <- sampled_data[1:length(x)]
permuted_data2 <- sampled_data[(length(x) + 1):(length(x) + length(y))]
permuted_statistics[l] <- calculate_test_statistic(permuted_data1, permuted_data2)
}
pval_perm[k] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
power_t_test      <- mean(pval < alpha)
power_permutation <- mean(pval_perm < alpha)
Results <- list(
power_t_test= power_t_test,
power_permutation = power_permutation
)
}
for (t in seq_along(nvec)) {
for (i in seq_along(d.vec)) {
ptt <- (sim_out[[t]][[i]]$power_t_test)
ppt <- (sim_out[[t]][[i]]$power_permutation)
cat("sample size=", nvec[t], "effect size=", d.vec[i], "distribution =", mydist, "\n")
cat(sprintf("%12.4f power t test\n",          ptt ))
cat(sprintf("%12.4f power permutation\n",     ppt ))
cat(sprintf("%12.4f poer loss\n",     ppt-ptt))
}
}
suppressWarnings(rm(.Random.seed, envir=globalenv())) ## Remove seed
sim_out <- foreach(i = nvec,
#.packages = c("expectreg", "stats"),
.options.snow=opts) %:%
foreach(m = d.vec) %dopar% {
dist <- mydist#dist_sum[j]
pval <- pval_perm <- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist) + d
permuted_data <- c(x, y)
pval[k] <- t.test(x, y, var.equal = F)$p.value
observed_statistic <- calculate_test_statistic(x, y)
permuted_statistics <- rep(0, P)
for (l in 1:P)
{
sampled_data <- sample(permuted_data)
permuted_data1 <- sampled_data[1:length(x)]
permuted_data2 <- sampled_data[(length(x) + 1):(length(x) + length(y))]
permuted_statistics[l] <- calculate_test_statistic(permuted_data1, permuted_data2)
}
pval_perm[k] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
power_t_test      <- mean(pval < alpha)
power_permutation <- mean(pval_perm < alpha)
Results <- list(
power_t_test= power_t_test,
power_permutation = power_permutation
)
}
for (t in seq_along(nvec)) {
for (i in seq_along(d.vec)) {
ptt <- (sim_out[[t]][[i]]$power_t_test)
ppt <- (sim_out[[t]][[i]]$power_permutation)
cat("sample size=", nvec[t], "effect size=", d.vec[i], "distribution =", mydist, "\n")
cat(sprintf("%12.4f power t test\n",          ptt ))
cat(sprintf("%12.4f power permutation\n",     ppt ))
cat(sprintf("%12.4f poer loss\n",     ppt-ptt))
}
}
suppressWarnings(rm(.Random.seed, envir=globalenv())) ## Rem
.Random.seed
set.seed(NULL)
sim_out <- foreach(i = nvec,
#.packages = c("expectreg", "stats"),
.options.snow=opts) %:%
foreach(m = d.vec) %dopar% {
dist <- mydist#dist_sum[j]
pval <- pval_perm <- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist) + d
permuted_data <- c(x, y)
pval[k] <- t.test(x, y, var.equal = F)$p.value
observed_statistic <- calculate_test_statistic(x, y)
permuted_statistics <- rep(0, P)
for (l in 1:P)
{
sampled_data <- sample(permuted_data)
permuted_data1 <- sampled_data[1:length(x)]
permuted_data2 <- sampled_data[(length(x) + 1):(length(x) + length(y))]
permuted_statistics[l] <- calculate_test_statistic(permuted_data1, permuted_data2)
}
pval_perm[k] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
power_t_test      <- mean(pval < alpha)
power_permutation <- mean(pval_perm < alpha)
Results <- list(
power_t_test= power_t_test,
power_permutation = power_permutation
)
}
for (t in seq_along(nvec)) {
for (i in seq_along(d.vec)) {
ptt <- (sim_out[[t]][[i]]$power_t_test)
ppt <- (sim_out[[t]][[i]]$power_permutation)
cat("sample size=", nvec[t], "effect size=", d.vec[i], "distribution =", mydist, "\n")
cat(sprintf("%12.4f power t test\n",          ptt ))
cat(sprintf("%12.4f power permutation\n",     ppt ))
cat(sprintf("%12.4f poer loss\n",     ppt-ptt))
}
}
rm(list=ls())
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% UTILS %%%%%%%%%%%%%%%%%%%%%%%%%----
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Permutation test/R scripts")
source("User_defined_functions.R")
library(foreach)
library(doParallel)
# Function to calculate the test statistic (difference of means)
calculate_test_statistic <- function(x, y) {
return((mean(x) - mean(y))/sqrt(var(x)/length(x) + var(y)/length(y)))
}
par_set <- function(cores_reserve = 2)
{
cores = parallel::detectCores()
cores_use <- cores - cores_reserve
if(Sys.info()["sysname"] == "Windows"){
cl <- parallel::makeCluster(cores_use) # make a socket cluster
doParallel::registerDoParallel(cl)     # for both Windows & Unix-like
# OR
#cl <- snow::makeSOCKcluster(cores_use) # make a socket cluster
#doSNOW::registerDoSNOW(cl)           # for  Windows only
}else{
#cl <- parallel::makeCluster(cores_use) # make a socket cluster
#doParallel::registerDoParallel(cl)     # for Windows & Unix-like
cl <- snow::makeSOCKcluster(cores_use) # make a socket cluster
doSNOW::registerDoSNOW(cl)           # for
#OR
#doMC::registerDoMC(cores = cores_use)   # make a fork cluster
}
foreach::getDoParWorkers()
}
close_cluster <- function() {
parallel::stopCluster(cl) # close the cluster
}
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PERFORM SIMULATIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%----
## Set up
N <- 50; P <- 10; alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t")
mydist <-dist_sum[1]
nvec <- c(5, 8) #, 10, 20, 50)
d.vec <- c(0.25, 0.5) #, 0.75)
# Parallelized simulation setup
par_set(cores_reserve = 2)
ntasks <- length(nvec) *  length(d.vec) #* length(dist_sum)
pb <- txtProgressBar(max=ntasks, style=3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress=progress)
sim_out <- foreach(i = nvec,
#.packages = c("expectreg", "stats"),
.options.snow=opts) %:%
foreach(m = d.vec) %dopar% {
dist <- mydist#dist_sum[j]
pval <- pval_perm <- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist) + d
permuted_data <- c(x, y)
pval[k] <- t.test(x, y, var.equal = F)$p.value
observed_statistic <- calculate_test_statistic(x, y)
permuted_statistics <- rep(0, P)
for (l in 1:P)
{
sampled_data <- sample(permuted_data)
permuted_data1 <- sampled_data[1:length(x)]
permuted_data2 <- sampled_data[(length(x) + 1):(length(x) + length(y))]
permuted_statistics[l] <- calculate_test_statistic(permuted_data1, permuted_data2)
}
pval_perm[k] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
power_t_test      <- mean(pval < alpha)
power_permutation <- mean(pval_perm < alpha)
Results <- list(
power_t_test= power_t_test,
power_permutation = power_permutation
)
}
# load necessary libraries
library("nortest")
library("dgof")
library("dplyr")
library(moments)
library(tseries)
library(LaplacesDemon)
#pacman::p_load(nortest, dgof, dplyr, moments, tseries, LaplacesDemon)
#Generate data from different distribution but located similarly
generate_data <- function(n, dist){
if(dist == "Standard Normal"){
x <- rnorm(n, mean = 0, sd = 1)
}
if(dist == "Chi-Square"){
x <- (rchisq(n, df = 3) - 3)/sqrt(6)
}
if(dist == "Gamma"){
x <- (rgamma(n, shape = 3, rate = 0.1) - 30)/sqrt(300)
}
if(dist == "Exponential"){
x <- rexp(n, rate = 1) - 1
}
if(dist == "t"){
x <- (rt(n, df = 7))/sqrt(7/5)
}
if(dist == "Uniform"){
x <- (runif(n, min = 0, max = 1) - 0.5)*sqrt(12)
}
if(dist == "Laplace"){
x <- rlaplace(n , location = 0, scale = 4)/sqrt(8)
}
if(dist == "Weibull"){
x <- (rweibull(n, shape = 1, scale = 2) - 2*gamma(51/50))/sqrt(4*(gamma(3) - gamma(2)))
}
if(dist == "LogNormal"){
x <- (rlnorm(n, meanlog = 0, sdlog = 1) - exp(0 + 1/2))/sqrt((exp(1)-1)*exp(2*0 + 1))
}
if(dist == "Contaminated"){
br <- rbinom(n , size = 1 , prob = 0.7)
sd_br <- sqrt(1 + br * 24)
x <- rnorm(n, mean = 0, sd = sd_br)/sqrt(03 + 0.7*25)
}
return(x)
}
#Apply different tests
generate_tests <- function(x, test){
if(test == "KS"){
output <- lillie.test(x)
}
if(test == "SW"){
output <- shapiro.test(x)
}
if(test == "JB"){
output <- jarque.test(x)
}
if(test == "DAP"){
output <- agostino.test(x)
}
if(test == "AD"){
output <- ad.test(x)
}
if(test == "SF"){
output <- sf.test(x)
}
return(output)
}
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PERFORM SIMULATIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%----
## Set up
N <- 50; P <- 10; alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t")
mydist <-dist_sum[1]
nvec <- c(5, 8) #, 10, 20, 50)
d.vec <- c(0.25, 0.5) #, 0.75)
# Parallelized simulation setup
par_set(cores_reserve = 2)
ntasks <- length(nvec) *  length(d.vec) #* length(dist_sum)
pb <- txtProgressBar(max=ntasks, style=3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress=progress)
sim_out <- foreach(i = nvec,
#.packages = c("expectreg", "stats"),
.options.snow=opts) %:%
foreach(m = d.vec) %dopar% {
dist <- mydist#dist_sum[j]
pval <- pval_perm <- numeric(N)
for (k in 1:N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist) + d
permuted_data <- c(x, y)
pval[k] <- t.test(x, y, var.equal = F)$p.value
observed_statistic <- calculate_test_statistic(x, y)
permuted_statistics <- rep(0, P)
for (l in 1:P)
{
sampled_data <- sample(permuted_data)
permuted_data1 <- sampled_data[1:length(x)]
permuted_data2 <- sampled_data[(length(x) + 1):(length(x) + length(y))]
permuted_statistics[l] <- calculate_test_statistic(permuted_data1, permuted_data2)
}
pval_perm[k] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
power_t_test      <- mean(pval < alpha)
power_permutation <- mean(pval_perm < alpha)
Results <- list(
power_t_test= power_t_test,
power_permutation = power_permutation
)
}
sim_out <- foreach(i = nvec,
#.packages = c("expectreg", "stats"),
.options.snow=opts) %:%
foreach(d = d.vec) %dopar% {
dist <- mydist#dist_sum[j]
pval <- pval_perm <- numeric(N)
for (k in 1:N) {
x <- generate_data(i, dist)
y <- generate_data(i, dist) + d
permuted_data <- c(x, y)
pval[k] <- t.test(x, y, var.equal = F)$p.value
observed_statistic <- calculate_test_statistic(x, y)
permuted_statistics <- rep(0, P)
for (l in 1:P)
{
sampled_data <- sample(permuted_data)
permuted_data1 <- sampled_data[1:length(x)]
permuted_data2 <- sampled_data[(length(x) + 1):(length(x) + length(y))]
permuted_statistics[l] <- calculate_test_statistic(permuted_data1, permuted_data2)
}
pval_perm[k] <- round(mean(abs(permuted_statistics) >= abs(observed_statistic)), 5)
}
power_t_test      <- mean(pval < alpha)
power_permutation <- mean(pval_perm < alpha)
Results <- list(
power_t_test= power_t_test,
power_permutation = power_permutation
)
}
for (t in seq_along(nvec)) {
for (i in seq_along(d.vec)) {
ptt <- (sim_out[[t]][[i]]$power_t_test)
ppt <- (sim_out[[t]][[i]]$power_permutation)
cat("sample size=", nvec[t], "effect size=", d.vec[i], "distribution =", mydist, "\n")
cat(sprintf("%12.4f power t test\n",          ptt ))
cat(sprintf("%12.4f power permutation\n",     ppt ))
cat(sprintf("%12.4f poer loss\n",     ppt-ptt))
}
}
