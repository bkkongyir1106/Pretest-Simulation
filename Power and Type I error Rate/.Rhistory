for (m in 1:length(sample_size)) {
n <- sample_size[m]
for (j in 1:length(shapiro_alpha)) {
pretest_alpha <- dist_sum[j]
num_sample <- 0
pval_error <- numeric(N)
while(num_sample < N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
if(shapiro.test(x)$p.value > pre_alpha & shapiro.test(y)$p.value > pre_alpha){
num_sample <- num_sample + 1
pval_error[k] <- t.test(x, y , var.equal = F)$p.value
}
}
TypeI_error_ttest[i, j, m] <- mean(pval_error < alpha)
TypeI_error_permutation[i, j, m] <- mean(pval_perm_error < alpha)
power_t_test[i, j, m] <- mean(pval_power < alpha)
power_permutation[i, j, m] <- mean(pval_perm_power < alpha)
}
}
}
powerloss <- power_permutation - power_t_test
})
powervec <- numeric(length(sample_size) * length(dist_sum) * length(shapiro_alpha))
TypeI_error_ttest <- TypeI_error_permutation<- power_t_test <- power_permutation <- array(powervec,
dim = c(5, 9, 5), dimnames = list(dist_sum, sample_size, shapiro_alpha))
system.time({
for (i in 1:length(dist_sum)) {
dist <- dist_sum[i]
for (m in 1:length(sample_size)) {
n <- sample_size[m]
for (j in 1:length(shapiro_alpha)) {
pretest_alpha <- dist_sum[j]
num_sample <- 0
pval_error <- numeric(N)
while(num_sample < N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
if(shapiro.test(x)$p.value > pre_alpha & shapiro.test(y)$p.value > pre_alpha){
num_sample <- num_sample + 1
pval_error[k] <- t.test(x, y , var.equal = F)$p.value
}
}
TypeI_error_ttest[i, j, m] <- mean(pval_error < alpha)
TypeI_error_permutation[i, j, m] <- mean(pval_perm_error < alpha)
power_t_test[i, j, m] <- mean(pval_power < alpha)
power_permutation[i, j, m] <- mean(pval_perm_power < alpha)
}
}
}
powerloss <- power_permutation - power_t_test
})
shapiro_alpha <- c(0.1,0.05,0.01, 0.005,0.000)
sample_size<-c(10,20,30,40,50)
set.seed(33)
powervec <- numeric(length(sample_size) * length(dist_sum) * length(shapiro_alpha))
TypeI_error_ttest <- TypeI_error_permutation<- power_t_test <- power_permutation <- array(powervec,
dim = c(5, 9, 5), dimnames = list(dist_sum, sample_size, shapiro_alpha))
N <- 1e2; alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t", "Exponential", "Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
shapiro_alpha <- c(0.1,0.05,0.01, 0.005,0.000)
sample_size<-c(10,20,30,40,50)
set.seed(33)
powervec <- numeric(length(sample_size) * length(dist_sum) * length(shapiro_alpha))
TypeI_error_ttest <-array(powervec, dim = c(5, 9, 5), dimnames = list(dist_sum, sample_size, shapiro_alpha))
powervec
powervec <- numeric(length(dist_sum) * length(sample_size) * length(shapiro_alpha))
TypeI_error_ttest <-array(powervec, dim = c(5, 9, 5), dimnames = list(dist_sum, sample_size, shapiro_alpha))
suppressWarnings({
# Code that generates warning messages
#Generate data from different distribution but located similarly
generate_data <- function(n, dist){
if(dist == "Standard Normal"){
x <- rnorm(n, mean = 0, sd = 1)
}
if(dist == "Chi-Square"){
x <- (rchisq(n, df = 3) - 3)/sqrt(6)
}
if(dist == "Gamma"){
x <- (rgamma(n, shape = 3, rate = 0.1) - 30)/sqrt(300)
}
if(dist == "Exponential"){
x <- rexp(n, rate = 1) - 1
}
if(dist == "t"){
x <- (rt(n, df = 7))/sqrt(7/5)
}
if(dist == "Uniform"){
x <- (runif(n, min = 0, max = 1) - 0.5)*sqrt(12)
}
if(dist == "Weibull"){
x <- (rweibull(n, shape = 1, scale = 2) - 2*gamma(51/50))/sqrt(4*(gamma(3) - gamma(2)))
}
if(dist == "LogNormal"){
x <- (rlnorm(n, meanlog = 0, sdlog = 1) - exp(0 + 1/2))/sqrt((exp(1)-1)*exp(2*0 + 1))
}
if(dist == "Contaminated"){
for (q in 1:n) {
p <- runif(1)
if (p < 0.3) {
x[q] <- rnorm(n = 1, mean = 0, sd = 1)
} else {
x[q] <- rnorm(n = 1, mean = 0, sd = 25)
}
}
x <- x/sqrt(0.3 + 0.7*25)
}
return(x)
}
#Apply different tests
generate_tests <- function(x, test){
if(test == "KS"){
output <- lillie.test(x)
}
if(test == "SW"){
output <- shapiro.test(x)
}
if(test == "JB"){
output <- jarque.test(x)
}
if(test == "DAP"){
output <- agostino.test(x)
}
if(test == "CVM"){
output <- cvm.test(x)
}
if(test == "LILLI"){
output <- lillie.test(x)
}
return(output)
}
})
N <- 1e2; alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t", "Exponential", "Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
shapiro_alpha <- c(0.1,0.05,0.01, 0.005,0.000)
sample_size<-c(10,20,30,40,50)
set.seed(33)
powervec <- numeric(length(dist_sum) * length(sample_size) * length(shapiro_alpha))
TypeI_error_ttest <-array(powervec, dim = c(5, 9, 5), dimnames = list(dist_sum, sample_size, shapiro_alpha))
powervec <- numeric(length(dist_sum) * length(sample_size) * length(shapiro_alpha))
TypeI_error_ttest <-array(powervec, dim = c(9, 5, 5), dimnames = list(dist_sum, sample_size, shapiro_alpha))
TypeI_error_ttest
system.time({
for (i in 1:length(dist_sum)) {
dist <- dist_sum[i]
for (m in 1:length(sample_size)) {
n <- sample_size[m]
for (j in 1:length(shapiro_alpha)) {
pretest_alpha <- dist_sum[j]
num_sample <- 0
pval_error <- numeric(N)
while(num_sample < N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
if(shapiro.test(x)$p.value > pre_alpha & shapiro.test(y)$p.value > pre_alpha){
num_sample <- num_sample + 1
pval_error[k] <- t.test(x, y , var.equal = F)$p.value
}
}
TypeI_error_ttest[i, j, m] <- mean(pval_error < alpha)
TypeI_error_permutation[i, j, m] <- mean(pval_perm_error < alpha)
power_t_test[i, j, m] <- mean(pval_power < alpha)
power_permutation[i, j, m] <- mean(pval_perm_power < alpha)
}
}
}
powerloss <- power_permutation - power_t_test
})
system.time({
for (i in 1:length(dist_sum)) {
dist <- dist_sum[i]
for (m in 1:length(sample_size)) {
n <- sample_size[m]
for (j in 1:length(shapiro_alpha)) {
pretest_alpha <- dist_sum[j]
num_sample <- 0
pval_error <- numeric(N)
while(num_sample < N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
if(shapiro.test(x)$p.value > pretest_alpha & shapiro.test(y)$p.value > pretest_alpha){
num_sample <- num_sample + 1
pval_error[k] <- t.test(x, y , var.equal = F)$p.value
}
}
TypeI_error_ttest[i, j, m] <- mean(pval_error < alpha)
TypeI_error_permutation[i, j, m] <- mean(pval_perm_error < alpha)
power_t_test[i, j, m] <- mean(pval_power < alpha)
power_permutation[i, j, m] <- mean(pval_perm_power < alpha)
}
}
}
powerloss <- power_permutation - power_t_test
})
TypeI_error_ttest
num_sample
pval_error
source("OneSample functions.R")
N <- 1e2; alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t", "Exponential", "Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
shapiro_alpha <- c(0.1,0.05,0.01, 0.005,0.000)
sample_size<-c(10,20,30,40,50)
set.seed(33)
powervec <- numeric(length(dist_sum) * length(sample_size) * length(shapiro_alpha))
TypeI_error_ttest <-array(powervec, dim = c(9, 5, 5), dimnames = list(dist_sum, sample_size, shapiro_alpha))
system.time({
for (i in 1:length(dist_sum)) {
dist <- dist_sum[i]
for (m in 1:length(sample_size)) {
n <- sample_size[m]
for (j in 1:length(shapiro_alpha)) {
pretest_alpha <- dist_sum[j]
num_sample <- 0
pval_error <- numeric(N)
while(num_sample < N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
if(shapiro.test(x)$p.value > pretest_alpha & shapiro.test(y)$p.value > pretest_alpha){
num_sample <- num_sample + 1
pval_error[num_sample] <- t.test(x, y , var.equal = F)$p.value
}
}
TypeI_error_ttest[i, j, m] <- mean(pval_error < alpha)
}
}
}
})
pval_error
num_sample
TypeI_error_ttest
# Set the working directory (keep this line as is)
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Power and Type I error Rate")
source("OneSample functions.R")
# Load necessary functions (assuming they are defined elsewhere)
# Parameters
N <- 1e2
alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t", "Exponential", "Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
shapiro_alpha <- c(0.1, 0.05, 0.01, 0.005, 0.000)
sample_size <- c(10, 20, 30, 40, 50)
set.seed(33)
# Initialize arrays
powervec <- numeric(length(dist_sum) * length(sample_size) * length(shapiro_alpha))
TypeI_error_ttest <- array(powervec, dim = c(9, 5, 5), dimnames = list(dist_sum, sample_size, shapiro_alpha))
# Simulation loop
for (i in 1:length(dist_sum)) {
dist <- dist_sum[i]
for (m in 1:length(sample_size)) {
n <- sample_size[m]
for (j in 1:length(shapiro_alpha)) {
pretest_alpha <- shapiro_alpha[j]
num_sample <- 0
pval_error <- numeric(N)
while (num_sample < N) {
x <- generate_data(n, dist)  # Placeholder for data generation
y <- generate_data(n, dist)  # Placeholder for data generation
if (shapiro.test(x)$p.value > pretest_alpha & shapiro.test(y)$p.value > pretest_alpha) {
num_sample <- num_sample + 1
pval_error[num_sample] <- t.test(x, y, var.equal = FALSE)$p.value
}
}
TypeI_error_ttest[i, j, m] <- mean(pval_error < alpha)
}
}
}
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Power and Type I error Rate")
source("OneSample functions.R")
N <- 1e2; alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t", "Exponential", "Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
shapiro_alpha <- c(0.1,0.05,0.01, 0.005,0.000)
sample_size<-c(10,20,30,40,50)
set.seed(33)
powervec <- numeric(length(dist_sum) * length(sample_size) * length(shapiro_alpha))
TypeI_error_ttest <-array(powervec, dim = c(9, 5, 5), dimnames = list(dist_sum, sample_size, shapiro_alpha))
system.time({
for (i in 1:length(dist_sum)) {
dist <- dist_sum[i]
for (m in 1:length(sample_size)) {
n <- sample_size[m]
for (j in 1:length(shapiro_alpha)) {
pretest_alpha <- dist_sum[j]
num_sample <- 0
pval_error <- numeric(N)
while(num_sample < N) {
x <- generate_data(n, dist)
y <- generate_data(n, dist)
if(shapiro.test(x)$p.value > pretest_alpha & shapiro.test(y)$p.value > pretest_alpha){
num_sample <- num_sample + 1
pval_error[num_sample] <- t.test(x, y , var.equal = F)$p.value
}
}
TypeI_error_ttest[i, j, m] <- mean(pval_error < alpha)
}
}
}
})
# Parameters
N <- 1e1
alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t", "Exponential", "Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
shapiro_alpha <- c(0.1, 0.05, 0.01, 0.005, 0.000)
sample_size <- c(10, 20, 30, 40, 50)
set.seed(33)
# Initialize arrays
powervec <- numeric(length(dist_sum) * length(sample_size) * length(shapiro_alpha))
TypeI_error_ttest <- array(powervec, dim = c(9, 5, 5), dimnames = list(dist_sum, sample_size, shapiro_alpha))
# Simulation loop
for (i in 1:length(dist_sum)) {
dist <- dist_sum[i]
for (m in 1:length(sample_size)) {
n <- sample_size[m]
print(n)
for (j in 1:length(shapiro_alpha)) {
pretest_alpha <- shapiro_alpha[j]
num_sample <- 0
pval_error <- numeric(N)
while (num_sample < N) {
x <- generate_data(n, dist)  # Placeholder for data generation
y <- generate_data(n, dist)  # Placeholder for data generation
if (shapiro.test(x)$p.value > pretest_alpha & shapiro.test(y)$p.value > pretest_alpha) {
num_sample <- num_sample + 1
pval_error[num_sample] <- t.test(x, y, var.equal = FALSE)$p.value
}
}
TypeI_error_ttest[i, j, m] <- mean(pval_error < alpha)
}
}
}
TypeI_error_ttest
pval_error
num_sample
# Set the working directory (keep this line as is)
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Power and Type I error Rate")
source("OneSample functions.R")
# Load necessary functions (assuming they are defined elsewhere)
# Parameters
N <- 1e2
alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t", "Exponential", "Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
shapiro_alpha <- c(0.1, 0.05, 0.01, 0.005, 0.000)
sample_size <- c(10, 20, 30, 40, 50)
set.seed(33)
# Initialize arrays
powervec <- numeric(length(dist_sum) * length(sample_size) * length(shapiro_alpha))
TypeI_error_ttest <- array(powervec, dim = c(9, 5, 5), dimnames = list(dist_sum, sample_size, shapiro_alpha))
# Simulation loop
for (i in 1:length(dist_sum)) {
dist <- dist_sum[i]
print(dist)
for (m in 1:length(sample_size)) {
n <- sample_size[m]
for (j in 1:length(shapiro_alpha)) {
pretest_alpha <- shapiro_alpha[j]
num_sample <- 0
pval_error <- numeric(N)
while (num_sample < N) {
x <- generate_data(n, dist)  # Placeholder for data generation
y <- generate_data(n, dist)  # Placeholder for data generation
if (shapiro.test(x)$p.value > pretest_alpha & shapiro.test(y)$p.value > pretest_alpha) {
num_sample <- num_sample + 1
pval_error[num_sample] <- t.test(x, y, var.equal = FALSE)$p.value
}
}
TypeI_error_ttest[i, j, m] <- mean(pval_error < alpha)
}
}
}
# Set the working directory (keep this line as is)
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Power and Type I error Rate")
source("OneSample functions.R")
# Load necessary functions (assuming they are defined elsewhere)
# Parameters
N <- 1e2
alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t","Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
shapiro_alpha <- c(0.1, 0.05, 0.01, 0.005, 0.000)
sample_size <- c(10, 20, 30, 40, 50)
set.seed(33)
# Initialize arrays
powervec <- numeric(length(dist_sum) * length(sample_size) * length(shapiro_alpha))
TypeI_error_ttest <- array(powervec, dim = c(8, 5, 5), dimnames = list(dist_sum, sample_size, shapiro_alpha))
# Simulation loop
for (i in 1:length(dist_sum)) {
dist <- dist_sum[i]
print(dist)
for (m in 1:length(sample_size)) {
n <- sample_size[m]
for (j in 1:length(shapiro_alpha)) {
pretest_alpha <- shapiro_alpha[j]
num_sample <- 0
pval_error <- numeric(N)
while (num_sample < N) {
x <- generate_data(n, dist)  # Placeholder for data generation
y <- generate_data(n, dist)  # Placeholder for data generation
if (shapiro.test(x)$p.value > pretest_alpha & shapiro.test(y)$p.value > pretest_alpha) {
num_sample <- num_sample + 1
pval_error[num_sample] <- t.test(x, y, var.equal = FALSE)$p.value
}
}
TypeI_error_ttest[i, j, m] <- mean(pval_error < alpha)
}
}
}
source("OneSample functions.R")
# Load necessary functions (assuming they are defined elsewhere)
# Parameters
N <- 1e1
alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t","Chi-Square", "Gamma", "Weibull",
"LogNormal", "Contaminated")
shapiro_alpha <- c(0.1, 0.05, 0.01, 0.005, 0.000)
sample_size <- c(10, 20, 30, 40, 50)
set.seed(33)
# Initialize arrays
powervec <- numeric(length(dist_sum) * length(sample_size) * length(shapiro_alpha))
TypeI_error_ttest <- array(powervec, dim = c(8, 5, 5), dimnames = list(dist_sum, sample_size, shapiro_alpha))
# Simulation loop
for (i in 1:length(dist_sum)) {
dist <- dist_sum[i]
print(dist)
for (m in 1:length(sample_size)) {
n <- sample_size[m]
for (j in 1:length(shapiro_alpha)) {
pretest_alpha <- shapiro_alpha[j]
num_sample <- 0
pval_error <- numeric(N)
while (num_sample < N) {
x <- generate_data(n, dist)  # Placeholder for data generation
y <- generate_data(n, dist)  # Placeholder for data generation
if (shapiro.test(x)$p.value > pretest_alpha & shapiro.test(y)$p.value > pretest_alpha) {
num_sample <- num_sample + 1
pval_error[num_sample] <- t.test(x, y, var.equal = FALSE)$p.value
}
}
TypeI_error_ttest[i, j, m] <- mean(pval_error < alpha)
}
}
}
pval_error
TypeI_error_ttest
num_sample
while (num_sample < N) {
x <- generate_data(n, dist)  # Placeholder for data generation
y <- generate_data(n, dist)  # Placeholder for data generation
if (shapiro.test(x)$p.value > pretest_alpha & shapiro.test(y)$p.value > pretest_alpha) {
num_sample <- num_sample + 1
pval_error[num_sample] <- t.test(x, y, var.equal = FALSE)$p.value
}
}
N
powervec
TypeI_error_ttest
num_sample
pval_error
# Set the working directory (keep this line as is)
setwd("/Users/benedictkongyir/Desktop/OSU/Research/Pretest-Simulation/Power and Type I error Rate")
source("OneSample functions.R")
# Load necessary functions (assuming they are defined elsewhere)
# Parameters
N <- 1e3
alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t","Chi-Square", "Gamma", "Weibull",
"LogNormal")
shapiro_alpha <- c(0.1, 0.05, 0.01, 0.005, 0.000)
sample_size <- c(10, 20, 30, 40, 50)
set.seed(33)
# Initialize arrays
powervec <- numeric(length(dist_sum) * length(sample_size) * length(shapiro_alpha))
TypeI_error_ttest <- array(powervec, dim = c(8, 5, 5), dimnames = list(dist_sum, sample_size, shapiro_alpha))
source("OneSample functions.R")
# Load necessary functions (assuming they are defined elsewhere)
# Parameters
N <- 1e3
alpha <- 0.05
dist_sum <- c("Standard Normal", "Uniform", "t","Chi-Square", "Gamma", "Weibull",
"LogNormal")
shapiro_alpha <- c(0.1, 0.05, 0.01, 0.005, 0.000)
sample_size <- c(10, 20, 30, 40, 50)
set.seed(33)
# Initialize arrays
powervec <- numeric(length(dist_sum) * length(sample_size) * length(shapiro_alpha))
TypeI_error_ttest <- array(powervec, dim = c(7, 5, 5), dimnames = list(dist_sum, sample_size, shapiro_alpha))
# Simulation loop
for (i in 1:length(dist_sum)) {
dist <- dist_sum[i]
print(dist)
for (m in 1:length(sample_size)) {
n <- sample_size[m]
for (j in 1:length(shapiro_alpha)) {
pretest_alpha <- shapiro_alpha[j]
num_sample <- 0
pval_error <- numeric(N)
while (num_sample < N) {
x <- generate_data(n, dist)  # Placeholder for data generation
y <- generate_data(n, dist)  # Placeholder for data generation
if (shapiro.test(x)$p.value > pretest_alpha & shapiro.test(y)$p.value > pretest_alpha) {
num_sample <- num_sample + 1
pval_error[num_sample] <- t.test(x, y, var.equal = FALSE)$p.value
}
}
TypeI_error_ttest[i, j, m] <- mean(pval_error < alpha)
}
}
}
