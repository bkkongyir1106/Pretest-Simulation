# logn distn
perm.test_p_value_logn[j] <- round(mean(abs(permuted_statistics_logn) >= abs(observed_statistic_logn)), 5)
if(perm.test_p_value_logn[j] < alpha){
pwer_logn[j] <- 1
}
# gamma distn
perm.test_p_value_gamma[j] <- round(mean(abs(permuted_statistics_gamma) >= abs(observed_statistic_gamma)), 5)
if(perm.test_p_value_gamma[j] < alpha){
pwer_gamma[j] <- 1
}
# chisq distn
perm.test_p_value_chisq[j] <- round(mean(abs(permuted_statistics_chisq) >= abs(observed_statistic_chisq)), 5)
if(perm.test_p_value_chisq[j] < alpha){
pwer_chisq[j] <- 1
}
# weibul distn
perm.test_p_value_weibul[j] <- round(mean(abs(permuted_statistics_weibul) >= abs(observed_statistic_weibul)), 5)
if(perm.test_p_value_weibul[j] < alpha){
pwer_weibul[j] <- 1
}
# beta distn
perm.test_p_value_beta[j] <- round(mean(abs(permuted_statistics_beta) >= abs(observed_statistic_beta)), 5)
if(perm.test_p_value_beta[j] < alpha){
pwer_beta[j] <- 1
}
power_perm_test_exp[k] <- round(mean(pwer_exp), 5)
power_perm_test_t[k] <- round(mean(pwer_t), 5)
power_perm_test_logn[k] <- round(mean(pwer_logn), 5)
power_perm_test_gamma[k] <- round(mean(pwer_gamma), 5)
power_perm_test_chisq[k] <- round(mean(pwer_chisq), 5)
power_perm_test_weibul[k] <- round(mean(pwer_weibul), 5)
power_perm_test_beta[k] <- round(mean(pwer_beta), 5)
}
}
power_perm_test_exp <- power_perm_test_t <- power_perm_test_logn <- power_perm_test_gamma <- power_perm_test_chisq <- power_perm_test_weibul <- power_perm_test_beta<- numeric(length(n.vec))
for(k in 1 : length(n.vec)){
n <- n.vec[k]
print(n)
# exp distn
e1 <- rexp(n, rate = 1)
e2 <- rexp(n, rate = 1) + d
permuted_data_exp <- c(e1,e2)
# t distn
t1 <-rt(n, df = 3)/sqrt(3)
t2 <-rt(n, df = 3)/sqrt(3) + d
permuted_data_t <- c(t1,t2)
# lognormal
l1 <- rlnorm(n, meanlog = 0, sdlog = 1)
l2 <- rlnorm(n, meanlog = 0, sdlog = 1)
z1 <- (l1- exp(0+1/2))/sqrt(sqrt((exp(1)-1)*exp(2*0 + 1)))
z2 <- (l2- exp(0+1/2))/sqrt(sqrt((exp(1)-1)*exp(2*0 + 1))) + d
permuted_data_logn <- c(z1,z2)
# gamma disn
g1 <- (rgamma(n, shape = 3, rate = 0.1) - 30)/sqrt(300)
g2 <- (rgamma(n, shape = 3, rate = 0.1) - 30)/sqrt(300) + d
permuted_data_gamma <- c(g1, g2)
# Chi-squared
k1 <-(rchisq(n, df = 7) - 7)/sqrt(4)
k2 <-(rchisq(n, df = 7) - 7)/sqrt(4) + d
permuted_data_chisq <- c(k1,k2)
#Weibull
weibul1 <- rweibull(n, shape = 1, scale = 2)
weibul2 <- rweibull(n, shape = 1, scale = 2)
w1 <- (weibul1-2*gamma(2))/sqrt(4*(gamma(3) - gamma(2)))
w2 <- (weibul2-2*gamma(2))/sqrt(4*(gamma(3) - gamma(2))) + d
permuted_data_weibul <- c(w1,w2)
# beta distn
shape1 = 2; shape2 = 3
beta1 <- rbeta(n, shape1, shape2 )
beta2 <- rbeta(n, shape1, shape2)
b1 <- (beta1 - shape1/(shape1 + shape2))/((shape1*shape2)/((shape1 + shape2)^2)*(shape1 + shape2 + 1))
b2 <- (beta2 - shape1/(shape1 + shape2))/((shape1*shape2)/((shape1 + shape2)^2)*(shape1 + shape2 + 1))
permuted_data_beta <- c(b1,b2)
# Function to calculate the test statistic (difference of means)
calculate_test_statistic <- function(x, y) {
return((mean(x) - mean(y))/sqrt(var(x)/length(x) + var(y)/length(y)))
}
pwer_exp <- pwer_t <- pwer_logn <- pwer_gamma <- pwer_chisq <- pwer_weibul <- pwer_beta<- rep(0, N)
perm.test_p_value_exp <- perm.test_p_value_t <- perm.test_p_value_logn <- perm.test_p_value_gamma <-
perm.test_p_value_chisq <- perm.test_p_value_weibul <- perm.test_p_value_beta <- rep(0, N)
for(j in 1 : N){
permuted_statistics_exp <- permuted_statistics_t <- permuted_statistics_logn <- permuted_statistics_gamma <-
permuted_statistics_chisq <- permuted_statistics_weibul <- permuted_statistics_beta <- rep(0, P)
for(i in 1 : P){
permuted_data_exp <- sample(permuted_data_exp)
permuted_data_t <- sample(permuted_data_t)
permuted_data_logn <- sample(permuted_data_logn)
permuted_data_gamma <- sample(permuted_data_gamma)
permuted_data_chisq <- sample(permuted_data_chisq)
permuted_data_weibul <- sample(permuted_data_weibul)
permuted_data_beta <- sample(permuted_data_beta)
# Calculate the test statistic for the permuted data
# exp
permuted_exp1 <- permuted_data_exp[1:length(e1)]
permuted_exp2 <- permuted_data_exp[(length(e1) + 1):(length(e1) + length(e2))]
permuted_statistics_exp[i] <- calculate_test_statistic(permuted_exp1, permuted_exp2)
# t distn
permuted_t1 <- permuted_data_t[1:length(t1)]
permuted_t2 <- permuted_data_t[(length(t1) + 1):(length(t1) + length(t2))]
permuted_statistics_t[i] <- calculate_test_statistic(permuted_t1, permuted_t2)
# logn distn
permuted_logn1 <- permuted_data_logn[1:length(z1)]
permuted_logn2 <- permuted_data_logn[(length(z1) + 1):(length(z1) + length(z2))]
permuted_statistics_logn[i] <- calculate_test_statistic(permuted_logn1, permuted_logn2)
# gamma distn
permuted_gamma1 <- permuted_data_gamma[1:length(g1)]
permuted_gamma2 <- permuted_data_gamma[(length(g1) + 1):(length(g1) + length(g2))]
permuted_statistics_gamma[i] <- calculate_test_statistic(permuted_gamma1, permuted_gamma2)
# chisq distn
permuted_chisq1 <- permuted_data_chisq[1:length(k1)]
permuted_chisq2 <- permuted_data_chisq[(length(k1) + 1):(length(k1) + length(k2))]
permuted_statistics_chisq[i] <- calculate_test_statistic(permuted_chisq1, permuted_chisq2)
# weibul distn
permuted_weibul1 <- permuted_data_weibul[1:length(w1)]
permuted_weibul2<- permuted_data_weibul[(length(w1) + 1):(length(w1) + length(w2))]
permuted_statistics_weibul[i] <- calculate_test_statistic(permuted_weibul1, permuted_weibul2)
# beta distn
permuted_beta1 <- permuted_data_beta[1:length(g1)]
permuted_beta2 <- permuted_data_beta[(length(g1) + 1):(length(w1) + length(w2))]
permuted_statistics_weibul[i] <- calculate_test_statistic(permuted_beta1, permuted_beta2)
}
# Observed test statistic
observed_statistic_exp <- calculate_test_statistic(e1, e2)
observed_statistic_t <- calculate_test_statistic(t1, t2)
observed_statistic_logn <- calculate_test_statistic(z1, z2)
observed_statistic_gamma <- calculate_test_statistic(g1, g2)
observed_statistic_chisq <- calculate_test_statistic(k1, k2)
observed_statistic_weibul <- calculate_test_statistic(w1, w2)
observed_statistic_beta <- calculate_test_statistic(b1, b2)
# Calculate the pvalue of test
#exp distn
perm.test_p_value_exp[j] <- round(mean(abs(permuted_statistics_exp) >= abs(observed_statistic_exp)), 5)
if(perm.test_p_value_exp[j] < alpha){
pwer_exp[j] <- 1
}
# t distn
perm.test_p_value_t[j] <- round(mean(abs(permuted_statistics_t) >= abs(observed_statistic_t)), 5)
if(perm.test_p_value_t[j] < alpha){
pwer_t[j] <- 1
}
# logn distn
perm.test_p_value_logn[j] <- round(mean(abs(permuted_statistics_logn) >= abs(observed_statistic_logn)), 5)
if(perm.test_p_value_logn[j] < alpha){
pwer_logn[j] <- 1
}
# gamma distn
perm.test_p_value_gamma[j] <- round(mean(abs(permuted_statistics_gamma) >= abs(observed_statistic_gamma)), 5)
if(perm.test_p_value_gamma[j] < alpha){
pwer_gamma[j] <- 1
}
# chisq distn
perm.test_p_value_chisq[j] <- round(mean(abs(permuted_statistics_chisq) >= abs(observed_statistic_chisq)), 5)
if(perm.test_p_value_chisq[j] < alpha){
pwer_chisq[j] <- 1
}
# weibul distn
perm.test_p_value_weibul[j] <- round(mean(abs(permuted_statistics_weibul) >= abs(observed_statistic_weibul)), 5)
if(perm.test_p_value_weibul[j] < alpha){
pwer_weibul[j] <- 1
}
# beta distn
perm.test_p_value_beta[j] <- round(mean(abs(permuted_statistics_beta) >= abs(observed_statistic_beta)), 5)
if(perm.test_p_value_beta[j] < alpha){
pwer_beta[j] <- 1
}
power_perm_test_exp[k] <- round(mean(pwer_exp), 5)
power_perm_test_t[k] <- round(mean(pwer_t), 5)
power_perm_test_logn[k] <- round(mean(pwer_logn), 5)
power_perm_test_gamma[k] <- round(mean(pwer_gamma), 5)
power_perm_test_chisq[k] <- round(mean(pwer_chisq), 5)
power_perm_test_weibul[k] <- round(mean(pwer_weibul), 5)
power_perm_test_beta[k] <- round(mean(pwer_beta), 5)
}
}
power_perm_test_weibul
power_perm_test_beta
power_perm_test_chisq
power_perm_test_gamma
power_perm_test_logn
power_perm_test_t
power_perm_test_exp
power_loss_exp <- power_perm_test_exp - power_t_test_exp
power_loss_t <- power_perm_test_t - power_t_test_t
power_loss_logn <- power_perm_test_logn - power_t_test_logn
power_loss_gamma <- power_perm_test_gamma - power_t_test_gamma
power_t_test_normal <- power_t_test_exp <- power_t_test_t <- power_t_test_logn <-power_t_test_chisq <- power_t_test_weibull <- power_t_test_beta <- power_t_test_gamma<- numeric(length(n.vec))
for(k in 1 : length(n.vec)){
n = n.vec[k]
powr_ttest_n <-powr_ttest_e <- powr_ttest_t <- powr_ttest_logn <- powr_ttest_gamma <- powr_ttest_chisq <- powr_ttest_weibull <- powr_ttest_beta <- numeric(N)
for(j in 1 : N){
# normal distn
n1 <- rnorm(n, mean = 0, sd = 1)
n2 <- rnorm(n, mean = 0, sd = 1) + d
if(t.test(n1, n2, var.equal = T)$p.value < alpha){
powr_ttest_n[j] <- 1
}
# exp distn
e1 <- rexp(n, rate = 1)
e2 <- rexp(n, rate = 1) + d
if(t.test(e1, e2, var.equal = T)$p.value < alpha){
powr_ttest_e[j] <- 1
}
# t distn
t1 <-rt(n, df = 3)
t2 <-rt(n, df = 3) + d
if(t.test((t1)/sqrt(3), (t2)/sqrt(3), var.equal = T)$p.value <= alpha){
powr_ttest_t[j] <- 1
}
# lognormal distn
l1 <- rlnorm(n, meanlog = 0, sdlog = 1)
l2 <- rlnorm(n, meanlog = 0, sdlog = 1)
z1 <- (l1- exp(0+1/2))/sqrt(sqrt((exp(1)-1)*exp(2*0 + 1)))
z2 <- (l2- exp(0+1/2))/sqrt(sqrt((exp(1)-1)*exp(2*0 + 1))) + d
if(t.test(z1, z2, var.equal = T)$p.value <= alpha){
powr_ttest_logn[j] <- 1
}
# gamma distn
g1 <- rgamma(n, shape = 3, rate = 0.1)
g2 <- rgamma(n, shape = 3, rate = 0.1) + d
if(t.test((g1-30)/sqrt(300), (g2-30)/sqrt(300) ,var.equal = T)$p.value <= alpha){
powr_ttest_gamma[j] <- 1
}
# Chi-squared
k1 <-rchisq(n, df = 7)
k2 <-rchisq(n, df = 7)
if(t.test((k1 - 7)/sqrt(14), (k2 - 7)/sqrt(14) + d)$p.value <= alpha){
powr_ttest_chisq[j] <- 1
}
#Weibull
weibul1 <- rweibull(n, shape = 1, scale = 2)
weibul2 <- rweibull(n, shape = 1, scale = 2)
w1 <- (weibul1-2*gamma(2))/sqrt(4*(gamma(3) - gamma(2)))
w2 <- (weibul2-2*gamma(2))/sqrt(4*(gamma(3) - gamma(2)))
}
if(t.test(w1 , w2 + d)$p.value <= alpha){
powr_ttest_weibull[j] <- 1
}
# Beta distn
shape1 = 2; shape2 = 3
beta1 <- rbeta(n, shape1, shape2 )
beta2 <- rbeta(n, shape1, shape2)
b1<- (beta1 - shape1/(shape1 + shape2))/((shape1*shape2)/((shape1 + shape2)^2)*(shape1 + shape2 + 1))
b2 <- (beta2 - shape1/(shape1 + shape2))/((shape1*shape2)/((shape1 + shape2)^2)*(shape1 + shape2 + 1))
if(t.test(b1, b2 + d)$p.value <= alpha){
powr_ttest_beta[j] <- 1
}
power_t_test_normal[k] <-round(mean(powr_ttest_n),3)
power_t_test_exp[k] <-round(mean(powr_ttest_e),3)
power_t_test_t[k] <-round(mean(powr_ttest_t),3)
power_t_test_logn[k] <-round(mean(powr_ttest_logn),3)
Power_t_test_gamma[k] <-round(mean(powr_ttest_gamma),3)
power_t_test_chisq[k] <-round(mean(powr_ttest_chisq),3)
power_t_test_weibull[k] <-round(mean(powr_ttest_weibull),3)
power_t_test_beta[k] <-round(mean(powr_ttest_beta),3)
}
power_t_test_normal <- power_t_test_exp <- power_t_test_t <- power_t_test_logn <-power_t_test_chisq <- power_t_test_weibull <- power_t_test_beta <- power_t_test_gamma<- numeric(length(n.vec))
for(k in 1 : length(n.vec)){
n = n.vec[k]
powr_ttest_n <-powr_ttest_e <- powr_ttest_t <- powr_ttest_logn <- powr_ttest_gamma <- powr_ttest_chisq <- powr_ttest_weibull <- powr_ttest_beta <- numeric(N)
for(j in 1 : N){
# normal distn
n1 <- rnorm(n, mean = 0, sd = 1)
n2 <- rnorm(n, mean = 0, sd = 1) + d
if(t.test(n1, n2, var.equal = T)$p.value < alpha){
powr_ttest_n[j] <- 1
}
# exp distn
e1 <- rexp(n, rate = 1)
e2 <- rexp(n, rate = 1) + d
if(t.test(e1, e2, var.equal = T)$p.value < alpha){
powr_ttest_e[j] <- 1
}
# t distn
t1 <-rt(n, df = 3)
t2 <-rt(n, df = 3) + d
if(t.test((t1)/sqrt(3), (t2)/sqrt(3), var.equal = T)$p.value <= alpha){
powr_ttest_t[j] <- 1
}
# lognormal distn
l1 <- rlnorm(n, meanlog = 0, sdlog = 1)
l2 <- rlnorm(n, meanlog = 0, sdlog = 1)
z1 <- (l1- exp(0+1/2))/sqrt(sqrt((exp(1)-1)*exp(2*0 + 1)))
z2 <- (l2- exp(0+1/2))/sqrt(sqrt((exp(1)-1)*exp(2*0 + 1))) + d
if(t.test(z1, z2, var.equal = T)$p.value <= alpha){
powr_ttest_logn[j] <- 1
}
# gamma distn
g1 <- rgamma(n, shape = 3, rate = 0.1)
g2 <- rgamma(n, shape = 3, rate = 0.1) + d
if(t.test((g1-30)/sqrt(300), (g2-30)/sqrt(300) ,var.equal = T)$p.value <= alpha){
powr_ttest_gamma[j] <- 1
}
# Chi-squared
k1 <-rchisq(n, df = 7)
k2 <-rchisq(n, df = 7)
if(t.test((k1 - 7)/sqrt(14), (k2 - 7)/sqrt(14) + d)$p.value <= alpha){
powr_ttest_chisq[j] <- 1
}
#Weibull
weibul1 <- rweibull(n, shape = 1, scale = 2)
weibul2 <- rweibull(n, shape = 1, scale = 2)
w1 <- (weibul1-2*gamma(2))/sqrt(4*(gamma(3) - gamma(2)))
w2 <- (weibul2-2*gamma(2))/sqrt(4*(gamma(3) - gamma(2)))
}
if(t.test(w1 , w2 + d)$p.value <= alpha){
powr_ttest_weibull[j] <- 1
}
# Beta distn
shape1 = 2; shape2 = 3
beta1 <- rbeta(n, shape1, shape2 )
beta2 <- rbeta(n, shape1, shape2)
b1<- (beta1 - shape1/(shape1 + shape2))/((shape1*shape2)/((shape1 + shape2)^2)*(shape1 + shape2 + 1))
b2 <- (beta2 - shape1/(shape1 + shape2))/((shape1*shape2)/((shape1 + shape2)^2)*(shape1 + shape2 + 1))
if(t.test(b1, b2 + d)$p.value <= alpha){
powr_ttest_beta[j] <- 1
}
power_t_test_normal[k] <-round(mean(powr_ttest_n),3)
power_t_test_exp[k] <-round(mean(powr_ttest_e),3)
power_t_test_t[k] <-round(mean(powr_ttest_t),3)
power_t_test_logn[k] <-round(mean(powr_ttest_logn),3)
power_t_test_gamma[k] <-round(mean(powr_ttest_gamma),3)
power_t_test_chisq[k] <-round(mean(powr_ttest_chisq),3)
power_t_test_weibull[k] <-round(mean(powr_ttest_weibull),3)
power_t_test_beta[k] <-round(mean(powr_ttest_beta),3)
}
power_t_test_beta
power_perm_test_exp <- power_perm_test_t <- power_perm_test_logn <- power_perm_test_gamma <- power_perm_test_chisq <- power_perm_test_weibul <- power_perm_test_beta<- numeric(length(n.vec))
for(k in 1 : length(n.vec)){
n <- n.vec[k]
print(n)
# exp distn
e1 <- rexp(n, rate = 1)
e2 <- rexp(n, rate = 1) + d
permuted_data_exp <- c(e1,e2)
# t distn
t1 <-rt(n, df = 3)/sqrt(3)
t2 <-rt(n, df = 3)/sqrt(3) + d
permuted_data_t <- c(t1,t2)
# lognormal
l1 <- rlnorm(n, meanlog = 0, sdlog = 1)
l2 <- rlnorm(n, meanlog = 0, sdlog = 1)
z1 <- (l1- exp(0+1/2))/sqrt(sqrt((exp(1)-1)*exp(2*0 + 1)))
z2 <- (l2- exp(0+1/2))/sqrt(sqrt((exp(1)-1)*exp(2*0 + 1))) + d
permuted_data_logn <- c(z1,z2)
# gamma disn
g1 <- (rgamma(n, shape = 3, rate = 0.1) - 30)/sqrt(300)
g2 <- (rgamma(n, shape = 3, rate = 0.1) - 30)/sqrt(300) + d
permuted_data_gamma <- c(g1, g2)
# Chi-squared
k1 <-(rchisq(n, df = 7) - 7)/sqrt(4)
k2 <-(rchisq(n, df = 7) - 7)/sqrt(4) + d
permuted_data_chisq <- c(k1,k2)
#Weibull
weibul1 <- rweibull(n, shape = 1, scale = 2)
weibul2 <- rweibull(n, shape = 1, scale = 2)
w1 <- (weibul1-2*gamma(2))/sqrt(4*(gamma(3) - gamma(2)))
w2 <- (weibul2-2*gamma(2))/sqrt(4*(gamma(3) - gamma(2))) + d
permuted_data_weibul <- c(w1,w2)
# beta distn
shape1 = 2; shape2 = 3
beta1 <- rbeta(n, shape1, shape2 )
beta2 <- rbeta(n, shape1, shape2)
b1 <- (beta1 - shape1/(shape1 + shape2))/((shape1*shape2)/((shape1 + shape2)^2)*(shape1 + shape2 + 1))
b2 <- (beta2 - shape1/(shape1 + shape2))/((shape1*shape2)/((shape1 + shape2)^2)*(shape1 + shape2 + 1))
permuted_data_beta <- c(b1,b2)
# Function to calculate the test statistic (difference of means)
calculate_test_statistic <- function(x, y) {
return((mean(x) - mean(y))/sqrt(var(x)/length(x) + var(y)/length(y)))
}
pwer_exp <- pwer_t <- pwer_logn <- pwer_gamma <- pwer_chisq <- pwer_weibul <- pwer_beta<- rep(0, N)
perm.test_p_value_exp <- perm.test_p_value_t <- perm.test_p_value_logn <- perm.test_p_value_gamma <-
perm.test_p_value_chisq <- perm.test_p_value_weibul <- perm.test_p_value_beta <- rep(0, N)
for(j in 1 : N){
permuted_statistics_exp <- permuted_statistics_t <- permuted_statistics_logn <- permuted_statistics_gamma <-
permuted_statistics_chisq <- permuted_statistics_weibul <- permuted_statistics_beta <- rep(0, P)
for(i in 1 : P){
permuted_data_exp <- sample(permuted_data_exp)
permuted_data_t <- sample(permuted_data_t)
permuted_data_logn <- sample(permuted_data_logn)
permuted_data_gamma <- sample(permuted_data_gamma)
permuted_data_chisq <- sample(permuted_data_chisq)
permuted_data_weibul <- sample(permuted_data_weibul)
permuted_data_beta <- sample(permuted_data_beta)
# Calculate the test statistic for the permuted data
# exp
permuted_exp1 <- permuted_data_exp[1:length(e1)]
permuted_exp2 <- permuted_data_exp[(length(e1) + 1):(length(e1) + length(e2))]
permuted_statistics_exp[i] <- calculate_test_statistic(permuted_exp1, permuted_exp2)
# t distn
permuted_t1 <- permuted_data_t[1:length(t1)]
permuted_t2 <- permuted_data_t[(length(t1) + 1):(length(t1) + length(t2))]
permuted_statistics_t[i] <- calculate_test_statistic(permuted_t1, permuted_t2)
# logn distn
permuted_logn1 <- permuted_data_logn[1:length(z1)]
permuted_logn2 <- permuted_data_logn[(length(z1) + 1):(length(z1) + length(z2))]
permuted_statistics_logn[i] <- calculate_test_statistic(permuted_logn1, permuted_logn2)
# gamma distn
permuted_gamma1 <- permuted_data_gamma[1:length(g1)]
permuted_gamma2 <- permuted_data_gamma[(length(g1) + 1):(length(g1) + length(g2))]
permuted_statistics_gamma[i] <- calculate_test_statistic(permuted_gamma1, permuted_gamma2)
# chisq distn
permuted_chisq1 <- permuted_data_chisq[1:length(k1)]
permuted_chisq2 <- permuted_data_chisq[(length(k1) + 1):(length(k1) + length(k2))]
permuted_statistics_chisq[i] <- calculate_test_statistic(permuted_chisq1, permuted_chisq2)
# weibul distn
permuted_weibul1 <- permuted_data_weibul[1:length(w1)]
permuted_weibul2<- permuted_data_weibul[(length(w1) + 1):(length(w1) + length(w2))]
permuted_statistics_weibul[i] <- calculate_test_statistic(permuted_weibul1, permuted_weibul2)
# beta distn
permuted_beta1 <- permuted_data_beta[1:length(g1)]
permuted_beta2 <- permuted_data_beta[(length(g1) + 1):(length(w1) + length(w2))]
permuted_statistics_weibul[i] <- calculate_test_statistic(permuted_beta1, permuted_beta2)
}
# Observed test statistic
observed_statistic_exp <- calculate_test_statistic(e1, e2)
observed_statistic_t <- calculate_test_statistic(t1, t2)
observed_statistic_logn <- calculate_test_statistic(z1, z2)
observed_statistic_gamma <- calculate_test_statistic(g1, g2)
observed_statistic_chisq <- calculate_test_statistic(k1, k2)
observed_statistic_weibul <- calculate_test_statistic(w1, w2)
observed_statistic_beta <- calculate_test_statistic(b1, b2)
# Calculate the pvalue of test
#exp distn
perm.test_p_value_exp[j] <- round(mean(abs(permuted_statistics_exp) >= abs(observed_statistic_exp)), 5)
if(perm.test_p_value_exp[j] < alpha){
pwer_exp[j] <- 1
}
# t distn
perm.test_p_value_t[j] <- round(mean(abs(permuted_statistics_t) >= abs(observed_statistic_t)), 5)
if(perm.test_p_value_t[j] < alpha){
pwer_t[j] <- 1
}
# logn distn
perm.test_p_value_logn[j] <- round(mean(abs(permuted_statistics_logn) >= abs(observed_statistic_logn)), 5)
if(perm.test_p_value_logn[j] < alpha){
pwer_logn[j] <- 1
}
# gamma distn
perm.test_p_value_gamma[j] <- round(mean(abs(permuted_statistics_gamma) >= abs(observed_statistic_gamma)), 5)
if(perm.test_p_value_gamma[j] < alpha){
pwer_gamma[j] <- 1
}
# chisq distn
perm.test_p_value_chisq[j] <- round(mean(abs(permuted_statistics_chisq) >= abs(observed_statistic_chisq)), 5)
if(perm.test_p_value_chisq[j] < alpha){
pwer_chisq[j] <- 1
}
# weibul distn
perm.test_p_value_weibul[j] <- round(mean(abs(permuted_statistics_weibul) >= abs(observed_statistic_weibul)), 5)
if(perm.test_p_value_weibul[j] < alpha){
pwer_weibul[j] <- 1
}
# beta distn
perm.test_p_value_beta[j] <- round(mean(abs(permuted_statistics_beta) >= abs(observed_statistic_beta)), 5)
if(perm.test_p_value_beta[j] < alpha){
pwer_beta[j] <- 1
}
power_perm_test_exp[k] <- round(mean(pwer_exp), 5)
power_perm_test_t[k] <- round(mean(pwer_t), 5)
power_perm_test_logn[k] <- round(mean(pwer_logn), 5)
power_perm_test_gamma[k] <- round(mean(pwer_gamma), 5)
power_perm_test_chisq[k] <- round(mean(pwer_chisq), 5)
power_perm_test_weibul[k] <- round(mean(pwer_weibul), 5)
power_perm_test_beta[k] <- round(mean(pwer_beta), 5)
}
}
power_loss_exp <- power_perm_test_exp - power_t_test_exp
power_loss_t <- power_perm_test_t - power_t_test_t
power_loss_logn <- power_perm_test_logn - power_t_test_logn
power_loss_gamma <- power_perm_test_gamma - power_t_test_gamma
power_loss_chisq <- power_perm_test_chisq - Power_t_test_chisq
power_loss_exp <- power_perm_test_exp - power_t_test_exp
power_loss_t <- power_perm_test_t - power_t_test_t
power_loss_logn <- power_perm_test_logn - power_t_test_logn
power_loss_gamma <- power_perm_test_gamma - power_t_test_gamma
power_loss_chisq <- power_perm_test_chisq - power_t_test_chisq
power_loss_weibul <- power_perm_test_weibul - Power_t_test_weibull
power_loss_exp <- power_perm_test_exp - power_t_test_exp
power_loss_t <- power_perm_test_t - power_t_test_t
power_loss_logn <- power_perm_test_logn - power_t_test_logn
power_loss_gamma <- power_perm_test_gamma - power_t_test_gamma
power_loss_chisq <- power_perm_test_chisq - power_t_test_chisq
power_loss_weibul <- power_perm_test_weibul - power_t_test_weibull
power_loss_beta <- power_perm_test_beta - power_ttest_beta
power_loss_exp <- power_perm_test_exp - power_t_test_exp
power_loss_t <- power_perm_test_t - power_t_test_t
power_loss_logn <- power_perm_test_logn - power_t_test_logn
power_loss_gamma <- power_perm_test_gamma - power_t_test_gamma
power_loss_chisq <- power_perm_test_chisq - power_t_test_chisq
power_loss_weibul <- power_perm_test_weibul - power_t_test_weibull
power_loss_beta <- power_perm_test_beta - power_t_test_beta
# power under t test
power_t<-c(power_t_test_normal, power_t_test_exp, power_t_test_t,  power_t_test_logn, power_t_test_gamma, power_t_test_chisq, power_t_test_weibull, power_t_test_beta)
power_table_t<-array(power_t, dim = c(5, 8), dimnames = list(n.vec,
c("norm_t", "exp_t", "t distn_t", "lognormal_t", "gamma_t", "chisq", "weibul", "beta")))
power_table_t
# power loss
powerloss_data<-c(power_loss_exp,power_loss_t, power_loss_logn,power_loss_gamma,power_loss_chisq, power_loss_weibul, power_loss_beta)
powerloss_table<-array(powerloss_data, dim = c(5, 7), dimnames = list(n.vec,
c("exponential", "t distn", "lognormal", "gamma", "chisq", "weibul", "beta")))
powerloss_table
knitr::opts_chunk$set(echo = TRUE)
alpha <- 0.05; N= 10; P = 1e2;  d = 0.5
n.vec = c(10, 20, 30, 40, 50)
set.seed(2024)
knitr::opts_chunk$set(echo = TRUE)
alpha <- 0.05; N= 1e2; P = 1e3;  d = 0.5
n.vec = c(10, 20, 30, 40, 50)
set.seed(2024)
w1
w2
w2 + d
